<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Dev on minjun's blog</title><link>https://jo-minjun.github.io/categories/dev/</link><description>Recent content in Dev on minjun's blog</description><image><title>minjun's blog</title><url>https://jo-minjun.github.io/logo.png</url><link>https://jo-minjun.github.io/logo.png</link></image><generator>Hugo -- gohugo.io</generator><language>kr</language><lastBuildDate>Tue, 18 Jul 2023 15:16:13 +0900</lastBuildDate><atom:link href="https://jo-minjun.github.io/categories/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Security 기본 구성</title><link>https://jo-minjun.github.io/notes/spring-security-in-action1/</link><pubDate>Tue, 18 Jul 2023 15:16:13 +0900</pubDate><guid>https://jo-minjun.github.io/notes/spring-security-in-action1/</guid><description>*Spring Security in Action을 읽고 작성했습니다.
https://product.kyobobook.co.kr/detail/S000061695014
Spring Security와 구성 요소 Spring Security는 스프링 프로젝트의 사실상 표준(defacto)입니다. 보안에 관련된 사전 구성 요소가 제공되며, 필요에 따라 일부 구성 요소만 재정의하여 사용할 수 있습니다.
Spring Security 의존성을 프로젝트에 추가하고 애플리케이션을 시작하면 아래와 같은 메시지를 확인할 수 있습니다.
Using generated security password: 41632cba-2835-43e3-85c8-3aeac7ce686a This generated password is for development use only. Your security configuration must be updated before running your application in production.</description><content:encoded><![CDATA[<blockquote>
<p>*Spring Security in Action을 읽고 작성했습니다.<br>
<a href="https://product.kyobobook.co.kr/detail/S000061695014">https://product.kyobobook.co.kr/detail/S000061695014</a></p>
</blockquote>
<h2 id="spring-security와-구성-요소">Spring Security와 구성 요소</h2>
<ul>
<li>
<p>Spring Security는 스프링 프로젝트의 사실상 표준(defacto)입니다. 보안에 관련된 사전 구성 요소가 제공되며, 필요에 따라 일부 구성 요소만 재정의하여 사용할 수 있습니다.</p>
</li>
<li>
<p>Spring Security 의존성을 프로젝트에 추가하고 애플리케이션을 시작하면 아래와 같은 메시지를 확인할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>Using generated security password: 41632cba-2835-43e3-85c8-3aeac7ce686a
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>This generated password is <span style="color:#66d9ef">for</span> development use only. Your security configuration must be updated before running your application in production.
</span></span></code></pre></div></li>
<li>
<p>구성 요소를 재정의 하지 않으면 위와 같이 기본 사용자 <code>user</code>와 암호(UUID)를 제공합니다. 애플리케이션의 엔드포인트를 호출하기 위해서는 Basic Auth를 사용하여 인증해야 합니다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># 인증을 사용한 경우</span>
</span></span><span style="display:flex;"><span>curl -u user:41632cba-2835-43e3-85c8-3aeac7ce686a http://localhost:8080/hello
</span></span><span style="display:flex;"><span>&lt; Hello!
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 인증을 사용하지 않은 경우</span>
</span></span><span style="display:flex;"><span>curl -v -X GET http://localhost:8080/hello
</span></span><span style="display:flex;"><span>&lt; ...
</span></span><span style="display:flex;"><span>&lt; HTTP/1.1 <span style="color:#ae81ff">401</span>
</span></span><span style="display:flex;"><span>&lt; ...
</span></span></code></pre></div></li>
<li>
<p>위와 같은 기본 사용자와 애플리케이션이 시작될 때 발급되는 암호를 이용한 인증은 사전 구성된 <code>UserDetailsService</code>, <code>PasswordEncoder</code>를 통해 구현됩니다.<br>
<img loading="lazy" src="/images/notes/spring-security-in-action/composition.png" alt="composition"  />
</p>
<ul>
<li>가장 기본적인 Spring Security의 구성 요소는 아래와 같습니다.</li>
<li><code>AuthenticationProvider</code>: 인증 논리를 정의하고 사용자와 암호의 관리를 위임합니다.</li>
<li><code>UserDetailsService</code>: 사용자에 대한 세부 정보를 제공합니다.</li>
<li><code>PasswordEncoder</code>: 인호를 인코딩하며, 암호가 기존 인코딩과 일치하는지 검증합니다.</li>
</ul>
</li>
</ul>
<h2 id="기본-구성-요소-재정의">기본 구성 요소 재정의</h2>
<ul>
<li>기본 구성 요소를 재정의하여 상황에 맞게 인증을 구현하고 보안을 적용할 수 있습니다.</li>
<li>기본 구성 요소는 직접 구현하여 만들거나, Spring Security에서 재공하는 구현을 사용할 수 있습니다.</li>
<li><code>UserDetailsService</code>와 <code>PasswordEncoder</code>는 가장 기본적인 구성 요소로, 인증에 이용되며 대부분의 애플리케이션은 이 두 구성 요소를 재정의합니다.</li>
</ul>
<blockquote>
<p>*&ldquo;hello!&ldquo;응답을 반환해주는 <code>/hello</code> 엔드포인트를 구현했다고 가정합니다.</p>
</blockquote>
<h3 id="passwordencoder-재정의">PasswordEncoder 재정의</h3>
<ul>
<li>먼저 <code>PasswordEncoder</code>부터 재정의해보겠습니다. 이 구성 요소는 암호를 인코딩하는 정책에 관한 내용을 설정합니다.</li>
<li><code>BCryptPasswordEncoder</code>는 Spring Security에서 제공하는 권장 구현입니다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> PasswordEncoder <span style="color:#a6e22e">passwordEncoder</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> strength <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">;</span> <span style="color:#75715e">// the log rounds to use, between 4 and 31
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> BCryptPasswordEncoder<span style="color:#f92672">(</span>strength<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="userdetailsservice-재정의">UserDetailsService 재정의</h3>
<ul>
<li>UserDetailService는 사용자의 이름, 암호 등 정보를 제공해주며, 단 하나의 read-only 메서드를 제공합니다.
<ul>
<li><code>UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;</code></li>
</ul>
</li>
<li>Spring Security는 <code>InMemoryUserDetailsManager</code> 구현을 제공해줍니다. 이 구현은 메모리에 자격 증명을 저장해서 Spring Security가 요청을 인증할 때 사용할 수 있게 해줍니다.
<blockquote>
<p><code>InMemoryUserDetailsManager</code> 구현은 예제나 개념 증명 또는 테스트 용도로 사용하기 편리한 구현입니다.<br>
<strong>상용 환경에서의 사용은 권장하지 않습니다.</strong></p>
</blockquote>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> UserDetailsService <span style="color:#a6e22e">userDetailsService</span><span style="color:#f92672">(</span>PasswordEncoder passwordEncoder<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>UserDetails user <span style="color:#f92672">=</span> User<span style="color:#f92672">.</span><span style="color:#a6e22e">builder</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span><span style="color:#a6e22e">username</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span><span style="color:#a6e22e">password</span><span style="color:#f92672">(</span>passwordEncoder<span style="color:#f92672">.</span><span style="color:#a6e22e">encode</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;password&#34;</span><span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span><span style="color:#a6e22e">roles</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;USER&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> InMemoryUserDetailsManager<span style="color:#f92672">(</span>user<span style="color:#f92672">);</span>
</span></span></code></pre></div><ul>
<li>이제 기본 구성 요소 재정의를 완료했습니다. 아래 명령어를 사용하면 InMemoryUserDetailsManager에 등록한 사용자를 이용해서 요청할 수 있습니다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>curl -u user:password http://localhost:8080/hello
</span></span><span style="display:flex;"><span>&lt; hello!
</span></span></code></pre></div><h2 id="엔드포인트-권한-부여-구성-재정의">엔드포인트 권한 부여 구성 재정의</h2>
<ul>
<li>우리는 모든 엔드포인트를 보호할 필요는 없으며, 보안이 필요한 엔드포인트에 대해 다른 권한 부여 규칙을 선택할 수 있어야 합니다.</li>
<li>엔드포인트별 다른 권한 부여 규칙을 선택하기 위해 <code>SecurityFilterChain</code>을 사용합니다.</li>
<li><code>SecurityFilterChain</code>는 <code>@Bean</code>으로 등록해야 하며, <code>SecurityFilterChain</code>과 관련된 자동 구성 설정을 사용하기 위해서 <code>@EnableWebSecurity</code>을 사용해야 합니다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@EnableWebSecurity</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SecurityConfiguration</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> SecurityFilterChain <span style="color:#a6e22e">securityFilterChain</span><span style="color:#f92672">(</span>HttpSecurity http<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> http<span style="color:#f92672">.</span><span style="color:#a6e22e">httpBasic</span><span style="color:#f92672">(</span>Customizer<span style="color:#f92672">.</span><span style="color:#a6e22e">withDefaults</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">authorizeHttpRequests</span><span style="color:#f92672">(</span>authorize <span style="color:#f92672">-&gt;</span> authorize
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">requestMatchers</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/hello&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">authenticated</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">anyRequest</span><span style="color:#f92672">().</span><span style="color:#a6e22e">permitAll</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// UserDetailsService, PasswordEncoder
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>위 설정은 <code>/hello</code> 엔드포인트에 대해 인증을 요구하며, 다른 엔드포인트는 인증을 요구하지 않습니다.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>curl http://localhost:8080/bye
</span></span><span style="display:flex;"><span>&lt; bye!
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>*Spring Security in Action에서 사용된 <code>WebSecurityConfigurerAdapter</code>는 Spring Security 5.7버전 이후로 지원이 중단되었습니다.<br>
따라서 이제는 <code>WebSecurityConfigurerAdapter</code>를 구현하기보다 <code>SecurityFilterChain</code>을 사용하는 것이 바람직합니다.</p>
</blockquote>
<h2 id="authenticationprovider-재정의">AuthenticationProvider 재정의</h2>
<ul>
<li>위 내용처럼 Spring Security는 상당히 유연하므로 다양한 옵션을 선택할 수 있습니다.</li>
<li>그림을 다시 살펴봅시다. <code>AuthenticationProvider</code>는 인증 논리를 구현하고 사용자와 암호 관리를 <code>UserDetailsService</code>와 <code>PasswordEncoder</code>에 위임합니다.<br>
<img loading="lazy" src="/images/notes/spring-security-in-action/composition.png" alt="composition"  />
</li>
<li>따라서 <code>AuthenticationProvider</code>를 재정의할 때는 주어진 구성 요소를 활용하는 것이 좋습니다.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@RequiredArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CustomAuthenticationProvider</span> <span style="color:#66d9ef">implements</span> AuthenticationProvider <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 재정의한 구성 요소 사용
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> UserDetailsService userDetailsService<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> PasswordEncoder passwordEncoder<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Authentication <span style="color:#a6e22e">authenticate</span><span style="color:#f92672">(</span>Authentication authentication<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> AuthenticationException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        String username <span style="color:#f92672">=</span> authentication<span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        String password <span style="color:#f92672">=</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>authentication<span style="color:#f92672">.</span><span style="color:#a6e22e">getCredentials</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> UserDetails userDetails <span style="color:#f92672">=</span> userDetailsService<span style="color:#f92672">.</span><span style="color:#a6e22e">loadUserByUsername</span><span style="color:#f92672">(</span>username<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// BCryptPasswordEncoder는 해쉬를 생성할 때마다 다른 salt 값을 사용합니다.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 따라서 matches 메서드를 사용해서 값이 일치하는지 검증해야 합니다.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>passwordEncoder<span style="color:#f92672">.</span><span style="color:#a6e22e">matches</span><span style="color:#f92672">(</span>password<span style="color:#f92672">,</span> userDetails<span style="color:#f92672">.</span><span style="color:#a6e22e">getPassword</span><span style="color:#f92672">()))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> UsernamePasswordAuthenticationToken<span style="color:#f92672">(</span>username<span style="color:#f92672">,</span> password<span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;());</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> AuthenticationCredentialsNotFoundException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Failed to authenticate&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Authentication 객체가 지원하는 유형인지 확인합니다.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">supports</span><span style="color:#f92672">(</span>Class<span style="color:#f92672">&lt;?&gt;</span> authentication<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> authentication<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>UsernamePasswordAuthenticationToken<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>이제 <code>/hello</code> 엔트포인트에 요청을 보내면 재정의한 <code>AuthenticationProvider</code>, <code>UserDetailsService</code>, <code>PasswordEncoder를</code> 사용하여 인증합니다.</li>
</ul>
]]></content:encoded></item><item><title>Java ExecutorService에 대하여</title><link>https://jo-minjun.github.io/notes/about-executor-service/</link><pubDate>Fri, 14 Jul 2023 10:18:29 +0900</pubDate><guid>https://jo-minjun.github.io/notes/about-executor-service/</guid><description>ExecutorService ExecutorService를 사용하면 간단하게 스레드풀을 생성해서 병렬처리를 할 수 있습니다. Executors의 스태틱 메서드를 통해 간단하게 ExecutorService를 사용할 수 있습니다. 생성자를 이용해 커스텀하게 생성할 수도 있습니다. 이상적인 풀 사이즈 Task Type Ideal pool size Considerations CPU bound CPU Core count 얼마나 많은 작업이 같은 CPU에서 동작하는지 (Context switching 비용) I/O bound High 각 작업의 평균 대기 시간, 너무 큰 스레드 풀은 메모리 사용량을 고려해야함. int coreCount = Runtime.getRuntime().availableProcessors(); // int coreCount = taskExecutionProperties.</description><content:encoded><![CDATA[<h2 id="executorservice">ExecutorService</h2>
<ul>
<li>ExecutorService를 사용하면 간단하게 스레드풀을 생성해서 병렬처리를 할 수 있습니다.</li>
<li>Executors의 스태틱 메서드를 통해 간단하게 ExecutorService를 사용할 수 있습니다.
<ul>
<li>생성자를 이용해 커스텀하게 생성할 수도 있습니다.</li>
</ul>
</li>
<li>이상적인 풀 사이즈
<table>
<thead>
<tr>
<th>Task Type</th>
<th>Ideal pool size</th>
<th>Considerations</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU bound</td>
<td>CPU Core count</td>
<td>얼마나 많은 작업이 같은 CPU에서 동작하는지 (Context switching 비용)</td>
</tr>
<tr>
<td>I/O bound</td>
<td>High</td>
<td>각 작업의 평균 대기 시간, 너무 큰 스레드 풀은 메모리 사용량을 고려해야함.</td>
</tr>
</tbody>
</table>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> coreCount <span style="color:#f92672">=</span> Runtime<span style="color:#f92672">.</span><span style="color:#a6e22e">getRuntime</span><span style="color:#f92672">().</span><span style="color:#a6e22e">availableProcessors</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// int coreCount = taskExecutionProperties.getPool().getCoreSize();
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>ExecutorService service <span style="color:#f92672">=</span> Executors<span style="color:#f92672">.</span><span style="color:#a6e22e">newFixedThreadPool</span><span style="color:#f92672">(</span>coreCount<span style="color:#f92672">);</span>
</span></span></code></pre></div><h2 id="threadpoolexecutor-생성자-파라미터">ThreadPoolExecutor 생성자 파라미터</h2>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>corePoolSize</td>
<td>Integer</td>
<td>pool 최소 크기</td>
</tr>
<tr>
<td>maxPoolSize</td>
<td>Integer</td>
<td>pool 최대 크기</td>
</tr>
<tr>
<td>keepAliveTime + unit</td>
<td>Long</td>
<td>Thread를 idle 상태로 유지할 시간 (시간 초과 후에는 kill)</td>
</tr>
<tr>
<td>workQueue</td>
<td>BlockingQueue</td>
<td>작업을 저장해두는 큐</td>
</tr>
<tr>
<td>threadFactory</td>
<td>ThreadFactory</td>
<td>새로운 Thread를 생성하는 Factory</td>
</tr>
<tr>
<td>handler</td>
<td>RejectedExecutionHandler</td>
<td>작업 실행이 거부되었을 때 사용할 callback</td>
</tr>
</tbody>
</table>
<ul>
<li>core pool thread는 <code>allowCoreThreadTimeOut(boolean value)</code>를 <code>true</code>로 설정하지 않으면 Kill되지 않습니다.</li>
</ul>
<h2 id="executors-스태틱-메서드로-제공하는-풀의-종류">Executors 스태틱 메서드로 제공하는 풀의 종류</h2>
<ul>
<li>FixedThreadPool
<ul>
<li>고정된 수의 Thread를 가집니다.</li>
<li>Blocking queue에 작업을 쌓아두고 Thread가 작업을 하나씩 수행합니다.</li>
</ul>
</li>
<li>CachedThreadPool
<ul>
<li>고정된 수의 Thread가 없습니다.</li>
<li>하나의 작업만 저장할 수 있는 Syncronus queue에 작업을 저장해두고 사용 가능한 Thread에 할당합니다.</li>
<li>사용 가능한 Thread가 없으면 새로운 Thread를 생성합니다.</li>
</ul>
</li>
<li>ScheduledThreadPool
<ul>
<li>고정된 수의 Thread를 가집니다.</li>
<li>작업을 일정 시간 지연 후에 수행하거나 일정 시간 간격으로 실행시킵니다.</li>
<li><code>schedule(Runnable runnable, Long delay, TimeUnit timeunit)</code>
<ul>
<li>일정 시간 뒤에 작업을 한번 실행시킵니다.</li>
</ul>
</li>
<li><code>scheduleAtFixedRate(Runnable runnable, Long delay, Long period, TimeUnit timeunit)</code>
<ul>
<li>작업을 일정 시간 간격으로 반복적으로 실행시킵니다.</li>
</ul>
</li>
<li><code>scheduleAtFixedDelay(Runnable runnable, Long initDelay, Long period, TimeUnit timeunit)</code>
<ul>
<li>이전 작업 완료 시 작업을 일정 시간 간격으로 반복적으로 실행시킵니다.</li>
</ul>
</li>
</ul>
</li>
<li>SingleThreadExecutor
<ul>
<li>1개의 Thread를 가집니다.</li>
<li>Blocking queue에 작업을 쌓아두고 Thread가 작업을 하나씩 수행합니다.</li>
<li>Thread가 kill되면 다시 Thread생성됩니다.</li>
</ul>
</li>
</ul>
<h3 id="풀-종류-별-queue">풀 종류 별 Queue</h3>
<table>
<thead>
<tr>
<th>Pool</th>
<th>Queue Type</th>
<th>Why?</th>
</tr>
</thead>
<tbody>
<tr>
<td>FixedThreadPool</td>
<td>LinkedBlockingQueue</td>
<td>Unbounded queue에 모든 작업을 저장해두고, 한정된 Thread에서 작업을 순서대로 처리한다.</td>
</tr>
<tr>
<td>SingleThreadExecutor</td>
<td>LinkedBlockingQueue</td>
<td>Unbounded queue에 모든 작업을 저장해두고, 한정된 Thread에서 작업을 순서대로 처리한다.</td>
</tr>
<tr>
<td>CachedThreadPool</td>
<td>SynchronousQueue</td>
<td>Thread가 Unbounded이므로, 작업을 queue에 저장해두지 않아도 된다. 단 하나의 slot만 가진다.</td>
</tr>
<tr>
<td>ScheduledThreadPool</td>
<td>DelayWorkQueue</td>
<td>시간 딜레이를 가지는 특별한 queue.</td>
</tr>
</tbody>
</table>
<h2 id="작업이-거부되었을-때-정책">작업이 거부되었을 때 정책</h2>
<table>
<thead>
<tr>
<th>Policy</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>AbortPolicy</td>
<td>제출된 새로운 작업이 RejectedExecutionException을 발생시킨다. 정책을 등록하지 않으면 기본으로 사용된다.</td>
</tr>
<tr>
<td>DiscardPolicy</td>
<td>새로운 작업이 삭제된다.</td>
</tr>
<tr>
<td>DiscardOldestPolicy</td>
<td>가장 오래된 작업이 삭제되고, 새로운 작업이 queue에 저장된다.</td>
</tr>
<tr>
<td>CallerRunsPolicy</td>
<td>작업을 요청한 스레드에서 작업이 실행된다. 작업을 요청한 스레드에서 제출한 작업이 실행되는 동안 새로운 작업을 생성하지 못할 수 있다.</td>
</tr>
</tbody>
</table>
<ul>
<li>정책은 아래와 같은 생성자 방식으로 사용할 수 있습니다.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>ExecutorService executorService <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ThreadPoolExecutor<span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">10</span><span style="color:#f92672">,</span>                             <span style="color:#75715e">// corePoolSize
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#ae81ff">100</span><span style="color:#f92672">,</span>                            <span style="color:#75715e">// maxPoolSize
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#ae81ff">120</span><span style="color:#f92672">,</span> TimeUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">SECONDS</span><span style="color:#f92672">,</span>          <span style="color:#75715e">// keepAliveTime
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">new</span> ArrayBlockingQueue<span style="color:#f92672">&lt;&gt;(</span><span style="color:#ae81ff">300</span><span style="color:#f92672">),</span>  <span style="color:#75715e">// Queue
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">new</span> DiscardPolicy<span style="color:#f92672">()</span>             <span style="color:#75715e">// Policy
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">);</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="rejectedexecutionexception-핸들링">RejectedExecutionException 핸들링</h3>
<p>&lt;방법 1&gt;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>ExecutorService executorService <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ThreadPoolExecutor<span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">10</span><span style="color:#f92672">,</span>                             <span style="color:#75715e">// corePoolSize
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#ae81ff">100</span><span style="color:#f92672">,</span>                            <span style="color:#75715e">// maxPoolSize
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#ae81ff">120</span><span style="color:#f92672">,</span> TimeUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">SECONDS</span><span style="color:#f92672">,</span>          <span style="color:#75715e">// keepAliveTime
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">new</span> ArrayBlockingQueue<span style="color:#f92672">&lt;&gt;(</span><span style="color:#ae81ff">300</span><span style="color:#f92672">)</span>   <span style="color:#75715e">// Queue
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    executorService<span style="color:#f92672">.</span><span style="color:#a6e22e">execute</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Task<span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>RejectedExecutionException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span><span style="color:#a6e22e">error</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;task rejected&#34;</span><span style="color:#f92672">,</span> e<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>&lt;방법2&gt;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>ExecutorService executorService <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ThreadPoolExecutor<span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">10</span><span style="color:#f92672">,</span>                             <span style="color:#75715e">// corePoolSize
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#ae81ff">100</span><span style="color:#f92672">,</span>                            <span style="color:#75715e">// maxPoolSize
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#ae81ff">120</span><span style="color:#f92672">,</span> TimeUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">SECONDS</span><span style="color:#f92672">,</span>          <span style="color:#75715e">// keepAliveTime
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">new</span> ArrayBlockingQueue<span style="color:#f92672">&lt;&gt;(</span><span style="color:#ae81ff">300</span><span style="color:#f92672">),</span>  <span style="color:#75715e">// Queue
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">new</span> CustomRejectionHandler<span style="color:#f92672">()</span>    <span style="color:#75715e">// 커스텀 핸들러를 Policy로 등록한다.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>executorService<span style="color:#f92672">.</span><span style="color:#a6e22e">execute</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Task<span style="color:#f92672">());</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CustomRejectionHandler</span> <span style="color:#66d9ef">implements</span> RejectedExecutionHandler <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Overrid</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">rejectedExecution</span><span style="color:#f92672">(</span>Runnable runnble<span style="color:#f92672">,</span> ThreadPoolExecutor executor<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// logging, operations to perform on rejection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="lifecycle-메서드">LifeCycle 메서드</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>ExecutorService executorService <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ThreadPoolExecutor<span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">10</span><span style="color:#f92672">,</span>                             <span style="color:#75715e">// corePoolSize
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#ae81ff">100</span><span style="color:#f92672">,</span>                            <span style="color:#75715e">// maxPoolSize
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#ae81ff">120</span><span style="color:#f92672">,</span> TimeUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">SECONDS</span><span style="color:#f92672">,</span>          <span style="color:#75715e">// keepAliveTime
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">new</span> ArrayBlockingQueue<span style="color:#f92672">&lt;&gt;(</span><span style="color:#ae81ff">300</span><span style="color:#f92672">)</span>   <span style="color:#75715e">// Queue
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>executorService<span style="color:#f92672">.</span><span style="color:#a6e22e">execute</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Task<span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// init shutdown
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>executorService<span style="color:#f92672">.</span><span style="color:#a6e22e">shutdown</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// throw RejectionExecutionException
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>executorService<span style="color:#f92672">.</span><span style="color:#a6e22e">execute</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Task<span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// return true, since shutdown has begun
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>executorService<span style="color:#f92672">.</span><span style="color:#a6e22e">isShutdown</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// return true if all tasks are completed
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>executorService<span style="color:#f92672">.</span><span style="color:#a6e22e">isTerminated</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// block until all tasks are completed or timeouted
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>executorService<span style="color:#f92672">.</span><span style="color:#a6e22e">awaitTermination</span><span style="color:#f92672">(</span><span style="color:#ae81ff">10</span><span style="color:#f92672">,</span> TimeUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">SECOND</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// init shutdown and return all queued tasks
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>List<span style="color:#f92672">&lt;</span>Runnable<span style="color:#f92672">&gt;</span> runnables <span style="color:#f92672">=</span> executorService<span style="color:#f92672">.</span><span style="color:#a6e22e">shutdownNow</span><span style="color:#f92672">();</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>사소한 Thread-safe Tips</title><link>https://jo-minjun.github.io/notes/thread-safe-tips/</link><pubDate>Thu, 13 Jul 2023 18:40:44 +0900</pubDate><guid>https://jo-minjun.github.io/notes/thread-safe-tips/</guid><description>가능하다면 로컬 변수를 사용합니다. 프레임워크에 위임합니다. e.g. RequestContextHolder ConcurrentHashMap 같은 요소를 ThreadLocal 변수로 변경할 수 있는지 검토합니다. public class UserContextHolder { public static ThreadLocal&amp;lt;User&amp;gt; holder = new ThreadLocal(); } class HoldingService { public void holdUser() { // Set user for this thread User user = getUser(); UserContextHolder.holder.set(user); } } class SomeService { public void getUser() { // Get user for this thread User user = UserContextHolder.holder.get(); // Remove user; user no longer required UserContextHolder.</description><content:encoded><![CDATA[<ol>
<li>가능하다면 로컬 변수를 사용합니다.</li>
<li>프레임워크에 위임합니다.
<ul>
<li>e.g. <code>RequestContextHolder</code></li>
</ul>
</li>
<li><code>ConcurrentHashMap</code> 같은 요소를 <code>ThreadLocal</code> 변수로 변경할 수 있는지 검토합니다.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserContextHolder</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ThreadLocal<span style="color:#f92672">&lt;</span>User<span style="color:#f92672">&gt;</span> holder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ThreadLocal<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HoldingService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">holdUser</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Set user for this thread
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    User user <span style="color:#f92672">=</span> getUser<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    UserContextHolder<span style="color:#f92672">.</span><span style="color:#a6e22e">holder</span><span style="color:#f92672">.</span><span style="color:#a6e22e">set</span><span style="color:#f92672">(</span>user<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SomeService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">getUser</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Get user for this thread
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    User user <span style="color:#f92672">=</span> UserContextHolder<span style="color:#f92672">.</span><span style="color:#a6e22e">holder</span><span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Remove user; user no longer required
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    UserContextHolder<span style="color:#f92672">.</span><span style="color:#a6e22e">holder</span><span style="color:#f92672">.</span><span style="color:#a6e22e">remove</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>12 factor app (15 factor app)</title><link>https://jo-minjun.github.io/notes/12-factor-app/</link><pubDate>Fri, 24 Feb 2023 00:02:51 +0900</pubDate><guid>https://jo-minjun.github.io/notes/12-factor-app/</guid><description>Introduction 12 factor app은 서비스형 소프트웨어를 구성하기 위한 방법론입니다.
개발 언어/프레임워크에 상관없는 이식성과 플랫폼 호환성 향상을 위한 디자인 원칙입니다. 애플리케이션의 수평적 확장이 용이하도록 합니다. 애플리케이션 확장 가능성 CI/CD에 용이성 플랫폼간 이식성 기본적인 기대치, 정책 설정 1. Codebase 형상관리 시스템에서 하나의 코드베이스를 관리하면서, 다수에 배포한다. 하나의 코드베이스에 여러개의 애플리케이션 코드가 있다면 12 factor app 위반입니다.
코드베이스는 모든 배포에 사용되지만 각 배포는 다른 버전이 사용될 수 있습니다.
2. Dependencies 의존성을 명시적으로 선언하고 분리한다.</description><content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>12 factor app은 서비스형 소프트웨어를 구성하기 위한 방법론입니다.</p>
<ul>
<li>개발 언어/프레임워크에 상관없는 이식성과 플랫폼 호환성 향상을 위한 디자인 원칙입니다.</li>
<li>애플리케이션의 수평적 확장이 용이하도록 합니다.</li>
</ul>
<blockquote>
<ul>
<li>애플리케이션 확장 가능성</li>
<li>CI/CD에 용이성</li>
<li>플랫폼간 이식성</li>
<li>기본적인 기대치, 정책 설정</li>
</ul>
</blockquote>
<h2 id="1-codebase">1. Codebase</h2>
<h3 id="형상관리-시스템에서-하나의-코드베이스를-관리하면서-다수에-배포한다">형상관리 시스템에서 하나의 코드베이스를 관리하면서, 다수에 배포한다.</h3>
<p>하나의 코드베이스에 여러개의 애플리케이션 코드가 있다면 12 factor app 위반입니다.</p>
<p>코드베이스는 모든 배포에 사용되지만 각 배포는 다른 버전이 사용될 수 있습니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/codebase.png" alt="codebase"  />
</p>
<h2 id="2-dependencies">2. Dependencies</h2>
<h3 id="의존성을-명시적으로-선언하고-분리한다">의존성을 명시적으로 선언하고 분리한다.</h3>
<p>의존성은 명시적으로 선언되어, 신규 개발자 또는 시스템 설정을 편리하게 해야합니다.</p>
<p>대부분의 프로그래밍 언어는 패키징 시스템을 제공하기 때문에 새로 설정을 해야할 때는 언어와 패키지 매니저만 설치하면 됩니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/dependencies.png" alt="dependencies"  />
</p>
<h2 id="3-config">3. Config</h2>
<h3 id="설정값을-환경에-저장한다">설정값을 환경에 저장한다.</h3>
<p>애플리케이션 설정값은 배포 환경에 따라 달라지는 값들입니다.</p>
<ul>
<li>데이터베이스 또는 Backing 서비스를 처리하는 리소스</li>
<li>Amazon S3 또는 트위터와 같은 외부 서비스에 대한 인증 정보</li>
<li>배포 환경 호스트 이름과 같은 값</li>
</ul>
<p><img loading="lazy" src="/images/notes/12-factor-app/config.png" alt="config"  />
</p>
<h2 id="4-backing-services">4. Backing services</h2>
<h3 id="backing-service">Backing service</h3>
<p>Backing 서비스는 데이터베이스와, 메시징, 메일 서비스 등 통해 연결된 모든 서비스입니다.</p>
<p>12 factor app은 Backing 서비스를 모두 리소스로 취급하고, 설정에서 값을 읽어서 처리하여 느슨하게 연결합니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/backing-service.png" alt="backing-service"  />
</p>
<h2 id="5-build-release-run">5. Build, release, run</h2>
<h3 id="빌드와-실행-단계를-엄격하게-구분한다">빌드와 실행 단계를 엄격하게 구분한다.</h3>
<p>코드베이스는 3단계를 거쳐 배포되고, 엄격하게 구분되어야 합니다.</p>
<ol>
<li>Build: 지정된 코드 버전을 사용하여 의존성을 가져오고 컴파일합니다.</li>
<li>Release: 컴파일된 결과물과 현재 배포 환경의 설정을 연결합니다. Release 단계의 결과물은 즉시 실행될 수 있습니다.</li>
<li>Run: 애플리케이션을 실행합니다.</li>
</ol>
<p>코드 변경은 반드시 빌드 단계에서만 이루어져야만 하며 만들어진 Release 결과는 변경될 수 없고, 이전 버전으로 롤백이 가능해야합니다.</p>
<h2 id="6-processes">6. Processes</h2>
<h3 id="애플리케이션을-하나-이상의-stateless-프로세스로-실행한다">애플리케이션을 하나 이상의 Stateless 프로세스로 실행한다.</h3>
<p>애플리케이션은 실행 환경에서 하나 이상의 프로세스로 실행됩니다.</p>
<p>상태는 데이터베이스와 같은 상태 저장 서비스에 저장해야 하며, 애플리케이션은 Stateless하게 유지해야 합니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/processes.png" alt="processes"  />
</p>
<h2 id="7-port-binding">7. Port binding</h2>
<h3 id="포트-바인딩을-통해-서비스-제공을-한다">포트 바인딩을 통해 서비스 제공을 한다.</h3>
<p>애플리케이션은 포트를 바인딩하여 서비스를 제공해야 합니다.</p>
<p>포트를 통해 서비스를 제공함으로써 다른 애플리케이션의 Backing 서비스가 될 수 있습니다.</p>
<h2 id="8-concurrency">8. Concurrency</h2>
<h3 id="프로세스-모델을-통해-수평적-확장을-한다">프로세스 모델을 통해 수평적 확장을 한다.</h3>
<p>애플리케이션은 리소스 추가를 통한 수직 확장 뿐만 아니라, 수를 늘리는 수평적 확장이 가능해야 합니다.</p>
<ol start="6">
<li>Processes를 준수함으로써 확장하거나 축소할 수 있습니다.</li>
</ol>
<h2 id="9-disposability">9. Disposability</h2>
<h3 id="빠른-시작과-그레이스풀-셧다운으로-안정성을-최대화한다">빠른 시작과 그레이스풀 셧다운으로 안정성을 최대화한다.</h3>
<p>배포와 수평 확장시 빠른 애플리케이션 구동을 위해 필요합니다.</p>
<p>종료 시그널을 받은 애플리케이션은 새로운 요청을 받지 않고, 기존 요청을 처리한 후 안정적으로 종료되어야 합니다.</p>
<h2 id="10-devprod-parity">10. Dev/prod parity</h2>
<h3 id="개발-스테이징-상용-환경을-최대한-비슷하게-유지한다">개발, 스테이징, 상용 환경을 최대한 비슷하게 유지한다.</h3>
<p>Local에서는 H2 database를 사용하고 상용에서는 MySQL을 사용하는 것과 같은 차이를 줄이는 것입니다.</p>
<p>12 factor app은 개발과 상용 환경 사이의 차이를 줄여 지속적인 배포가 가능하도록 해야합니다.</p>
<h2 id="11-logs">11. Logs</h2>
<h3 id="로그를-이벤트-스트림으로-처리한다">로그를 이벤트 스트림으로 처리한다.</h3>
<p>애플리케이션은 로그에 관여하면 안되며, 단순히 버퍼링없이 출력할 뿐입니다.</p>
<p>애플리케이션은 언제든지 생성되고 삭제될 수 있습니다. 따라서 이벤트는 별도 저장소에 보관되는 것이 좋습니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/logs.png" alt="logs"  />
</p>
<h2 id="12-admin-processes">12. Admin processes</h2>
<h3 id="어드민관리-작업을-일회성-프로세스로-실행해야-한다">어드민/관리 작업을 일회성 프로세스로 실행해야 한다.</h3>
<p>개발자는 종종 일회성으로 애플리케이션 관리 작업을 수행해야 하며, 작업을 스크립트화하여 한번에 실행할 수 있도록 해야합니다.</p>
<ul>
<li>데이터베이스 마이그레이션</li>
<li>일회성 스크립트 실행</li>
</ul>
<p>관리 스크립트는 애플리케이션과 같은 코드베이스에서 같은 설정 값을 사용해야 합니다.</p>
<hr>
<blockquote>
<p>케빈 허프만이 “Beyond the 12 factor app”을 통해 MSA 환경에 적합한 3가지 요소를 제시했다.</p>
</blockquote>
<h2 id="13-api-first">13. API first</h2>
<h3 id="api-스펙-정의를-우선으로-한다">API 스펙 정의를 우선으로 한다.</h3>
<p>API 스펙을 먼저 정의하여 어떤 스키마로 통신할지 결정해야 합니다.</p>
<p>API first를 통해 클라이언트와 서버가 동시에 작업을 진행할 수 있습니다.</p>
<h2 id="14-telemetry">14. Telemetry</h2>
<h3 id="애플리케이션-및-리소스를-모니터링한다">애플리케이션 및 리소스를 모니터링한다.</h3>
<p>애플리케이션 및 CPU, RAM등 리소스를 모니터링하여 성능, 이벤트 및 헬스 체크 등을 확인할 수 있습니다.</p>
<p>서비스 관리 및 경고 알람 트리거 설정에 도움을 줍니다.</p>
<h2 id="15-security">15. Security</h2>
<h3 id="보안-정책이-적절한지-확인한다">보안 정책이 적절한지 확인한다.</h3>
<p>API, DB 등 보안 정책이 적절한지 확인해야 합니다.</p>
<p>API는 OAuth 등으로 보호되어야 하며 HTTPS를 이용해서 노출시켜야 합니다.</p>
]]></content:encoded></item><item><title>Shell Script</title><link>https://jo-minjun.github.io/notes/shell-script/</link><pubDate>Mon, 09 Jan 2023 23:30:12 +0900</pubDate><guid>https://jo-minjun.github.io/notes/shell-script/</guid><description>Shell Script 쉘 스크립트로 만든 UP-DOWN 게임 Shell이란 운영체제에서 커널과 사용자 사이를 이어주는 역할을 하는 명령어 해석기이다.
Shell은 bash sh csh zsh등이 있다.
Shell Script란 운영체제의 Shell을 이용해서 Shell 명령어들을 순차적으로 실행시켜주는 스크립트이다.
Shell Script를 사용하기 위해서는 다음과 같이 시작해야 한다.
#!/bin/bash #!/usr/bin/env bash #!/usr/bin/env python3 위와 같이 #!으로 시작하여 Shell의 경로를 선언해준다. 이를 쉬뱅이라 한다. 쉬뱅은 어느 인터프리터가 스크립트의 명령어를 해석할 지 가리킨다. 변수 변수 number=1 string=&amp;#34;string&amp;#34; echo &amp;#34;$number&amp;#34; echo &amp;#34;$string&amp;#34; echo &amp;#34;${number}&amp;#34; echo &amp;#34;${string}&amp;#34; 변수는 위와 같이 공백을 사용하지 않고 선언한다.</description><content:encoded><![CDATA[<h2 id="shell-script">Shell Script</h2>
<ul>
<li><a href="https://github.com/jo-minjun/shell-script-up-down-game">쉘 스크립트로 만든 UP-DOWN 게임</a></li>
</ul>
<h3 id="shell이란">Shell이란</h3>
<p>운영체제에서 커널과 사용자 사이를 이어주는 역할을 하는 명령어 해석기이다.</p>
<p>Shell은 <code>bash</code> <code>sh</code> <code>csh</code> <code>zsh</code>등이 있다.</p>
<h3 id="shell-script란">Shell Script란</h3>
<p>운영체제의 Shell을 이용해서 Shell 명령어들을 순차적으로 실행시켜주는 스크립트이다.</p>
<p>Shell Script를 사용하기 위해서는 다음과 같이 시작해야 한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span></code></pre></div><ul>
<li>위와 같이 <code>#!</code>으로 시작하여 Shell의 경로를 선언해준다. 이를 <strong>쉬뱅</strong>이라 한다.</li>
<li><strong>쉬뱅</strong>은 어느 인터프리터가 스크립트의 명령어를 해석할 지 가리킨다.</li>
</ul>
<h2 id="변수">변수</h2>
<h3 id="변수-1">변수</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>number<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>string<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;string&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span>$number<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span>$string<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>number<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>string<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><ul>
<li>변수는 위와 같이 공백을 사용하지 않고 선언한다.</li>
<li>변수명은 대소문자를 구분한다.</li>
<li>변수명은 숫자를 포함할 수 있으나, 숫자로 시작할 수 없다.</li>
<li>변수에 숫자를 대입해도 문자열로 취급된다.</li>
<li>변수는 <code>$변수명</code> 또는 <code>${변수명}</code>으로 사용할 수 있다.</li>
</ul>
<h3 id="배열">배열</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>array<span style="color:#f92672">=(</span><span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#e6db74">&#34;c&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>array<span style="color:#f92672">+=(</span><span style="color:#e6db74">&#34;d&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>array[0]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>array[*]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${#</span>array[*]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><ul>
<li>배열은 각 원소를 공백으로 구분한다.</li>
<li>원소를 추가할 경우 <code>+=</code>으로 한다.</li>
<li><code>변수명[index]</code>를 사용해서 특정 인덱스(0 ~ n)의 원소에 접근할 수 있고, <code>변수명[*]</code>으로 모든 원소에 접근할 수 있다.</li>
<li><code>#변수명[*]</code>으로 원소의 수를 확인할 수 있다.</li>
</ul>
<h3 id="미리-정의된-변수">미리 정의된 변수</h3>
<table>
<thead>
<tr>
<th>변수</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>$0</td>
<td>쉘 스크립트의 파일명</td>
</tr>
<tr>
<td>$#</td>
<td>쉘 스크립트에 전달된 인자의 수</td>
</tr>
<tr>
<td>$$</td>
<td>쉘 스크립트의 PID</td>
</tr>
<tr>
<td>$1 ~ $n</td>
<td>쉘 스크립트에 전달된 인자 값</td>
</tr>
<tr>
<td>$*</td>
<td>쉘 스크립트에 전달된 인자들의 문자열</td>
</tr>
</tbody>
</table>
<h2 id="비교-연산자">비교 연산자</h2>
<h3 id="변수-비교-연산자">변수 비교 연산자</h3>
<table>
<thead>
<tr>
<th>연산자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>-z ${변수A}</td>
<td>변수A의 문자열 길이가 0이면 참</td>
</tr>
<tr>
<td>-n ${변수A}</td>
<td>변수A의 문자열 길이가 0이 아니면 참</td>
</tr>
<tr>
<td>${변수A} -eq ${변수B}</td>
<td>변수A와 변수B의 값이 같으면 참</td>
</tr>
<tr>
<td>${변수A} -ne ${변수B}</td>
<td>변수A와 변수B의 값이 다르면 참</td>
</tr>
<tr>
<td>${변수A} -gt ${변수B}</td>
<td>변수A의 값이 변수B의 값보다 크면 참</td>
</tr>
<tr>
<td>${변수A} -ge ${변수B}</td>
<td>변수A의 값이 변수B의 값보다 크거나 같으면 참</td>
</tr>
<tr>
<td>${변수A} -lt ${변수B}</td>
<td>변수A의 값이 변수B의 값보다 작으면 참</td>
</tr>
<tr>
<td>${변수A} -le ${변수B}</td>
<td>변수A의 값이 변수B의 값보다 작거나 같으면 참</td>
</tr>
<tr>
<td>연산1 -a 연산2</td>
<td>연산1과 연산2가 모두 참이면 참</td>
</tr>
<tr>
<td>연산1 -o 연산2</td>
<td>연산1과 연산2중 하나라도 참이면 참</td>
</tr>
</tbody>
</table>
<h3 id="파일디렉터리-비교-연산자">파일/디렉터리 비교 연산자</h3>
<table>
<thead>
<tr>
<th>연산자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d ${A}</td>
<td>A가 디렉터리면 참</td>
</tr>
<tr>
<td>-e ${A}</td>
<td>A파일이 존재하면 참</td>
</tr>
<tr>
<td>-L ${A}</td>
<td>A파일이 심볼릭 링크면 참</td>
</tr>
<tr>
<td>-r ${A}</td>
<td>A파일에 읽기 권한이 존재하면 참</td>
</tr>
<tr>
<td>-w ${A}</td>
<td>A파일에 쓰기 권한이 존재하면 참</td>
</tr>
<tr>
<td>-x ${A}</td>
<td>A파일에 실행 권한이 존재하면 참</td>
</tr>
<tr>
<td>-s ${A}</td>
<td>A파일의 크기가 0보다 크면 참</td>
</tr>
<tr>
<td>-f ${A}</td>
<td>A파일이 존재하면 참</td>
</tr>
<tr>
<td>${A} -nt ${B}</td>
<td>A파일이 B파일보다 최신 파일이면 참</td>
</tr>
<tr>
<td>${A} -ot ${B}</td>
<td>A파일이 B파일보다 이전 파일이면 참</td>
</tr>
<tr>
<td>${A} -ef ${B}</td>
<td>A파일이 B파일과 같은 파일이면 참</td>
</tr>
</tbody>
</table>
<ul>
<li>주로 <code>-d</code> <code>-f</code> 를 자주 사용한다.</li>
</ul>
<h2 id="제어문">제어문</h2>
<h3 id="분기문">분기문</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> 비교 연산자 <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> 비교 연산자 <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><ul>
<li><code>if</code>로 시작하고 <code>fi</code>로 끝난다.</li>
<li>분기문에서 비교 연산은 <code>[ 비교 연산자 ]; then</code> 구분을 사용한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">case</span> target in
</span></span><span style="display:flex;"><span>	값1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span>	값2|값3<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span>	*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">esac</span>
</span></span></code></pre></div><ul>
<li><code>case</code>로 시작하고 <code>esac</code>로 끝난다.</li>
<li><code>;;</code> 를 이용해서 break를 할 수 있다.</li>
</ul>
<h3 id="반복문">반복문</h3>
<p>반복문은 공통적으로 <code>do</code>로 시작하고 <code>done</code>으로 끝난다.</p>
<p><code>continue</code>와 <code>break</code>를 이용해서 반복문을 제어할 수 있다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>비교 연산자<span style="color:#f92672">)</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i in <span style="color:#e6db74">${</span>array[*]<span style="color:#e6db74">}</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><ul>
<li>배열의 각 요소에 접근한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>0..10<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><ul>
<li>0 ~ 10 범위의 값을 접근한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#f92672">((</span> i <span style="color:#f92672">=</span> 0; i &lt; 10; i++<span style="color:#f92672">))</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><ul>
<li>0 ~ 10 범위의 값을 접근한다.</li>
</ul>
]]></content:encoded></item><item><title>DDD 핵심 정리</title><link>https://jo-minjun.github.io/notes/ddd-study/</link><pubDate>Fri, 30 Dec 2022 17:10:50 +0900</pubDate><guid>https://jo-minjun.github.io/notes/ddd-study/</guid><description>0. 참고 도메인 주도 개발 시작하기
도메인 주도 개발 시작하기 - YES24 핵사고날 아키텍처
Hexagonal Architecture with Java and Spring
https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/
예제 프로젝트
https://github.com/jo-minjun/order-delivery-project 1. 도메인이란 무엇일까? wikipedia: Domain (software engineering) A domain is the targeted subject area of a computer program. It is a term used in software engineering. Formally it represents the target subject of a specific programming project, whether narrowly or broadly defined.
소프트웨어 엔지니어링에서 사용되는 용어 컴퓨터 프로그램의 대상이 되는 영역 Example 소프트웨어 프로젝트의 목표가 특정 병원을 위한 프로그램을 만드는 경우 범위를 확장하여 모든 병원을 대상으로 하는 프로그램을 만드는 경우 상점과 기사를 이어주고 고객에게 물품을 전달해주는 라스트마일 서비스 2.</description><content:encoded><![CDATA[<h2 id="0-참고">0. 참고</h2>
<ul>
<li>
<p>도메인 주도 개발 시작하기</p>
<ul>
<li><a href="http://www.yes24.com/Product/Goods/108431347">도메인 주도 개발 시작하기 - YES24</a></li>
</ul>
</li>
<li>
<p>핵사고날 아키텍처</p>
<ul>
<li>
<p><a href="https://reflectoring.io/spring-hexagonal/">Hexagonal Architecture with Java and Spring</a></p>
</li>
<li>
<p><a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/">https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/</a></p>
</li>
</ul>
</li>
<li>
<p>예제 프로젝트</p>
<ul>
<li><a href="https://github.com/jo-minjun/order-delivery-project">https://github.com/jo-minjun/order-delivery-project</a></li>
</ul>
</li>
</ul>
<h2 id="1-도메인이란-무엇일까">1. 도메인이란 무엇일까?</h2>
<h3 id="wikipedia-domain-software-engineering">wikipedia: Domain (software engineering)</h3>
<blockquote>
<p>A domain is the targeted subject area of a <a href="https://en.wikipedia.org/wiki/Computer_program">computer program</a>. It is a term used in <a href="https://en.wikipedia.org/wiki/Software_engineering">software engineering</a>.
Formally it represents the target subject of a specific programming project, whether narrowly or broadly defined.</p>
</blockquote>
<ol>
<li>소프트웨어 엔지니어링에서 사용되는 용어</li>
<li>컴퓨터 프로그램의 대상이 되는 영역</li>
</ol>
<h3 id="example">Example</h3>
<ul>
<li>소프트웨어 프로젝트의 목표가 특정 병원을 위한 프로그램을 만드는 경우</li>
<li>범위를 확장하여 모든 병원을 대상으로 하는 프로그램을 만드는 경우</li>
<li>상점과 기사를 이어주고 고객에게 물품을 전달해주는 라스트마일 서비스</li>
</ul>
<h2 id="2-ddd란-무엇일까">2. DDD란 무엇일까?</h2>
<ul>
<li>Domain Driven Design이다.</li>
<li>프로그램을 도메인별로 나누어 설계하는 방법</li>
<li>모듈(도메인)간 응집도는 높이고, 결합도는 낮춰 준다.</li>
<li>DDD의 목표를 달성하기 위해 전략적 설계 패턴과 전술적 설계 패턴을 사용한다.</li>
</ul>
<h2 id="3-왜-ddd를-할까">3. 왜 DDD를 할까?</h2>
<ul>
<li>복잡도 관리
<ul>
<li>시간 경과에 따라 코드 라인이 늘어나고, 변경 비용이 증가한다.
<img loading="lazy" src="/images/notes/DDD-study/1.png" alt="1"  />

<a href="https://dreamix.eu/blog/java/why-good-clean-software-architecture-matters">https://dreamix.eu/blog/java/why-good-clean-software-architecture-matters</a></li>
</ul>
</li>
<li>개발자는 특정 도메인의 전문가보다 도메인에 대한 전문성이 떨어진다.
<ul>
<li>공인 중개사와 개발자</li>
<li>변호사와 개발자</li>
<li>인사팀과 개발자</li>
<li>…</li>
</ul>
</li>
<li>전문가와 기획자, 개발자의 언어가 다르다.
<ul>
<li>도저히 이해할 수 없는 말들…</li>
<li>네트워크 광전송 장비: OTN, PTN, ROADM, SERVICE, TUNNEL…</li>
</ul>
</li>
</ul>
<p>→ 최소 문서를 읽거나 대화할 때 서로가 하는 말을 이해하고 context를 맞춰 나가야 한다.</p>
<h2 id="4-전략적-설계">4. 전략적 설계</h2>
<h3 id="유비쿼터스-언어">유비쿼터스 언어</h3>
<ul>
<li>도메인 전문가, 기획자, 개발자 등 구성원들이 서로 다른 용어를 사용하면, 의사소통에 불편함이 있다.
<ul>
<li>지번주소 vs 구주소</li>
</ul>
</li>
</ul>
<p>→ <strong>유비쿼터스 언어</strong>를 사용해야 한다.</p>
<ul>
<li>구성원들 모두가 <strong>보편적으로 사용하는 언어</strong></li>
<li>구성원들의 공통된 언어를 만들고 대화, 문서, 코드, 테스트 <strong>모든 곳에서 같은 용어</strong>를 사용한다.</li>
</ul>
<h3 id="도메인-모델과-경계">도메인 모델과 경계</h3>
<ul>
<li>다시 도메인에 대해 짚어보자면
<ul>
<li>소프트웨어 프로젝트에서 대상이 되고, 해결해야 할 영역</li>
<li>온라인 쇼핑몰을 개발하는 프로젝트</li>
</ul>
</li>
<li>도메인은 다시 하위 도메인으로 나뉘어 진다.
<ul>
<li>회원, 혜택(쿠폰), 주문, 카탈로그, 배송, 결제…</li>
</ul>
</li>
<li><strong>도메인 모델</strong>
<ul>
<li>특정 도메인을 개념적으로 표현한 것</li>
<li>도메인에 대한 이해도에 따라 도메인 모델도 변경된다.
<img loading="lazy" src="/images/notes/DDD-study/2.png" alt="2"  />
</li>
</ul>
</li>
<li>위와 같은 서브 도메인을 하나의 도메인으로 표현하기는 불가능에 가깝다.</li>
<li>서브 도메인마다 같은 대상이라도 지칭하는 용어가 다를 수 있다.</li>
</ul>
<p>→ Problem Space가 된다.</p>
<ul>
<li>상품
<ul>
<li>카탈로그의 상품: 이미지, 상품명, 가격…</li>
<li>배송의 상품: 무게, 수량…</li>
</ul>
</li>
<li>회원
<ul>
<li>회원 도메인의 회원: 회원</li>
<li>주문 도메인의 회원: 주문자</li>
<li>배송 도메인의 회원: 받는 사람</li>
</ul>
</li>
<li>즉, 모델은 특정한 컨텍스트 하에서 완전한 의미를 갖는다.</li>
</ul>
<p>→ 각 서브 도메인마다 <strong>명시적으로 구분되는 경계</strong>를 가져서 섞이지 않도록 해야 한다.</p>
<h3 id="바운디드-컨텍스트">바운디드 컨텍스트</h3>
<ul>
<li>각 도메인 영역의 경계를 결정하는 <strong>명시적인 구분</strong></li>
<li>각각의 도메인이 가진 모델을 정확하게 표현하기 위함이다.</li>
</ul>
<p>→ 즉 문제를 해결하기 위한 공간, Solution Space이다.</p>
<ul>
<li>바운디드 컨텍스트를 구분하는 조건
<ul>
<li>같은 용어, 다른 의미
<ul>
<li><strong>계정</strong>을 의미하는 Account</li>
<li><strong>계좌</strong>를 의미하는 Account
→ 이런 경우 두 가지 의미를 하나의 도메인 모델에 포함해서는 안된다.</li>
</ul>
</li>
<li>같은 개념, 다른 용도
<ul>
<li>회원 서비스의 <strong>맴버</strong></li>
<li>주문 서비스의 <strong>맴버</strong>
→ 맴버는 서로 다른 도메인에 집중하고 있고, 발전의 방향성도 다르다.</li>
</ul>
</li>
<li>팀 조직 구조
<ul>
<li>A팀의 관심사는 주문, B팀의 관심사는 결제.
<ul>
<li>하나의 주문 도메인에서도 관심사에 따라 컨텍스트가 달라진다.</li>
</ul>
</li>
<li>한 팀이 하나의 시스템에서 온라인 쇼핑을 서비스한다.
<ul>
<li>서브 도메인은 회원, 카탈로그, 재고, 구매, 결제 등이 있다.</li>
<li>상품 컨텍스트에서 재고와 카탈로그를 구현한다.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>이상적으로는 바운디드 컨텍스트와 하위 도메인이 1대1로 대응되는 것이 좋다.</li>
<li>하지만 팀 상황이나 유비쿼터스 언어가 명확하게 정의되지 않아 1대1로 대응되지 않는 경우도 있다.
<img loading="lazy" src="/images/notes/DDD-study/3.png" alt="3"  />
</li>
</ul>
<h3 id="바운디드-컨텍스트-간-관계">바운디드 컨텍스트 간 관계</h3>
<ul>
<li>바운디드 컨텍스트는 어떻게든 연결되기 때문에 다양한 방식으로 관계를 형성한다.
<ul>
<li>고객/공급자</li>
<li>공유 커널</li>
<li>독립 방식</li>
</ul>
</li>
<li><strong>고객/공급자</strong>
<ul>
<li>가장 흔한 관계이다.</li>
<li>한쪽에서 **API를 제공(상류)**하고 다른쪽에서 **API를 호출(하류)**한다.
<img loading="lazy" src="/images/notes/DDD-study/4.png" alt="카탈로그 바운디드 컨텍스트는 추천 바운디드 컨텍스트에 의존한다."  />

카탈로그 바운디드 컨텍스트는 추천 바운디드 컨텍스트에 의존한다.</li>
</ul>
</li>
<li><strong>공유 커널</strong>
<ul>
<li>여러 바운디드 컨텍스트가 <strong>같은 모델을 공유</strong>하는 관계이다.</li>
<li>중복을 줄일 수 있지만 공유 모델을 사용하는 바운디드 컨텍스트가 서로 영향을 받을 수 있다.</li>
</ul>
</li>
<li><strong>독립 방식</strong>
<ul>
<li>여러 바운디드 컨텍스트가 <strong>외부에 의해 관계</strong>를 맺는다.
<ul>
<li>수동으로 두 바운디드 컨텍스트 간 통합시킨다.
<ul>
<li>사람에 의한 관계</li>
</ul>
</li>
<li>자동화 시스템을 개발해서 두 바운디드 컨텍스트를 통합시킨다.
<ul>
<li>자동화 시스템에 의한 관계</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="바운디드-컨텍스트-맵">바운디드 컨텍스트 맵</h3>
<ul>
<li>특정 바운디드 컨텍스트에 과도하게 집중하면 전체적인 바운디드 컨텍스트 간의 관계를 인식하지 못할 수 있다.</li>
<li>도메인을 더 잘 이해하거나 컨텍스트 간 관계가 바뀌면 컨텍스트 맵도 바뀐다.
<img loading="lazy" src="/images/notes/DDD-study/5.png" alt="5"  />
</li>
</ul>
<h2 id="5-핵사고날-아키텍처">5. 핵사고날 아키텍처</h2>
<ul>
<li>예제 프로젝트에 핵사고날 아키텍처를 적용했다.
<img loading="lazy" src="/images/notes/DDD-study/6.png" alt="6"  />

<a href="https://reflectoring.io/spring-hexagonal/">https://reflectoring.io/spring-hexagonal/</a></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>└── xxx
</span></span><span style="display:flex;"><span>    ├── adapter
</span></span><span style="display:flex;"><span>    │   ├── in
</span></span><span style="display:flex;"><span>    │   │   ├── xxxController.java
</span></span><span style="display:flex;"><span>    │   │   └── EventHandler.java <span style="color:#f92672">(</span>or MessageHandler.java<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    │   └── out
</span></span><span style="display:flex;"><span>    │       └── EventPublisher.java <span style="color:#f92672">(</span>or MessagePublisher.java<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    ├── application
</span></span><span style="display:flex;"><span>    │   ├── xxxService.java
</span></span><span style="display:flex;"><span>    │   └── port
</span></span><span style="display:flex;"><span>    │       ├── in
</span></span><span style="display:flex;"><span>    │       │   ├── xxxCommand.java
</span></span><span style="display:flex;"><span>    │       │   ├── xxxDto.java
</span></span><span style="display:flex;"><span>    │       │   └── xxxUsecase.java
</span></span><span style="display:flex;"><span>    │       └── out
</span></span><span style="display:flex;"><span>    │           ├── xxxEvent.java
</span></span><span style="display:flex;"><span>    │           ├── xxxEventPublisher.java
</span></span><span style="display:flex;"><span>    │           └── xxxRepository.java
</span></span><span style="display:flex;"><span>    └── domain
</span></span><span style="display:flex;"><span>        ├── AggregateRootEntity.java
</span></span><span style="display:flex;"><span>        └── ValueObject.java
</span></span></code></pre></div><h2 id="6-전술적-설계">6. 전술적 설계</h2>
<h3 id="도메인-영역의-주요-구성-요소">도메인 영역의 주요 구성 요소</h3>
<table>
<thead>
<tr>
<th>요소</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>엔티티 (ENTITY)</td>
<td>고유의 식별자를 갖는 객체로 자신의 라이프 사이클을 갖는다. 도메인의 고유한 개념을 표현한다. 도메인 모델의 데이터를 포함하며 해당 데이터와 관련된 기능을 함께 제공한다.</td>
</tr>
<tr>
<td>밸류 (VALUE)</td>
<td>고유의 식별자를 갖지 않는 객체다. 엔티티의 속성으로 사용할 뿐만 아니라 다른 밸류 타입의 속성으로도 사용할 수 있다.</td>
</tr>
<tr>
<td>애그리거트 (AGGREGATE)</td>
<td>애그리거트는 연관된 엔티티와 밸류 객체를 개념적으로 하나로 묶은 것이다.</td>
</tr>
<tr>
<td>리포지터리 (REPOSITORY)</td>
<td>도메인 모델의 영속성을 처리한다.</td>
</tr>
<tr>
<td>도메인 서비스 (DOMAIN SERVICE)</td>
<td>특정 엔티티에 속하지 않은 도메인 로직을 제공한다. 도메인 로직이 여러 엔티티와 밸류를 필요로 하면 도메인 서비스에서 로직을 구현한다.</td>
</tr>
</tbody>
</table>
<h3 id="엔티티--밸류">엔티티 &amp; 밸류</h3>
<ul>
<li>
<p>도메인 모델을 표현할 때 이용한다.</p>
</li>
<li>
<p>도메인 모델의 엔티티는 기능을 함께 제공한다.</p>
<ul>
<li>도메인 관점에서 도메인 로직을 구현하고 캡슐화해서 데이터가 임의로 변경되는 것을 막는다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.delivery.domain<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">changeDeliveryInfo</span><span style="color:#f92672">(</span>Address address<span style="color:#f92672">,</span> String phoneNumber<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  canChangeDelivery<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">address</span> <span style="color:#f92672">=</span> address<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">phoneNumber</span> <span style="color:#f92672">=</span> phoneNumber<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">canChangeDelivery</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">status</span><span style="color:#f92672">.</span><span style="color:#a6e22e">canChangeDelivery</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RuntimeException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;배송 정보 수정 불가&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>외부에서 setter를 이용해 배송지 정보를 변경한다면 배송지 변경 가능 여부 검증이 누락될 수 있고, 같은 로직이 반복될 수도 있다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">final</span> DeliveryStatus status <span style="color:#f92672">=</span> delivery<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatus</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 배송지 변경 조건
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">status</span><span style="color:#f92672">.</span><span style="color:#a6e22e">canChangeDelivery</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RuntimeException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;배송 정보 수정 불가&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>delivery<span style="color:#f92672">.</span><span style="color:#a6e22e">setAddress</span><span style="color:#f92672">(</span>newAddress<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>delivery<span style="color:#f92672">.</span><span style="color:#a6e22e">setPhoneNumber</span><span style="color:#f92672">(</span>newPhoneNumber<span style="color:#f92672">);</span>
</span></span></code></pre></div></li>
<li>
<p>밸류는 도메인 모델에서 두 개 이상의 데이터가 개념적으로 하나인 경우 사용한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.domain<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Table</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;orders&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Getter</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@NoArgsConstructor</span><span style="color:#f92672">(</span>access <span style="color:#f92672">=</span> AccessLevel<span style="color:#f92672">.</span><span style="color:#a6e22e">PROTECTED</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@AllArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@EqualsAndHashCode</span><span style="color:#f92672">(</span>of <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@ToString</span><span style="color:#f92672">(</span>of <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;orderLine&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;totalAmount&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;deliveryId&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;paymentId&#34;</span><span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Order</span> <span style="color:#66d9ef">implements</span> Serializable <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@GeneratedValue</span><span style="color:#f92672">(</span>strategy <span style="color:#f92672">=</span> GenerationType<span style="color:#f92672">.</span><span style="color:#a6e22e">IDENTITY</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> Long id<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Embedded</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> OrderLine orderLine<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// 밸류 타입, AttributeConverter를 이용함.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> Money totalAmount <span style="color:#f92672">=</span> Money<span style="color:#f92672">.</span><span style="color:#a6e22e">ZERO</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">...</span> <span style="color:#75715e">// 다른 필드
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.common<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Converter</span><span style="color:#f92672">(</span>autoApply <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MoneyConverter</span> <span style="color:#66d9ef">implements</span> AttributeConverter<span style="color:#f92672">&lt;</span>Money<span style="color:#f92672">,</span> BigDecimal<span style="color:#f92672">&gt;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> BigDecimal <span style="color:#a6e22e">convertToDatabaseColumn</span><span style="color:#f92672">(</span>Money attribute<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> attribute<span style="color:#f92672">.</span><span style="color:#a6e22e">getValue</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Money <span style="color:#a6e22e">convertToEntityAttribute</span><span style="color:#f92672">(</span>BigDecimal dbData<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> Money<span style="color:#f92672">(</span>dbData<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>엔티티는 @Entity 애너테이션을 사용한다.</p>
</li>
<li>
<p>밸류는 @Embeddable, @Embedded, @SecondaryTable, @ElementCollection, @CollectionTable을 사용한다.</p>
<ul>
<li>@ElementCollection은 생명주기를 상위 엔티티에 종속시킨다.</li>
<li>즉, cascade와 orphanRemoval 옵션을 제공하지 않는다.</li>
<li>@OneToMany(cascade = ALL, orphanRemoval = true)와 차이점
<ul>
<li>@ElementCollection은 식별자를 갖지 않는다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.domain<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Embedded</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> OrderLine orderLine<span style="color:#f92672">;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.domain<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Embeddable</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OrderLine</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@ElementCollection</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@CollectionTable</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;order_lines&#34;</span><span style="color:#f92672">,</span> joinColumns <span style="color:#f92672">=</span> <span style="color:#a6e22e">@JoinColumn</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;orders_id&#34;</span><span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> Set<span style="color:#f92672">&lt;</span>LineItem<span style="color:#f92672">&gt;</span> lineItems <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashSet<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span> <span style="color:#75715e">// 메서드
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>@AttributeOverride를 이용해서 @Embeddable 밸류의 애트리뷰트를 override할 수도 있다.</li>
</ul>
<h3 id="애그리거트">애그리거트</h3>
<ul>
<li>
<p>도메인이 커지면 도메인 모델이 복잡해진다.</p>
</li>
<li>
<p>도메인 모델이 복잡해지면 전체 구조에 초점을 맞추지 못하게 되고, 모델 간에 관계를 이해하기 어렵게 된다.</p>
</li>
<li>
<p>애그리거트는 관련 객체를 묶어서 <strong>상위 개념으로 표현</strong>해준다.</p>
<ul>
<li>Order 도메인은 주문, 주문 목록, 총 결제 금액 등 하위 모델로 구성된다.</li>
<li>이를 하나로 묶어 <strong>주문</strong>이라는 상위 개념으로 표현해준다.</li>
</ul>
</li>
<li>
<p>애그리거트는 루트 엔티티를 가지며, 이를 애그리거트 루트라 한다.</p>
</li>
<li>
<p>애그리거트 루트는 애그리거트에 속해 있는 엔티티와 밸류 객체를 이용해서 애그리거트가 구현해야 할 기능을 제공한다.</p>
<ul>
<li>애그리거트의 내부 구현을 숨겨서 애그리거트 단위로 구현을 캡슐화 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.delivery.domain<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> <span style="color:#75715e">// 애너테이션
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Delivery</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@GeneratedValue</span><span style="color:#f92672">(</span>strategy <span style="color:#f92672">=</span> GenerationType<span style="color:#f92672">.</span><span style="color:#a6e22e">IDENTITY</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> Long id<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Embedded</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> Address address<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> String phoneNumber<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">...</span> <span style="color:#75715e">// 다른 필드
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">changeDeliveryInfo</span><span style="color:#f92672">(</span>Address address<span style="color:#f92672">,</span> String phoneNumber<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    canChangeDelivery<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">address</span> <span style="color:#f92672">=</span> address<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">phoneNumber</span> <span style="color:#f92672">=</span> phoneNumber<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="리포지터리">리포지터리</h3>
<ul>
<li>리포지터리는 애그리거트 단위로 도메인 객체를 저장하고 조회한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.application.port.out<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> minjun.ddd.order.domain.Order<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.springframework.data.jpa.repository.JpaRepository<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">OrderRepository</span> <span style="color:#66d9ef">extends</span> JpaRepository<span style="color:#f92672">&lt;</span>Order<span style="color:#f92672">,</span> Long<span style="color:#f92672">&gt;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>
<p>애그리거트의 <strong>루트 엔티티만 리포지터리를 갖는다.</strong></p>
<ul>
<li>애그리거트의 밸류 등은 루트 엔티티와 생명 주기가 같다.</li>
<li><strong>생명 주기가 다르거나 데이터 변경 주체가 다르다면 다른 애그리거트일 가능성이 높다.</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.product.application.port.out<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> minjun.ddd.product.domain.Product<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.springframework.data.jpa.repository.JpaRepository<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">ProductRepository</span> <span style="color:#66d9ef">extends</span> JpaRepository<span style="color:#f92672">&lt;</span>Product<span style="color:#f92672">,</span> Long<span style="color:#f92672">&gt;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>Product 애그리거트는 Order나 Delivery와 연관이 있기 때문에 같은 애그리거트로 생각될 수 있다.</li>
<li>하지만 Order나 Delivery는 변경 주체가 주문자와 기사이지만, Product는 상품 관리자가 관리한다.</li>
</ul>
</li>
</ul>
<h3 id="도메인-서비스">도메인 서비스</h3>
<ul>
<li>도메인 영역을 개발하다 보면 <strong>한 애그리거트로 기능을 구현하지 못할 때</strong>가 있다.</li>
<li>결제 금액 계산 로직에 할인이 적용되는 경우
<ul>
<li>할인 쿠폰 애그리거트: 쿠폰별로 지정한 금액이나 비율에 따라 총 금액을 할인한다.</li>
<li>회원 애그리거트: 회원 등급에 따라 추가 할인이 가능하다.</li>
</ul>
</li>
<li>주문 애그리거트에 할인 관련 로직을 적용하면 할인 정책 변경시 주문 애그리거트가 변경된다.</li>
</ul>
<p>→ <strong>도메인 서비스 사용</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DiscountCalculationService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> Money <span style="color:#a6e22e">calculateDiscountAmounts</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>OrderLine<span style="color:#f92672">&gt;</span> orderLines<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>                                        List<span style="color:#f92672">&lt;</span>Coupon<span style="color:#f92672">&gt;</span> coupons<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>                                        MemberGrade grade<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		Money couponDiscount <span style="color:#f92672">=</span> coupons<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>coupon <span style="color:#f92672">-&gt;</span> calculateDiscount<span style="color:#f92672">(</span>coupon<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">.</span><span style="color:#a6e22e">reduce</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Money<span style="color:#f92672">(</span><span style="color:#ae81ff">0</span><span style="color:#f92672">),</span> <span style="color:#f92672">(</span>v1<span style="color:#f92672">,</span> v2<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> v1<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>v2<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Money membershipDiscount <span style="color:#f92672">=</span> calculateDiscount<span style="color:#f92672">(</span>orderer<span style="color:#f92672">.</span><span style="color:#a6e22e">getMember</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getGrade</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> couponDiscount<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>membershipDiscount<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> Money <span style="color:#a6e22e">calculateDiscount</span><span style="color:#f92672">(</span>Coupon coupon<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> Money <span style="color:#a6e22e">calculateDiscount</span><span style="color:#f92672">(</span>MemberGrade grade<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>
<p>외부 시스템이나 타 도메인과 <strong>연동 기능</strong>도 도메인 서비스가 될 수 있다.</p>
</li>
<li>
<p>상품 관리 시스템에서 사용자가 권한을 가졌는지 확인하기 위해 맴버 시스템을 연동하는 경우</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">PermissionChecker</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">hasUserPermission</span><span style="color:#f92672">(</span>String userId<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>여기서 인터페이스는 외부 시스템의 역할을 표현하기 위해 도메인 로직 관점에서 작성한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CreateProductService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> PermissionChecker permissionChecker<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> Long <span style="color:#a6e22e">createProduct</span><span style="color:#f92672">(</span>CreateProductRequest req<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		validate<span style="color:#f92672">(</span>req<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>permissionChecker<span style="color:#f92672">.</span><span style="color:#a6e22e">hasUserPermission</span><span style="color:#f92672">(</span>req<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserId</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> NoPermissionException<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">...</span> <span style="color:#75715e">// 생성
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="이벤트">이벤트</h3>
<ul>
<li>
<p>API를 이용하는 방법은 <strong>시스템간 결합 문제</strong>를 발생시킨다.</p>
<ul>
<li>외부 서비스의 성능</li>
<li>트랜잭션 처리 정책</li>
<li>설계상 문제</li>
</ul>
</li>
<li>
<p><strong>외부 서비스의 성능</strong></p>
</li>
<li>
<p><strong>트랜잭션 처리 정책</strong></p>
<ol>
<li>환불 외부 서비스에서 익셉션이 발생하면 주문까지 트랜잭션을 롤백한다.</li>
<li>주문만 취소 상태로 변경하고 환불은 나중에 처리한다.</li>
</ol>
</li>
<li>
<p><strong>설계상 문제</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.application.service<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@RequiredArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Transactional</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OrderService</span> <span style="color:#66d9ef">implements</span> OrderUsecase <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> PaymentPort paymentPort<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">cancelOrder</span><span style="color:#f92672">(</span>Long orderId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">final</span> Order order <span style="color:#f92672">=</span> findOrder<span style="color:#f92672">(</span>orderId<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Payment 도메인 로직
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">final</span> Boolean responseFromPayment <span style="color:#f92672">=</span> paymentPort<span style="color:#f92672">.</span><span style="color:#a6e22e">cancelPayment</span><span style="color:#f92672">(</span>order<span style="color:#f92672">.</span><span style="color:#a6e22e">getPaymentId</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>responseFromPayment<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RuntimeException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;결제 취소 실패&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Order 도메인 로직
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    order<span style="color:#f92672">.</span><span style="color:#a6e22e">cancelOrder</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>다른 도메인의 로직이 섞이고, 트랜잭션 처리 정책 및 외부 서비스 영향이 증가한다.</li>
</ul>
</li>
</ul>
<p><strong>→ 시스템의 결합도를 낮추기 위해 이벤트를 사용한다.</strong></p>
<ul>
<li>
<p>이벤트는 <strong>과거에 벌어진 어떤 것</strong>을 의미하며, <strong>상태가 변경</strong>됐다는 것을 의미한다.</p>
</li>
<li>
<p>이벤트는 다음과 같이 네 개의 구성요소를 가진다.
<img loading="lazy" src="/images/notes/DDD-study/7.png" alt="7.png"  />
</p>
<ul>
<li>
<p>이벤트</p>
<ul>
<li>이벤트 종류, 발생 시간, 이벤트 관련 정보</li>
</ul>
</li>
<li>
<p>이벤트 생성 주체</p>
<ul>
<li>도메인 로직을 실행해서 <strong>상태가 바뀌면</strong> 관련 이벤트를 발생시킨다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.delivery.application<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">startDelivery</span><span style="color:#f92672">(</span>Long deliveryId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> Delivery delivery <span style="color:#f92672">=</span> deliveryRepository<span style="color:#f92672">.</span><span style="color:#a6e22e">findById</span><span style="color:#f92672">(</span>deliveryId<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">.</span><span style="color:#a6e22e">orElseThrow</span><span style="color:#f92672">(</span>NoSuchElementException<span style="color:#f92672">::</span><span style="color:#66d9ef">new</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  delivery<span style="color:#f92672">.</span><span style="color:#a6e22e">startDelivery</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  deliveryEventPublisher<span style="color:#f92672">.</span><span style="color:#a6e22e">publish</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> DeliveryStartedEvent<span style="color:#f92672">(</span>delivery<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>이벤트 디스패처</p>
<ul>
<li>핸들러에 <strong>이벤트를 전파</strong>한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.delivery.adapter.out<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// org.springframework.context.ApplicationEventPublisher
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> ApplicationEventPublisher publisher<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">publish</span><span style="color:#f92672">(</span>DeliveryEvent event<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  publisher<span style="color:#f92672">.</span><span style="color:#a6e22e">publishEvent</span><span style="color:#f92672">(</span>event<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Order Event Published: {} {}&#34;</span><span style="color:#f92672">,</span> event<span style="color:#f92672">.</span><span style="color:#a6e22e">getDelivery</span><span style="color:#f92672">(),</span> event<span style="color:#f92672">.</span><span style="color:#a6e22e">getTimestamp</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>이벤트 핸들러</p>
<ul>
<li>이벤트 생성 주체가 발생시킨 이벤트에 반응한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.adapter.in<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@EventListener</span><span style="color:#f92672">(</span>DeliveryStartedEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">handleDeliveryStartedEvent</span><span style="color:#f92672">(</span>DeliveryStartedEvent event<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  orderUsecase<span style="color:#f92672">.</span><span style="color:#a6e22e">startDelivery</span><span style="color:#f92672">(</span>event<span style="color:#f92672">.</span><span style="color:#a6e22e">getDelivery</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getOrderId</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>위와 같은 방법이 아닌, <strong>메시징 시스템을 이용한 방법</strong>도 가능하다.</p>
<ul>
<li>이벤트 저장소를 이용한 메시징 (<strong>Transactional Outbox Pattern</strong>)</li>
<li>이벤트 발행 서비스
<img loading="lazy" src="/images/notes/DDD-study/8.png" alt="transactional-outbox-pattern.png"  />
</li>
<li>이벤트 소비 서비스
<img loading="lazy" src="/images/notes/DDD-study/9.png" alt="idempotent-receiver.png"  />
</li>
</ul>
</li>
</ul>
]]></content:encoded></item><item><title>MSA 개발 스택 빠르게 훑어보기</title><link>https://jo-minjun.github.io/notes/msa-stack-quick-peek/</link><pubDate>Wed, 28 Dec 2022 17:10:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/msa-stack-quick-peek/</guid><description>본 포스팅은 (주)부릉의 MSA 스택에 대한 내용으로, 모든 MSA가 아래와 같은 내용으로 구성되는 것이 아닙니다. (주)부릉의 온보딩 내용을 정리한 포스팅입니다.
1. 요구사항 아주 간단한 웹 기반 ITunes 주요 데이터는 다음과 같다. 가수 (Singer) 이름 정보를 가진다. 앨범 (Album) 발매 날짜, 앨범 제목 정보를 가진다. 노래 (Song) 노래 제목과 재생 시간 정보를 가진다. 공통 데이터 생성 시간 업데이트 시간 생성한 사람 업데이트한 사람 주요 기능 가수를 등록할 수 있다. 앨범을 등록할 수 있다.</description><content:encoded><![CDATA[<blockquote>
<p>본 포스팅은 (주)부릉의 MSA 스택에 대한 내용으로, 모든 MSA가 아래와 같은 내용으로 구성되는 것이 아닙니다.
(주)부릉의 온보딩 내용을 정리한 포스팅입니다.</p>
</blockquote>
<h2 id="1-요구사항">1. 요구사항</h2>
<ul>
<li>아주 간단한 웹 기반 ITunes</li>
<li>주요 데이터는 다음과 같다.
<ul>
<li>가수 (Singer)
<ul>
<li>이름 정보를 가진다.</li>
</ul>
</li>
<li>앨범 (Album)
<ul>
<li>발매 날짜, 앨범 제목 정보를 가진다.</li>
</ul>
</li>
<li>노래 (Song)
<ul>
<li>노래 제목과 재생 시간 정보를 가진다.</li>
</ul>
</li>
<li>공통 데이터
<ul>
<li>생성 시간</li>
<li>업데이트 시간</li>
<li>생성한 사람</li>
<li>업데이트한 사람</li>
</ul>
</li>
</ul>
</li>
<li>주요 기능
<ul>
<li>가수를 등록할 수 있다.</li>
<li>앨범을 등록할 수 있다.</li>
<li>노래를 등록할 수 있다.</li>
<li>노래 목록들을 조회할 수 있다.</li>
<li>노래를 조회할 수 있다.</li>
<li>노래를 업데이트 할 수 있다.</li>
<li>노래를 삭제할 수 있다.</li>
</ul>
</li>
</ul>
<h3 id="엔티티-class">엔티티 Class</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/1.png" alt="1"  />
</p>
<h2 id="2-프로젝트-scaffolding">2. 프로젝트 scaffolding</h2>
<h3 id="섀시-패턴">섀시 패턴</h3>
<ul>
<li>아래와 같은 프로젝트들의 공통 관심사를 편리하게 설정할 수 있다.
<ul>
<li>health check 패턴: actuator</li>
<li>개발 생산성 확보: spring-configuration-processor, lombok, mapstruct:</li>
<li>로깅 패턴: logback, request - response 로깅</li>
<li>추적 패턴: B3 Propagation(Sleuth), Sentry 적용</li>
<li>로컬 개발 환경: docker-compose를 이용한 local cluster 구성 (UAA + MySQL + Kafka + …)</li>
<li>Persistence: QueryDSL, JPA Specification integration</li>
<li>API-First: OpenApi Generator 및 Zalando problem details 연동</li>
<li>Scheduler: ShedLock 연동</li>
<li>Security: UAA 및 리소스 서버 통합</li>
<li>CI / CD: 도커 이미지 빌드, 젠킨스 연동</li>
</ul>
</li>
</ul>
<h3 id="msa-bootcamp-프로젝트-세팅-meshkorea">msa-bootcamp 프로젝트 세팅 (Meshkorea)</h3>
<ol>
<li>
<p><code>git clone https://github.com/meshkorea/msa-starter.git</code></p>
<ul>
<li>starter project를 clone한다.</li>
</ul>
</li>
<li>
<p><code>cd msa-starter &amp;&amp; ./gradlew generate</code></p>
<ul>
<li>위 명령어를 수행하면 아래와 같은 세팅 메세지가 나온다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Starting a Gradle Daemon <span style="color:#f92672">(</span>subsequent builds will be faster<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt; Task :getBuildInfo
</span></span><span style="display:flex;"><span>&gt; WebMVC/JPA 프로젝트인가요<span style="color:#f92672">(</span>m<span style="color:#f92672">)</span>? WebFlux/R2DBC 프로젝트인가요<span style="color:#f92672">(</span>f<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>default: m<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>17s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 부릉 프로젝트입니까<span style="color:#f92672">(</span>y/n, default: n<span style="color:#f92672">)</span>?:
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>27s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 사용하려는 자바 버전은 무엇입니까<span style="color:#f92672">(</span>1.8/11, default: 11<span style="color:#f92672">)</span>?:
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>31s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span>
</span></span><span style="display:flex;"><span>&gt; 프로젝트 이름은 무엇입니까<span style="color:#f92672">(</span>default: example<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>35s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 그룹 이름은 무엇입니까<span style="color:#f92672">(</span>default: com.vroong<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>38s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 웹 서버 포트는 무엇입니까<span style="color:#f92672">(</span>default: 8080<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>42s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 웹 요청 및 응답에 사용할 미디어 타입은 무엇입니까<span style="color:#f92672">(</span>default: application/vnd.vroong.private.v1+json<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>47s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>진행할까요<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;n&#39;</span> to quit<span style="color:#f92672">)</span>? <span style="color:#f92672">[</span>osArch:intel, projectType:v, projectName:example, groupName:com.vroong, packageName:com.vroong.example, portNumber:8080, mediaType:application/vnd.vroong.private.v1+json, javaVersion:11, dockerImage:amazoncorretto:11-alpine-jdk, skipTokens:<span style="color:#f92672">[</span>.DS_Store<span style="color:#f92672">]]</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>50s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt; Task :generate
</span></span></code></pre></div></li>
<li>
<p><code>cp -r build {path-to-your-project}</code></p>
</li>
<li>
<p><code>cd {path-to-your-project} &amp;&amp; ./gradlew clean build</code></p>
</li>
<li>
<p><code>git init</code></p>
</li>
</ol>
<h3 id="로컬-개발-환경-구동-방법">로컬 개발 환경 구동 방법</h3>
<ol>
<li>JDK 설치
<ul>
<li>corretto11</li>
</ul>
</li>
<li>jhipster-uaa 세팅
<ol>
<li>msa-starter 디렉토리의 jhipster-uaa.zip을 해제한다.</li>
<li><code>cd jhipster-uaa &amp;&amp; ./gradlew jibDockerBuild -Djib.to.image=jhipster-uaa -Djib.to.tags=latest</code></li>
<li>로컬에서는 jhipster-uaa를 사용하지만, EKS에 올렸을 때는 이미 구동중인 vroong-uaa를 사용한다.</li>
</ol>
</li>
<li>도커 구동
<ul>
<li><code>./gradlew clusterUp</code></li>
<li>MySQL (3306)</li>
<li>Kafka (9092)</li>
<li>jhipster-uaa (9999)</li>
</ul>
</li>
<li>애플리케이션 구동</li>
</ol>
<h2 id="3-api-first-개발-방법론">3. API-First 개발 방법론</h2>
<h3 id="api-first-개발-방법론">API-First 개발 방법론</h3>
<ul>
<li>API를 중심으로 제품을 설계하는 방법이다.</li>
<li>API는 중요한 비즈니스 요소이며, 개발 조직에 API를 제공하는 것이 높은 우선순위를 가진다고 인식하는 것이다.</li>
</ul>
<h3 id="api-first-장점">API-First 장점</h3>
<ul>
<li><strong>일관성 제공</strong>
<ul>
<li>API-First 도구를 사용하여 일관성 있는 설계 및 문서화를 통해 일관된 개발자 경험을 제공할 수 있도록 해준다.</li>
</ul>
</li>
<li><strong>병렬 개발 편의성</strong>
<ul>
<li>API를 먼저 설계하고 결과물로 나온 API Spec을 이용해서 서버 스켈레톤과 클라이언트 SDK(API 문서 + 클라이언트 라이브러리 Stub)를 생성할 수 있고 클라이언트와 서버가 생성된 코드를 이용해서 빠르게 개발을 시작할 수 있다.</li>
</ul>
</li>
<li><strong>개발 속도 향상</strong>
<ul>
<li>API-First 도구는 클라이언트 SDK를 생성해주고, 이를 사내 Repository에 공유할 수 있다.</li>
<li>개발자들은 Mock API를 사용함으로써, API가 완성되기 전에 클라이언트를 구축할 수 있다.</li>
</ul>
</li>
<li><strong>빠른 피드백 제공</strong>
<ul>
<li>클라이언트 개발자는 서버 개발자가 개발 완료 후 API를 제공할 때까지 기다리지 않고, API 문서와 Mock API를 이용하여 설계를 검토하고 검증해볼 수 있다.</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/2.png" alt="2"  />
</p>
<h3 id="api-first-도구---oas-openapi-specification">API-First 도구 - OAS (OpenApi Specification)</h3>
<ul>
<li>OAS는 REST API를 위한 IDL(Interface Defintion Language) 이다.
<ul>
<li>API 스펙 및 기능, 설명을 기술한다.</li>
</ul>
</li>
<li>OAS 파일은 YAML 또는 JSON으로 작성할 수 있다.</li>
<li>OAS 파일은 아래 내용을 포함한 내용을 기술할 수 있다.
<ul>
<li>API endpoint와 HTTP method (GET /users, POST /users 등)</li>
<li>각 API의 요청과 응답의 파라미터</li>
<li>인증 method</li>
<li>이용 방법, 라이센스, 연락처 등과 기타 정보</li>
</ul>
</li>
<li>Swagger Editor/IDE plugin를 사용하면 OpenApi Specification의 문법 오류와 UI를 확인 할 수 있다.</li>
</ul>
<h3 id="openapi-generator의-특징">OpenApi Generator의 특징</h3>
<ul>
<li>OpenApi Generator를 사용하면 서버의 코드 스켈레톤과 클라이언트의 SDK를 자동으로 생성해준다.
<ul>
<li>서버 스켈레톤은 각 API에 대한 기술없이, 구현만 해주면 된다.</li>
<li>JAVA 뿐만 아니라 PHP, GO, C++, C#, Python, Ruby, Typescript 등 대부분의 언어를 지원한다.</li>
<li>API Interface 뿐만 아니라 model도 구현해주고, 정규 표현식 또는 다른 제한을 validation 까지 해준다.</li>
</ul>
</li>
<li>브라우저에서 사용자가 직접 호출해볼 수 있는 interactive API 문서를 만들어 준다.
<ul>
<li>Ex) Swagger Editor</li>
</ul>
</li>
</ul>
<h3 id="oas-문법">OAS 문법</h3>
<ul>
<li>
<p><a href="https://swagger.io/docs/specification/basic-structure/">https://swagger.io/docs/specification/basic-structure/</a></p>
</li>
<li>
<p>간단한 OAS 예시</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">openapi</span>: <span style="color:#e6db74">&#34;3.0.1&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">info</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">title</span>: <span style="color:#e6db74">&#34;msa-bootcamp&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">1.0.0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">servers</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://localhost:8080</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Local server</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">/api/singers</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">post</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">description</span>: <span style="color:#ae81ff">create an singer</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">operationId</span>: <span style="color:#ae81ff">createSinger</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">Singer</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">requestBody</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">description</span>: <span style="color:#ae81ff">singer model</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">content</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">application/vnd.vroong.private.v1+json</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">schema</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/CreateSingerRequest&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">responses</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;201&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/Created&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;400&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/BadRequest&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;401&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/Unauthorized&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;403&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/Forbidden&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;500&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/ServerError&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">components</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">schemas</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">CommonProperties</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">createdAt</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/DateTime&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">updatedAt</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/DateTime&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">createdBy</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/UUID&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">updatedBy</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/UUID&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Page</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">size</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int32</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">default</span>: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">totalElements</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int64</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">totalPages</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int32</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">number</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int32</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">default</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">CreateSingerRequest</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">required</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">name</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Singer</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">allOf</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/CommonProperties&#34;</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">singerId</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/LongId&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="서버-코드-스켈레톤-생성-및-클라이언트-sdk-생성">서버 코드 스켈레톤 생성 및 클라이언트 SDK 생성</h3>
<ul>
<li>
<p>OpenApi Generator를 사용한다.</p>
<ul>
<li><a href="https://openapi-generator.tech/docs/installation">https://openapi-generator.tech/docs/installation</a></li>
</ul>
</li>
<li>
<p>서버 코드 스켈레톤 생성</p>
<ul>
<li>아래와 같이 gradle이 정의되어 있어야 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>plugin <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	id <span style="color:#e6db74">&#39;org.openapi.generator&#39;</span> version <span style="color:#e6db74">&#39;4.3.1&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>openApiGenerate <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    generatorName <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;spring&#39;</span>
</span></span><span style="display:flex;"><span>    inputSpec <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span>$rootDir<span style="color:#e6db74">/src/main/resources/swagger/api.yml&#34;</span>.toString<span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    outputDir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span>$buildDir<span style="color:#e6db74">/openapi&#34;</span>.toString<span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    apiPackage <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;com.vroong.msabootcamp.api&#39;</span>
</span></span><span style="display:flex;"><span>    modelPackage <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;com.vroong.msabootcamp.api.model&#39;</span>
</span></span><span style="display:flex;"><span>    modelNameSuffix <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Dto&#34;</span>
</span></span><span style="display:flex;"><span>    apiFilesConstrainedTo <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    modelFilesConstrainedTo <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    supportingFilesConstrainedTo <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;ApiUtil.java&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    configOptions <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>            delegatePattern: <span style="color:#e6db74">&#34;true&#34;</span>,
</span></span><span style="display:flex;"><span>            title: <span style="color:#e6db74">&#34;msabootcamp&#34;</span>,
</span></span><span style="display:flex;"><span>            useTags: <span style="color:#e6db74">&#34;true&#34;</span>,
</span></span><span style="display:flex;"><span>            dateLibrary: <span style="color:#e6db74">&#34;java8&#34;</span>,
</span></span><span style="display:flex;"><span>            java8: <span style="color:#e6db74">&#34;true&#34;</span>,
</span></span><span style="display:flex;"><span>            hideGenerationTimestamp: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    validateSpec <span style="color:#f92672">=</span> true
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sourceSets <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    main <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        java <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            srcDir file<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>project.buildDir.path<span style="color:#e6db74">}</span><span style="color:#e6db74">/openapi/src/main/java&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./gradlew openApiGenerate
</span></span></code></pre></div><ul>
<li>Stub을 생성하면 아래의 파일이 생성된다.
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/3.png" alt="3"  />

<ul>
<li>model에는 OAS에서 정의한 schema를 가진 DTO가 있다.</li>
</ul>
</li>
</ul>
</li>
<li>
<p>클라이언트 SDK 빌드 및 배포</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./gradlew :clients:clean :clients:publish -Dorg.gradle.internal.publish.checksums.insecure<span style="color:#f92672">=</span>true
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 배포 결과는 https://nexus.mm.meshkorea.net/ 에서 확인할 수 있습니다.</span>
</span></span></code></pre></div><h2 id="4-controller-작성">4. Controller 작성</h2>
<ul>
<li>
<p>서버 코드 스켈레톤을 이용해서 controller를 구현한다.
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/4.png" alt="4"  />
</p>
</li>
<li>
<p>SingerApi</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * https://openapi-generator.tech
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Do not edit the class manually.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@javax.annotation.Generated</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;org.openapitools.codegen.languages.SpringCodegen&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Validated</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Api</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Singer&#34;</span><span style="color:#f92672">,</span> description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;the Singer API&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">SingerApi</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> SingerApiDelegate <span style="color:#a6e22e">getDelegate</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SingerApiDelegate<span style="color:#f92672">()</span> <span style="color:#f92672">{};</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * POST /api/singers
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * create an singer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param createSingerRequestDto singer model (optional)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @return Created (status code 201)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Bad Request (status code 400)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Unauthorized (status code 401)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Forbidden (status code 403)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Internal Server Error (status code 500)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@ApiOperation</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> nickname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;createSinger&#34;</span><span style="color:#f92672">,</span> notes <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;create an singer&#34;</span><span style="color:#f92672">,</span> authorizations <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@Authorization</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;jhipster-uaa&#34;</span><span style="color:#f92672">,</span> scopes <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">}),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@Authorization</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;jhipster-uaa&#34;</span><span style="color:#f92672">,</span> scopes <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">},</span> tags<span style="color:#f92672">={</span> <span style="color:#e6db74">&#34;Singer&#34;</span><span style="color:#f92672">,</span> <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@ApiResponses</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">201</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Created&#34;</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">400</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Bad Request&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">401</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Unauthorized&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">403</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Forbidden&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Internal Server Error&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span> <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@RequestMapping</span><span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>        method <span style="color:#f92672">=</span> RequestMethod<span style="color:#f92672">.</span><span style="color:#a6e22e">POST</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>        value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/api/singers&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>        produces <span style="color:#f92672">=</span> <span style="color:#f92672">{</span> <span style="color:#e6db74">&#34;application/problem+json&#34;</span> <span style="color:#f92672">},</span>
</span></span><span style="display:flex;"><span>        consumes <span style="color:#f92672">=</span> <span style="color:#f92672">{</span> <span style="color:#e6db74">&#34;application/vnd.vroong.private.v1+json&#34;</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> ResponseEntity<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@ApiParam</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;singer model&#34;</span><span style="color:#f92672">)</span> <span style="color:#a6e22e">@Valid</span> <span style="color:#a6e22e">@RequestBody</span><span style="color:#f92672">(</span>required <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span> CreateSingerRequestDto createSingerRequestDto<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> getDelegate<span style="color:#f92672">().</span><span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>createSingerRequestDto<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>SingerApiController</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@javax.annotation.Generated</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;org.openapitools.codegen.languages.SpringCodegen&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Controller</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@RequestMapping</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;${openapi.msabootcamp.base-path:}&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SingerApiController</span> <span style="color:#66d9ef">implements</span> SingerApi <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> SingerApiDelegate delegate<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">SingerApiController</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@org.springframework.beans.factory.annotation.Autowired</span><span style="color:#f92672">(</span>required <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span> SingerApiDelegate delegate<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">delegate</span> <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">ofNullable</span><span style="color:#f92672">(</span>delegate<span style="color:#f92672">).</span><span style="color:#a6e22e">orElse</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> SingerApiDelegate<span style="color:#f92672">()</span> <span style="color:#f92672">{});</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> SingerApiDelegate <span style="color:#a6e22e">getDelegate</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> delegate<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>SingerApiDelegate</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * A delegate to be called by the {@link SingerApiController}}.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Implement this interface with a {@link org.springframework.stereotype.Service} annotated class.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@javax.annotation.Generated</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;org.openapitools.codegen.languages.SpringCodegen&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">SingerApiDelegate</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> Optional<span style="color:#f92672">&lt;</span>NativeWebRequest<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getRequest</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * POST /api/singers
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * create an singer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param createSingerRequestDto singer model (optional)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @return Created (status code 201)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Bad Request (status code 400)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Unauthorized (status code 401)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Forbidden (status code 403)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Internal Server Error (status code 500)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @see SingerApi#createSinger
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> ResponseEntity<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>CreateSingerRequestDto createSingerRequestDto<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> ResponseEntity<span style="color:#f92672">&lt;&gt;(</span>HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">NOT_IMPLEMENTED</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>SingerApiDeleateImpl</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@RequiredArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SingerApiDelegateImpl</span> <span style="color:#66d9ef">implements</span> SingerApiDelegate <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> SingerService singerService<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> ResponseEntity<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>CreateSingerRequestDto createSingerRequestDto<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    SingerDto singerDto <span style="color:#f92672">=</span> singerService<span style="color:#f92672">.</span><span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>createSingerRequestDto<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ResponseEntity
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">created</span><span style="color:#f92672">(</span>HeaderUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">uri</span><span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>singerDto<span style="color:#f92672">.</span><span style="color:#a6e22e">getSingerId</span><span style="color:#f92672">())))</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="5-messaging">5. Messaging</h2>
<ul>
<li>이벤트 메세지 또는 커맨드 메세지를 이용하여 상호간에 통신하는 방식</li>
</ul>
<h3 id="이벤트">이벤트</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/5.png" alt="5"  />
</p>
<ul>
<li>이미 일어난 정보에 대한 메세지이다.</li>
<li>immutable 하다.</li>
<li>producer는 이벤트의 comsumer가 누구인지, 무엇을 하는지 모른다.</li>
<li>ex)
<ul>
<li>신규 물품이 입고되었을 때 필요한 시스템만 이벤트를 구독한다.</li>
<li>신규 물품이 입고된 것은 이미 일어난 사건이다.</li>
</ul>
</li>
</ul>
<h3 id="커맨드">커맨드</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/6.png" alt="6"  />
</p>
<ul>
<li>수행할 작업에 대한 하나의 시스템에서 다른 시스템으로의 메세지</li>
<li>미래에 발생할 사건의 트리거가 된다.</li>
</ul>
<h3 id="메시징을-사용하는-이유">메시징을 사용하는 이유</h3>
<ul>
<li>REST API는 클라이언트가 요청하는 시점에 서버가 항상 가용해야 하는 문제가 있다.</li>
<li>REST와 같은 동기 IPC (Inter Process Communication) 문제점을 해결하고자 비동기 메시징을 사용한다.</li>
<li>메시지 브로커가 가용하다면 consumer의 장애 시점에도 producer가 발행한 메시지는 메시지 브로커에 적재되며, consumer가 장애에서 복구되면 메시지를 소비할 수 있다.</li>
</ul>
<h3 id="transactional-outbox-pattern">Transactional Outbox Pattern</h3>
<ul>
<li>메시징을 통해 데이터를 처리할 때 데이터의 일관성을 처리하기 위해 사용한다.</li>
<li>producer 역할을 하는 서비스에서 발생한 도메인 이벤트/메시지는 적어도 한번(at least once) 발행해야 한다.</li>
<li>방법
<ol>
<li>producer 역할을 하는 서비스에 OUTBOX 테이블을 생성하고, 도메인 이벤트/메시지를 트랜잭션 범위안에서 OUTBOX 테이블에 insert한다.</li>
<li>별도의 MessageRelay가 주기적으로 OUTBOX 테이블에 있는 메세지를 발행한다.
<ul>
<li>MessageRelay는 polling publisher로 구현할 수 있다.
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/7.png" alt="transactional-outbox-pattern.png"  />
</li>
</ul>
</li>
</ol>
</li>
<li>데이터베이스 트랜잭션이 커밋된 경우에만 MessageRelay를 통해서 메시지를 발행한다.</li>
<li>MessageRelay를 통하기 때문에 메세지 발행에 시차는 생기지만, Eventual Consistency를 유지한다.</li>
</ul>
<h3 id="멱등-수신자-idempotent-receiver">멱등 수신자 (Idempotent Receiver)</h3>
<ul>
<li>consumer 역할을 하는 서비스는 동일한 메시지를 중복으로 여러번 수신할 수 있으므로, 중복 메시지로 인한 사이드 이펙트가 발생하지 않도록 멱등 수신자를 구현해야 한다.</li>
<li>방법
<ol>
<li>PROCESSED_MESSAGE 테이블을 추가한다.</li>
<li>메세지를 수신하면 식별자를 이용해서 테이블에서 조회한다.</li>
<li>테이블에서 조회된다면 메세지를 무시한다.</li>
<li>조회되지 않는 메세지면 PROCESSED_MESSAGE에 저장하고 처리한다.</li>
</ol>
<ul>
<li>(메세지 식별자에 unique 제약조건을 걸어서 구분할 수도 있다.)
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/8.png" alt="idempotent-receiver.png"  />
</li>
</ul>
</li>
</ul>
<h3 id="kafka-코드">Kafka 코드</h3>
<ul>
<li>
<p>application.yml</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">spring</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">cloud</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">stream</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kafka</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">binder</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">headers</span>:
</span></span><span style="display:flex;"><span>            [<span style="color:#e6db74">&#34;messageId&#34;</span>, <span style="color:#e6db74">&#34;messageType&#34;</span>, <span style="color:#e6db74">&#34;messageVersion&#34;</span>, <span style="color:#e6db74">&#34;messageSource&#34;</span>]
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">auto-create-topics</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># Kafka - SASL_SSL설정과 SCRAM-SHA-512 를 이용한 ID Password 설정</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># @see https://wiki.mm.meshkorea.net/pages/viewpage.action?pageId=95856174</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">configuration</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">sasl</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">jaas</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">config</span>: <span style="color:#e6db74">&#39;org.apache.kafka.common.security.plain.PlainLoginModule required username=&#34;alice&#34; password=&#34;alice-secret&#34;;&#39;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">mechanism</span>: <span style="color:#ae81ff">PLAIN</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">security</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">SASL_PLAINTEXT</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bindings</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">messageChannel</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">binder</span>: <span style="color:#ae81ff">kafka</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">destination</span>: <span style="color:#ae81ff">local-msabootcamp-output</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">producer</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># @see https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/3.0.10.RELEASE/reference/html/spring-cloud-stream-binder-kafka.html#kafka-producer-properties</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">header-mode</span>: <span style="color:#ae81ff">headers</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">partition-key-expression</span>: <span style="color:#ae81ff">headers[&#39;partitionKey&#39;]</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">partition-count</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">subscribableChannel</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">binder</span>: <span style="color:#ae81ff">kafka</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">destination</span>: <span style="color:#ae81ff">local-msabootcamp-output</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">content-type</span>: <span style="color:#ae81ff">application/json</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">consumer</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">header-mode</span>: <span style="color:#ae81ff">embeddedHeaders</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">checkpointMode</span>: <span style="color:#ae81ff">record</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">default-binder</span>: <span style="color:#ae81ff">kafka</span>
</span></span></code></pre></div><ul>
<li><code>spring.cloud.stream.kafka.binder</code> 를 이용해서 <code>KafkaBinderConfigurationProperties.class</code> 의 값을 세팅</li>
</ul>
</li>
<li>
<p>PersistentEventCreator.class</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersistentEventCreator</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> PersistentEventRepository repository<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> ObjectMapper objectMapper<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Transactional</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">create</span><span style="color:#f92672">(</span>String eventType<span style="color:#f92672">,</span> Object source<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    String body <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      body <span style="color:#f92672">=</span> objectMapper<span style="color:#f92672">.</span><span style="color:#a6e22e">writeValueAsString</span><span style="color:#f92672">(</span>source<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>IOException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      log<span style="color:#f92672">.</span><span style="color:#a6e22e">error</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Serialization failed&#34;</span><span style="color:#f92672">,</span> e<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">final</span> PersistentEvent entity <span style="color:#f92672">=</span> PersistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">newInstance</span><span style="color:#f92672">(</span>eventType<span style="color:#f92672">,</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">(),</span> body<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    repository<span style="color:#f92672">.</span><span style="color:#a6e22e">save</span><span style="color:#f92672">(</span>entity<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>PersistentEventPublisher.class - publish()</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Transactional</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Scheduled</span><span style="color:#f92672">(</span>fixedDelayString <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;PT50S&#34;</span><span style="color:#f92672">,</span> initialDelayString <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;PT10S&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SchedulerLock</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;PersistentEventPublisher&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Async</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">publish</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> Instant timeScope <span style="color:#f92672">=</span> Instant<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">(</span>Clock<span style="color:#f92672">.</span><span style="color:#a6e22e">system</span><span style="color:#f92672">(</span>ZONE_ID<span style="color:#f92672">)).</span><span style="color:#a6e22e">minus</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> ChronoUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">MINUTES</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  List<span style="color:#f92672">&lt;</span>PersistentEvent<span style="color:#f92672">&gt;</span> candidates <span style="color:#f92672">=</span> repository<span style="color:#f92672">.</span><span style="color:#a6e22e">findUnproducedByTimeScope</span><span style="color:#f92672">(</span>timeScope<span style="color:#f92672">);</span> <span style="color:#75715e">// OUTBOX 조회
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>candidates<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  writeLog<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;started&#34;</span><span style="color:#f92672">,</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;total&#34;</span><span style="color:#f92672">,</span> candidates<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> success <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>PersistentEvent candidate <span style="color:#f92672">:</span> candidates<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">boolean</span> produced <span style="color:#f92672">=</span> producer<span style="color:#f92672">.</span><span style="color:#a6e22e">produce</span><span style="color:#f92672">(</span>candidate<span style="color:#f92672">);</span> <span style="color:#75715e">// produce
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>produced<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">markProduced</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        success<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>        writeLog<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;handling&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>            kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;persistentEventId&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">()),</span>
</span></span><span style="display:flex;"><span>            kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;eventType&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventType</span><span style="color:#f92672">()),</span>
</span></span><span style="display:flex;"><span>            kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;eventId&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventId</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RuntimeException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Message was not produced&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">markFailed</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>      reportError<span style="color:#f92672">(</span>e<span style="color:#f92672">,</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;persistentEventId&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  writeLog<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;success&#34;</span><span style="color:#f92672">,</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;success&#34;</span><span style="color:#f92672">,</span> success<span style="color:#f92672">),</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;total&#34;</span><span style="color:#f92672">,</span> candidates<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>MessageProducer.class</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MessageProducer</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> MessageChannel messageChannel<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">produce</span><span style="color:#f92672">(</span>PersistentEvent persistentEvent<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">final</span> String body <span style="color:#f92672">=</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBody</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    Message<span style="color:#f92672">&lt;?&gt;</span> message <span style="color:#f92672">=</span> MessageBuilder
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">withPayload</span><span style="color:#f92672">(</span>body<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">ID</span><span style="color:#f92672">,</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventId</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">TYPE</span><span style="color:#f92672">,</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventType</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">VERSION</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">SOURCE</span><span style="color:#f92672">,</span> PROJECT_NAME<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">RESOURCE</span><span style="color:#f92672">,</span> body<span style="color:#f92672">.</span><span style="color:#a6e22e">getClass</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getSimpleName</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">PARTITION_KEY</span><span style="color:#f92672">,</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getPartitionKey</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Event publish: {}&#34;</span><span style="color:#f92672">,</span> message<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> messageChannel<span style="color:#f92672">.</span><span style="color:#a6e22e">send</span><span style="color:#f92672">(</span>message<span style="color:#f92672">,</span> MessagePolicy<span style="color:#f92672">.</span><span style="color:#a6e22e">DEFAULT_TIMEOUT</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>MessageSubscriber.class</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MessageSubscriber</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> ReceivedEventRepository receivedEventRepository<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@StreamListener</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> ConsumerChannel<span style="color:#f92672">.</span><span style="color:#a6e22e">CHANNEL</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">subscribe</span><span style="color:#f92672">(</span>Message<span style="color:#f92672">&lt;</span>Album<span style="color:#f92672">&gt;</span> event<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    UUID messageId <span style="color:#f92672">=</span> event<span style="color:#f92672">.</span><span style="color:#a6e22e">getHeaders</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    Optional<span style="color:#f92672">&lt;</span>ReceivedEvent<span style="color:#f92672">&gt;</span> receivedEvent <span style="color:#f92672">=</span> receivedEventRepository<span style="color:#f92672">.</span><span style="color:#a6e22e">findByMessageId</span><span style="color:#f92672">(</span>messageId<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>receivedEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">isPresent</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Duplicated event: {}&#34;</span><span style="color:#f92672">,</span> receivedEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getMessageId</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    receivedEventRepository<span style="color:#f92672">.</span><span style="color:#a6e22e">save</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> ReceivedEvent<span style="color:#f92672">(</span>event<span style="color:#f92672">.</span><span style="color:#a6e22e">getHeaders</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Event received: {}&#34;</span><span style="color:#f92672">,</span> event<span style="color:#f92672">.</span><span style="color:#a6e22e">getPayload</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="전체-흐름">전체 흐름</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/9.png" alt="messaging-sequence.png"  />
</p>
<h2 id="6-cicd">6. CI/CD</h2>
<h3 id="cicd란">CI/CD란</h3>
<ul>
<li>CI (Continuous Integration): 애플리케이션의 소스 변경 사항이 지속적으로 빌드 및 테스트되어 공유 리포지토리에 통합되는 것이다.</li>
<li>CD (Continuous Delivery/Deployment): 변경 사항을 테스트 또는 프로덕션 환경에 지속적으로 배포하는 것이다.</li>
</ul>
<h3 id="jenkinsfile">Jenkinsfile</h3>
<ul>
<li>
<p>jenkins는 CI 도구이다.</p>
<ul>
<li>빌드 → 테스트 → 코드 분석 → 도커 이미지 빌드 → helm chart 빌드</li>
<li>위 과정을 파이프라인으로 자동화 해준다.</li>
</ul>
</li>
<li>
<p>파이프라인은 Job들을 순차적 또는 병렬적으로 실행시키거나 작성한 스크립드로 이벤트를 연속적으로 실행시키는 것이다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>@<span style="color:#ae81ff">Library(&#39;meshkorea&#39;) _</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">vroongNeoMsaJavaPipeline(</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">team</span>: <span style="color:#e6db74">&#39;&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ecrRepoName</span>: <span style="color:#e6db74">&#39;vroong/msabootcamp&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argoAppName</span>: <span style="color:#e6db74">&#39;vroong-msabootcamp&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">gradleBuildArguments</span>: <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">)</span>
</span></span></code></pre></div><ul>
<li>team: 슬랙 {team}-build-alerts 채널에 관련 alert를 발생시킨다.</li>
<li>ecrRepoName: Jenkins에서 도커 빌드 후 push할 ECR 이름</li>
<li>argoAppName: argoCD 앱 이름</li>
<li>gradleBuildArguments: jar 파일 빌드시 뒤에 추가할 argument</li>
</ul>
</li>
<li>
<p>Jenkins 파이프라인 적용 방법</p>
<ul>
<li>리포지토리 root에 Jenkinsfile이 있어야만 파이프라인이 실행된다.</li>
<li>github push, PR, merge 와 같은 이벤트 발생시 파이프라인이 구동된다.</li>
<li>도커 이미지 tag는 파이프라인에 도커 빌드 과정에서 {tag}-{commit hash} 형태로 빌드 후 ECR에 push된다.
<ul>
<li>tag가 example이고, commit hash가 2d48cj3a인 경우 도커 이미지 tag는 example-2d48cj3a이다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="helm-values">Helm values</h3>
<ul>
<li>Helm은 K8S 패키지 관리를 도와주는 패키지 매니저이다.
<ul>
<li>ex) dev와 qa, prod 환경의 DB 주소가 다르다면 이를 관리해 주는 것이다.</li>
</ul>
</li>
<li>vroong-{appname}-helm-values 리포지토리 에 필요한 환경 변수 추가
<ul>
<li>위 리포지토리를 보면 다음과 같은 구조가 있다.
<ul>
<li>dev1</li>
<li>prod</li>
<li>qa1 ~ 4</li>
<li>values.yaml</li>
</ul>
</li>
<li>argoCD에서 helm values를 배포하면 K8S 서비스, deployment(replica set, pod), 서비스 account, config map 등의 리소스를 만들어준다.</li>
</ul>
</li>
<li>values.yaml
<ul>
<li>모든 환경에 동일하게 적용되어야 하는 내용이 선언되어 있다.</li>
<li>각 환경 별로 values.yaml 파일이 또 있다.
<ul>
<li>각 환경 별로 바인딩 되어야 하는 환경 변수를 선언한다.</li>
<li>override하고 싶은 내용을 선언한다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="빌드-및-배포-과정">빌드 및 배포 과정</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/10.png" alt="10"  />
</p>
<ol>
<li>Start</li>
<li>Init
<ul>
<li>저장소 checkout 후, commit hash를 구한다.</li>
<li>슬랙에 파이프라인 구동 메세지를 보낸다.</li>
<li>Jenkinsfile에 작성한 값을 읽어낸다.</li>
</ul>
</li>
<li>Check the docker image
<ul>
<li>ECR에 같은 tag를 가진 이미지가 있는지 확인한다.</li>
</ul>
</li>
<li>Gradle build
<ul>
<li>nexus에 접근하기 위한 계정 정보를 복사한다.</li>
<li>jar 파일을 빌드한다.</li>
</ul>
</li>
<li>code review / unit test
<ul>
<li>sonarqube로 코드 리뷰를 하고 unit 테스트를 수행한다.</li>
</ul>
</li>
<li>Docker / ECR login
<ul>
<li>도커 이미지를 빌드하고 tag를 붙인다.</li>
<li>ECR에 login한다.</li>
</ul>
</li>
<li>ECR push
<ul>
<li>ECR에 도커 이미지를 push한다.</li>
</ul>
</li>
<li>ArgoCD trigger
<ul>
<li>argoCD에 login한다.</li>
<li>슬랙에 빌드 완료 메세지를 보낸다.</li>
</ul>
</li>
<li>End</li>
</ol>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/11.png" alt="11"  />
</p>
<ol>
<li>
<p>Jenkins 과정을 거친 후 APP DIFF 버튼을 눌러, helm values 변경 사항을 확인한다.</p>
</li>
<li>
<p>변경 사항에 이상이 없으면 SYNC 버튼을 누른다.</p>
</li>
<li>
<p>pod가 잘 교체 되는지 확인한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>k9s
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/<span style="color:#f92672">{</span>서비스 이름으로 검색<span style="color:#f92672">}</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/12.png" alt="12"  />
</p>
<ul>
<li>상단 Context에서 현재 환경을 확인할 수 있다.</li>
<li>새로운 pod가 실행된 후 완료되면 기존 pod를 교체한다.</li>
</ul>
</li>
<li>
<p>모니터링한다.</p>
</li>
</ol>
<h2 id="7-uaa">7. UAA</h2>
<ul>
<li>
<p>User Account and Authentication</p>
</li>
<li>
<p>MSA Resource 서버를 보호하기 위한 Authorization Server</p>
</li>
<li>
<p>OAuth2 (Open Authorization) 방식</p>
<ul>
<li>Authorization Code Grant Type</li>
<li>Resource Owner Password Grant type</li>
<li>Client Credentials Grant Type</li>
</ul>
</li>
<li>
<p>Client Credentials Grant Type Flow
<a href="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAGn3b%2FbtqVyURyeZN%2F77J24Xr2Y3aAIZyLUsQZg1%2Fimg.png">https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAGn3b%2FbtqVyURyeZN%2F77J24Xr2Y3aAIZyLUsQZg1%2Fimg.png</a></p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">security</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">oauth2</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">client</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">access-token-uri</span>: <span style="color:#ae81ff">http://localhost:9999/oauth/token</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">user-authorization-uri</span>: <span style="color:#ae81ff">http://localhost:9999/oauth/token</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">client-id</span>: <span style="color:#ae81ff">internal</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">client-secret</span>: <span style="color:#ae81ff">internal</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">scope</span>: <span style="color:#ae81ff">web-app</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">grant-type</span>: <span style="color:#ae81ff">client_credentials</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">authorized-grant-type</span>: <span style="color:#ae81ff">password, client_credentials, refresh_token</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resource</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">jwt.key-uri</span>: <span style="color:#ae81ff">http://localhost:9999/oauth/token_key</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>객체 지향 설계와 스프링</title><link>https://jo-minjun.github.io/notes/spring-core-basic/</link><pubDate>Fri, 01 Jul 2022 19:42:48 +0900</pubDate><guid>https://jo-minjun.github.io/notes/spring-core-basic/</guid><description>1. 스프링이란? 스프링의 생태계 필수: 스프링 프레임워크, 스프링 부트
선택: 스프링 데이터, 스프링 세션, 스프링 시큐리티, 스프링 Rest Docs, 스프링 배치, 스프링 클라우드
가장 중요한 것: 스프링 프레임워크 핵심 기술: 스프링 DI 컨테이너, AOP, 이벤트, 기타 웹 기술: 스프링 MVC, 스프링 webFlux 데이터 접근 기술: 트랜잭션, JDBC, ORM 지원, XML 지원 기술 통합: 캐시, 이메일, 원격접근, 스케줄링 테스트: 스프링 기반 테스트 지원 언어: 코틀린, 그루비 *최근에는 스프링 부트를 통해서 스프링 프레임워크의 기술들을 편리하게 사용한다.</description><content:encoded><![CDATA[<h2 id="1-스프링이란">1. 스프링이란?</h2>
<h3 id="스프링의-생태계">스프링의 생태계</h3>
<blockquote>
<p><strong>필수:</strong>
스프링 프레임워크, 스프링 부트</p>
</blockquote>
<p><strong>선택:</strong>
스프링 데이터, 스프링 세션, 스프링 시큐리티, 스프링 Rest Docs, 스프링 배치, 스프링 클라우드</p>
<blockquote>
</blockquote>
<h3 id="가장-중요한-것-스프링-프레임워크">가장 중요한 것: <strong>스프링 프레임워크</strong></h3>
<ul>
<li><strong>핵심 기술:</strong> 스프링 DI 컨테이너, AOP, 이벤트, 기타</li>
<li><strong>웹 기술:</strong> 스프링 MVC, 스프링 webFlux</li>
<li><strong>데이터 접근 기술:</strong> 트랜잭션, JDBC, ORM 지원, XML 지원</li>
<li><strong>기술 통합:</strong> 캐시, 이메일, 원격접근, 스케줄링</li>
<li><strong>테스트:</strong> 스프링 기반 테스트 지원</li>
<li><strong>언어:</strong> 코틀린, 그루비</li>
</ul>
<blockquote>
<p>*최근에는 <strong>스프링 부트</strong>를 통해서 스프링 프레임워크의 기술들을 편리하게 사용한다.</p>
</blockquote>
<p><strong>*스프링 부트:</strong></p>
<ul>
<li>스프링을 편리하게 사용할 수 있도록 지원, 최근에는 기본으로 사용</li>
<li>단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성</li>
<li>Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨</li>
<li>손쉬운 빌드 구성을 위한 starter 종속성 제공</li>
<li>스프링과 3rd party(외부) 라이브러리 자동 구성</li>
<li>메트릭, 상태 확인, 외부 구성 같은 프로덕션 준비 기능 제공</li>
<li>관례에 의한 간결한 설정</li>
<li>스프링 부트는 스프링 프레임워크를 기반으로 나머지 외부 라이브러리를 자동으로 구성해주는 기술이지, 자체적으로 사용할 수 있는 것이 아님</li>
</ul>
<h3 id="스프링의-의미">스프링의 의미</h3>
<ul>
<li>스프링이라는 단어는 문맥에 따라 다르게 사용된다.
<ol>
<li>스프링 DI 컨테이너 기술</li>
<li>스프링 프레임워크</li>
<li>스프링 부트, 스프링 프레임워크 등을 모두 포함한 스프링 생태계</li>
</ol>
</li>
</ul>
<h3 id="스프링의-핵심-개념">스프링의 핵심 개념</h3>
<ul>
<li>자바 언어 기반의 프레임워크</li>
<li>자바 언어의 가장 큰 특징 - <strong>객체 지향 언어</strong></li>
<li>스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크</li>
<li>스프링은 <strong>좋은 객체 지향</strong> 애플리케이션을 개발할 수 있게 도와주는 프레임워크</li>
<li><strong>객체 지향 프로그래밍</strong>은 스프링의 근원</li>
</ul>
<h2 id="2-좋은-객체-지향-프로그래밍이란">2. 좋은 객체 지향 프로그래밍이란?</h2>
<h3 id="객체-지향-프로그래밍이란">객체 지향 프로그래밍이란?</h3>
<ul>
<li>프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러개의 독립된 단위,
즉 “<strong>객체</strong>&ldquo;들의 <strong>모임</strong>으로 파악하고자 하는 것이다.
각각의 <strong>객체</strong>는 <strong>메세지</strong>를 주고받고 데이터를 처리한다. <strong>(협력)</strong></li>
<li>객체 지향 프로그래밍은 프로그램을 <strong>유연</strong>하고 <strong>변경이 용이</strong>하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다.</li>
</ul>
<blockquote>
<p><strong>유연하고 변경이 용이?</strong></p>
<ol>
<li>레고 블럭 조립하듯이</li>
<li>키보드, 마우스 갈아 끼우듯이</li>
<li>컴퓨터 부품 갈아 끼우듯이</li>
<li>컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법</li>
</ol>
</blockquote>
<h3 id="객체-지향의-특징">객체 지향의 특징</h3>
<ul>
<li>추상화</li>
<li>캡슐화</li>
<li>상속</li>
<li><strong>다형성</strong> → 유연하고 변경이 용이하도록 하는데에 크게 기여함</li>
</ul>
<h3 id="다형성의-실세계-비유">다형성의 실세계 비유</h3>
<ul>
<li>실세계와 객체 지향이 1:1로 매칭되지는 않음</li>
<li>그러나 실세계의 비유로 이해하기 편리함</li>
<li><strong>역할</strong>과 <strong>구현</strong>으로 세상을 구분</li>
</ul>
<p><strong>운전자 - 자동차 예시</strong></p>
<p><img loading="lazy" src="/images/notes/spring-core-basic/0.png" alt="운전자-자동차_예시.png"  />
</p>
<ul>
<li>자동차의 역할(인터페이스)을 3개의 자동차로 구현함</li>
<li>운전자는 K3를 타다가 아반떼로 차를 변경할 수 있음</li>
<li>차가 바뀌어도 운전자는 운전을 할 수 있음 → 유연하고 변경이 용이</li>
<li><strong>클라이언트에 영향을 주지 않고, 새로운 기능을 제공할 수 있음</strong> → 유연하고 변경이 용이</li>
</ul>
<blockquote>
<p><strong>이외의 예시</strong></p>
<p>공연에서 각 인물의 역할
키보드, 마우스, 세상의 표준 인터페이스들
정렬 알고리즘
할인 정책 예시</p>
</blockquote>
<h3 id="역할과-구현을-분리">역할과 구현을 분리</h3>
<ul>
<li><strong>역할과 구현</strong>으로 구분하면 세상이 단순해지고 유연해지며, 변경도 편리해진다.</li>
<li>장점
<ul>
<li>클라이언트는 대상의 <strong>역할(인터페이스)만 알면 된다.</strong></li>
<li>클라이언트는 구현 <strong>대상의 내부 구조를 몰라도 된다.</strong></li>
<li>클라이언트는 구현 <strong>대상의 내부 구조가 변경되어도 영향을 받지 않는다.</strong></li>
<li>클라이언트는 구현 <strong>대상 자체를 변경해도 영향을 받지 않는다.</strong></li>
</ul>
</li>
</ul>
<h3 id="자바-언어에서의-역할과-구현"><strong>자바 언어에서의 역할과 구현</strong></h3>
<ul>
<li>자바 언어의 다형성을 활용
<ul>
<li>역할: 인터페이스</li>
<li>구현: 인터페이스를 구현한 클래스, 구현 객체</li>
</ul>
</li>
<li>객체를 설계할 때 <strong>역할</strong>과 <strong>구현</strong>을 명확히 분리</li>
<li>객체 설계시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기
(구현보다 <strong>역할이 중요</strong>하다.)</li>
</ul>
<h3 id="객체의-협력이라는-관계부터-생각">객체의 협력이라는 관계부터 생각</h3>
<ul>
<li>혼자있는 객체는 없다.</li>
<li>클라이언트: 요청</li>
<li>서버: 응답</li>
<li>수 많은 객체 클라이언트와 객체 서버는 서로 협력 관계를 가진다.</li>
</ul>
<h3 id="자바-언어의-다형성">자바 언어의 다형성</h3>
<p><img loading="lazy" src="/images/notes/spring-core-basic/1.png" alt="오버라이딩.png"  />
</p>
<ul>
<li>오버라이딩을 떠올려보자</li>
<li>오버라이딩된 메서드가 실행</li>
<li>다형성으로 인터페이스를 구현한 객체를 실행 시점에 유연하게 변경할 수 있다.</li>
<li>물론 상속 관계도 다형성, 오버라이딩 적용 가능</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MemberService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> MemberRepository memberRepository1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MemoryMemberRepository<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> MemberRepository memberRepository2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> JdbcMemberRepository<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="다형성의-본질">다형성의 본질</h3>
<ul>
<li>인터페이스를 구현한 <strong>객체 인스턴스</strong>를 <strong>실행 시점에 유연하게</strong> 변경할 수 있다.</li>
<li>다형성의 본질을 이해하려면 <strong>협력</strong>이라는 객체 사이의 관계에서 시작해야함</li>
<li><strong>클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.</strong></li>
</ul>
<h3 id="역할과-구현을-분리---정리">역할과 구현을 분리 - 정리</h3>
<ul>
<li>실세계의 역할과 구현이라는 편리한 컨셉을 다형성을 통해 객체 세상으로 가져올 수 있음</li>
<li>유연하고, 변경이 용이</li>
<li>확장 가능한 설계</li>
<li>클라이언트에 영향을 주지 않는 변경 가능</li>
<li>인터페이스를 안정적으로 잘 설계하는 것이 중요</li>
</ul>
<h3 id="역할과-구현을-분리---한계">역할과 구현을 분리 - 한계</h3>
<ul>
<li>역할(인터페이스) 자체가 변하면 클라이언트, 서버 모두에 큰 변경이 발생한다.</li>
<li>자동차를 비행기로 변경해야 한다면?</li>
<li>대본 자체가 변경된다면?</li>
<li>USB 인터페이스 자체가 변경된다면?</li>
<li>인터페이스를 안정적으로 잘 설계하는 것이 중요</li>
</ul>
<h3 id="스프링과-객체-지향">스프링과 객체 지향</h3>
<ul>
<li>다형성이 가장 중요하다!</li>
<li>스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.</li>
<li>스프링에서 이야기하는 제어의 역전(IoC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다.</li>
<li>스프링을 사용하면 마치 레고 블럭 조립하듯이, 공연 무대의 배우를 선택하듯이, 구현을 편리하게 변경할 수 있다.</li>
<li>그리고 또 중요한 것 - <strong>SOLID</strong></li>
</ul>
<h2 id="3-좋은-객체-지향-설계의-5가지-원칙-solid">3. 좋은 객체 지향 설계의 5가지 원칙 (SOLID)</h2>
<h3 id="solid">SOLID</h3>
<p>클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리</p>
<ul>
<li><strong>SRP:</strong> 단일 책임 원칙 (Single Responsibility Principle)</li>
<li><strong>OCP:</strong> 개방 - 폐쇄 원칙 (Open - Closed Principle)</li>
<li><strong>LSP:</strong> 리스코프 치환 원칙 (Liskov Substitution Principle)</li>
<li><strong>ISP:</strong> 인터페이스 분리 원칙 (Interface Segregation Principle)</li>
<li><strong>DIP:</strong> 의존관계 역전 원칙 (Dependency Inversion Principle)</li>
</ul>
<h3 id="srp-단일-책임-원칙-single-responsibility-principle"><strong>SRP:</strong> 단일 책임 원칙 (Single Responsibility Principle)</h3>
<ul>
<li>한 클래스는 하나의 책임만 가져야 한다.</li>
<li>하나의 책임이라는 것은 모호하다.
<ul>
<li>클 수 있고, 작을 수 있다.</li>
<li>문맥과 상황에 따라 다르다.</li>
</ul>
</li>
<li>중요한 <strong>기준은 변경</strong>이다.
<ul>
<li>변경이 있을 때 파급효과가 적으면 단일 책임 원칙을 잘 따른 것</li>
<li>Ex) UI 변경, 객체의 생성과 사용을 분리</li>
</ul>
</li>
</ul>
<h3 id="ocp-개방---폐쇄-원칙-open---closed-principle"><strong>OCP:</strong> 개방 - 폐쇄 원칙 (Open - Closed Principle)</h3>
<ul>
<li>가장 중요한 원칙</li>
<li>소프트웨어 요소는 <strong>확장에는 열려</strong>있으나 <strong>변경에는 닫혀</strong>있어야 한다.</li>
<li>다형성을 활용
<ul>
<li>인터페이스를 구현한 클래스를 하나 만들어서 새로운 기능을 구현</li>
<li>지금까지 배운 역할과 구현의 분리를 생각해보자</li>
<li>Ex) 운전자 - 자동차
<ul>
<li>자동차가 바뀌어도 운전자는 똑같이 운전함 → 확장에 열림</li>
</ul>
</li>
</ul>
</li>
<li>문제점
<ul>
<li>MemberService 클라이언트가 구현 클래스를 직접 선택</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MemberService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// 기존 코드
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// private MemberRepository memberRepository1 = new MemoryMemberRepository();
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// 변경 코드
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">private</span> MemberRepository memberRepository2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> JdbcMemberRepository<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li><strong>구현 객체를 변경하려면 클라이언트 코드를 변경해야 한다.</strong></li>
<li><strong>다형성을 사용했지만 OCP 원칙을 지킬 수 없다.</strong></li>
<li>객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다.
<ul>
<li>이 역할을 스프링 컨테이너가 해결해줌</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="lsp-리스코프-치환-원칙-liskov-substitution-principle"><strong>LSP:</strong> 리스코프 치환 원칙 (Liskov Substitution Principle)</h3>
<ul>
<li>프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스를 바꿀 수 있어야 한다.</li>
<li>다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것
<ul>
<li>다형성을 지원하기 위한 원칙</li>
<li>인터페이스를 구현한 구현체를 믿고 사용하려면 이 원칙이 필요하다.</li>
</ul>
</li>
<li>단순히 컴파일에 성공하는 것을 넘어서는 이야기</li>
<li>Ex) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능 → 뒤로가게 구현하면 리스코프 치환 원칙 위반</li>
</ul>
<h3 id="isp-인터페이스-분리-원칙-interface-segregation-principle"><strong>ISP:</strong> 인터페이스 분리 원칙 (Interface Segregation Principle)</h3>
<ul>
<li>특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.</li>
<li>자동차 인터페이스 → 운전 인터페이스, 정비 인터페이스로 분리</li>
<li>사용자 클라이언트 → 운전자 클라이언트, 정비사 클라이언트로 분리</li>
<li>분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음</li>
<li>인터페이스가 명확해지고, 대체 가능성이 높아진다.</li>
</ul>
<h3 id="dip-의존관계-역전-원칙-dependency-inversion-principle"><strong>DIP:</strong> 의존관계 역전 원칙 (Dependency Inversion Principle)</h3>
<ul>
<li>“추상화에 의존해야지, 구체화에 의존하면 안된다.”
<ul>
<li>이 원칙을 따르는 방법 중 하나다.</li>
</ul>
</li>
<li>쉽게 이야기 해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻</li>
<li>앞에서 이야기한 <strong>역할에 의존하게 해야 한다</strong>는 것과 같다.
<ul>
<li>객체 세상도 클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다.</li>
<li>구현체에 의존하게 되면 변경이 아주 어려워진다.</li>
</ul>
</li>
<li>Ex) 운전자 - 자동차
<ul>
<li>운전자는 운전 역할에 의존해야지, 자동차 종류에 의존할 경우 차량이 바뀌면 운전이 어려워짐</li>
</ul>
</li>
<li>그런데 개방 - 폐쇄 원칙에서 설명한 MemberService는 인터페이스에 의존하지만, 구현 클래스도 동시에 의존한다.
<ul>
<li>MemberService가 구현 클래스를 직접 선택 → <strong>DIP 위반</strong></li>
</ul>
</li>
</ul>
<h3 id="정리">정리</h3>
<ul>
<li>객체 지향의 핵심은 다형성</li>
<li>다형성만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다.</li>
<li>다형성만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다.</li>
<li><strong>다형성만으로는 개방 - 폐쇄 원칙, 의존관계 역전 원칙을 지킬 수 없다.</strong></li>
</ul>
<h2 id="4-객체-지향-설계와-스프링">4. 객체 지향 설계와 스프링</h2>
<h3 id="왜-스프링-이야기에-객체-지향이야기가-나오는가">왜 스프링 이야기에 객체 지향이야기가 나오는가?</h3>
<ul>
<li>스프링은 다음 기술로 다형성 + 개방 - 폐쇄 원칙, 의존관계 역전 원칙을 가능하게 지원한다.
<ul>
<li>DI (Dependency Injection): 의존관계, 의존성 주입</li>
<li>DI 컨테이너 제공</li>
</ul>
</li>
<li>클라이언트 코드의 변경 없이 기능 확장</li>
<li>쉽게 부품을 교체하듯이 개발</li>
</ul>
<h3 id="총-정리">총 정리</h3>
<ul>
<li>모든 설계에 역할과 구현을 분리하자</li>
<li>자동차, 공연의 예를 떠올려보자</li>
<li>애플리케이션 설계도 공연을 설계하듯이 배역만 만들어두고, 배우는 언제든지 <strong>유연하게 변경</strong>할 수 있도록 만드는 것이 좋은 객체 지향 설계이다.</li>
<li>이상적으로는 모든 설계에 인터페이스를 부여하자.</li>
</ul>
<h3 id="실무-고민">실무 고민</h3>
<ul>
<li>하지만 인터페이스를 도입하면 추상화라는 비용이 발생한다.
<ul>
<li>인터페이스도 만들고 구현체도 만들고</li>
<li>개발자가 구현된 코드가 안보여서 한 번더 열어봐야 됨</li>
</ul>
</li>
<li>기능을 확장할 가능성이 없다면 구체 클래스를 직접 사용하고, 향후에 꼭 필요할 때 리팩토링을 해서 인터페이스를 도입하는 것도 방법이다.</li>
</ul>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8">인프런 강의 스프링 핵심 원리(김영한)</a></li>
</ul>
]]></content:encoded></item></channel></rss>