<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>끄적끄적 on minjun's memory</title><link>https://jo-minjun.github.io/categories/%EB%81%84%EC%A0%81%EB%81%84%EC%A0%81/</link><description>Recent content in 끄적끄적 on minjun's memory</description><image><title>minjun's memory</title><url>https://jo-minjun.github.io/logo.png</url><link>https://jo-minjun.github.io/logo.png</link></image><generator>Hugo -- gohugo.io</generator><language>kr</language><lastBuildDate>Sun, 19 Mar 2023 20:53:05 +0900</lastBuildDate><atom:link href="https://jo-minjun.github.io/categories/%EB%81%84%EC%A0%81%EB%81%84%EC%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>배포할 때 생긴 일과 교훈</title><link>https://jo-minjun.github.io/doodles/%EB%B0%B0%ED%8F%AC%ED%95%A0-%EB%95%8C-%EC%83%9D%EA%B8%B4-%EC%9D%BC/</link><pubDate>Sun, 19 Mar 2023 20:53:05 +0900</pubDate><guid>https://jo-minjun.github.io/doodles/%EB%B0%B0%ED%8F%AC%ED%95%A0-%EB%95%8C-%EC%83%9D%EA%B8%B4-%EC%9D%BC/</guid><description>지금까지는 사내에서 신규 스택을 사용하는 프로젝트를 다루면서 단순히 EKS(K8S) 리소스(주로 Deployment)를 교체하는 무중단 배포를 했다.
그러던 중, 꽤 옛날 스택을 사용하는 프로젝트 개선에 참여하게 되었고, 나는 맡은 일에 책임을 다하면서 개선 작업은 순조롭게 진행되었다.
Spring boot 2.1.8, JAVA 8 -&amp;gt; Spring boot 3.0.1, JAVA 17
Bamboo, Spinaker -&amp;gt; Jenkins, ArgoCD
Spring integration -&amp;gt; 커스텀 구현
등등 &amp;hellip;
그리고 이 작업들에는 가장 큰 개선 과제 중 하나는 아래와 같았다.
꽤 오래된 스택을 사용하던 이 프로젝트는 EKS 1.</description><content:encoded><![CDATA[<p>지금까지는 사내에서 신규 스택을 사용하는 프로젝트를 다루면서 단순히 EKS(K8S) 리소스(주로 Deployment)를 교체하는 무중단 배포를 했다.</p>
<p>그러던 중, 꽤 옛날 스택을 사용하는 프로젝트 개선에 참여하게 되었고, 나는 맡은 일에 책임을 다하면서 개선 작업은 순조롭게 진행되었다.</p>
<blockquote>
<p>Spring boot 2.1.8, JAVA 8 -&gt; Spring boot 3.0.1, JAVA 17<br>
Bamboo, Spinaker -&gt; Jenkins, ArgoCD<br>
Spring integration -&gt; 커스텀 구현<br>
등등 &hellip;</p>
</blockquote>
<p>그리고 이 작업들에는 가장 큰 개선 과제 중 하나는 아래와 같았다.</p>
<p>꽤 오래된 스택을 사용하던 이 프로젝트는 EKS 1.14 버전 정도에 생겨났고, 그 당시 선언서에는 EKS LB에 고정IP를 할당하는 스펙을 가지고 있지 않았다.<br>
그래서 AWS NLB 리소스에 고정IP를 할당해 놓았으며, 그 NLB를 EKS 리소스와 같은 노드 포트를 바라보게 하여 IP를 고정으로 할당하게 하는 트릭을 사용했다.<br>
그래서 결과적으로는 EKS Service(LB) 리소스 하나에 AWS NLB 리소스 2개가 사용되는 모양이였다.</p>
<p>AWS 리소스 낭비를 개선하고 관리 편의성을 위해 EKS 선언서 또한 업데이트 하게 되었고, 이는 결국에는 AWS NLB 리소스를 1개로 만들면서 기존에 고정IP를 할당했던 NLB를 지우면서 새로운 선언서로 자동 생성되는 LB에 사용하던 고정IP를 할당하게 하는 것이었다.</p>
<p>그리고 위 작업에는 서비스에 중단이 발생한다.</p>
<p>그래서 배포 준비를 굉장히 열심히 했다.<br>
(최대한 실수없는 배포를 진행하고 고객들의 불편함 최소화, 혹시 모를 상황을 피해기 위해)<br>
QA와 Dev 서버에 수번 배포와 롤백을 반복했고, AWS 리소스를 정리해놨으며 사용할 커맨드 그리고 배포와 롤백 플랜을 작성해놨다. (해야하는 작업의 순서와 배포 1시간, 롤백시 30분 추가 등..)</p>
<p>나는 연습을 통해 자신이 생겼다. 여러번 연습하면서 배포 및 롤백 과정도 익숙해졌다. 그리고 믿음직스러운 동료분들도 같이 진행했다.<br>
그래서 큰 긴장 없이 상용 배포를 진행하게 되었다. 나는 지금까지 연습한 것처럼 배포를 진행했고 배포는 정말 빠르게 끝날 것 같았다.</p>
<p>그런데 문제가 발생했다. 노드들의 TCP 헬스체크가 전혀 되질 않는다. ㅠㅠ<br>
Deployment와 Service 선언서를 다시 배포해보고, 기억은 잘 나지 않지만 이것 저것 해봤다.<br>
왜지? 왜 HTTP 헬스체크는 되는데 TCP 헬스체크가 안되지?<br>
그리고 HTTP로 애플리케이션의 상태를 조회하는 API를 사용해봤다. 분명히 TCP 상태는 정상이다.</p>
<p>LB는 정상이다&hellip; 애플리케이션 TCP도 정상이다&hellip;<br>
그냥 딱 헬스체크만 안된다.</p>
<p>왜 안되지 생각하면서 이것저것 보는데,<br>
아뿔싸! EKS Service 셀렉터와 Pod 라벨을 다르게 해놨다.. ㅋㅋ<br>
정말 Dev와 QA환경은 다 같게 해놨는데 상용환경만 다르게 했다.</p>
<p>배포 예정 시간은 초과되었지만<br>
그 셀렉터를 바꾸고 리소스를 교체해서 다행이 정상적으로 잘 배포되었다.</p>
<p>그래서 어쨌든 이 배포의 교훈&hellip;</p>
<blockquote>
<p>마지막까지 자신만만하지 말자.<br>
LB도 정상이고 애플리케이션도 정상이라면 셀렉터와 라벨을 의심해보자.<br>
선언서를 잘 살펴보자. 에러 체크도 안된다. 휴먼 에러 조심!</p>
</blockquote>
<p>휴 그래도 하나의 심장 단련 경험을 했다.</p>
]]></content:encoded></item></channel></rss>