<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>DevOps on minjun's memory</title><link>https://jo-minjun.github.io/categories/devops/</link><description>Recent content in DevOps on minjun's memory</description><generator>Hugo -- gohugo.io</generator><language>kr</language><lastBuildDate>Mon, 09 Jan 2023 23:30:12 +0900</lastBuildDate><atom:link href="https://jo-minjun.github.io/categories/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Shell Script</title><link>https://jo-minjun.github.io/notes/shell-script/</link><pubDate>Mon, 09 Jan 2023 23:30:12 +0900</pubDate><guid>https://jo-minjun.github.io/notes/shell-script/</guid><description>Shell Script Shell이란 운영체제에서 커널과 사용자 사이를 이어주는 역할을 하는 명령어 해석기이다.
Shell은 bash sh csh zsh등이 있다.
Shell Script란 운영체제의 Shell을 이용해서 Shell 명령어들을 순차적으로 실행시켜주는 스크립트이다.
Shell Script를 사용하기 위해서는 다음과 같이 시작해야 한다.
#!/bin/bash #!/usr/bin/env bash #!/usr/bin/env python3 위와 같이 #!으로 시작하여 Shell의 경로를 선언해준다. 이를 쉬뱅이라 한다. 쉬뱅은 어느 인터프리터가 스크립트의 명령어를 해석할 지 가리킨다. 변수 변수 number=1 string=&amp;#34;string&amp;#34; echo &amp;#34;$number&amp;#34; echo &amp;#34;$string&amp;#34; echo &amp;#34;${number}&amp;#34; echo &amp;#34;${string}&amp;#34; 변수는 위와 같이 공백을 사용하지 않고 선언한다.</description></item><item><title>Linux 주요 커맨드와 옵션들</title><link>https://jo-minjun.github.io/notes/linux-command/</link><pubDate>Fri, 06 Jan 2023 00:01:11 +0900</pubDate><guid>https://jo-minjun.github.io/notes/linux-command/</guid><description>Linux 주요 커맨드와 옵션 커맨드 라인 단축키
ctrl + a: 커서를 라인 가장 앞으로 옮긴다. ctrl + e: 커서를 라인 가장 뒤로 옮긴다. ctrl + k: 커서를 기준으로 뒤쪽을 모두 지운다. 유틸리티 piping, redirect
&amp;lt;COMMAND&amp;gt; | &amp;lt;COMMAND&amp;gt; |를 기준으로 앞 커맨드의 표준 출력을 뒷 커맨드의 표준 입력으로 사용한다. curl -s https://apigateway.dev1.meshdev.io/neogeo/management/info | jq &amp;lt;COMMAND&amp;gt; &amp;lt; &amp;lt;FILE&amp;gt; &amp;lt;COMMAND&amp;gt; &amp;gt; &amp;lt;FILE&amp;gt; &amp;lt;COMMAND&amp;gt; 1&amp;gt; &amp;lt;FILE&amp;gt; # 위 명령어와 같다. &amp;lt;COMMAND&amp;gt; 2&amp;gt; &amp;lt;FILE&amp;gt; # 커맨드의 에러 내용을 파일에 덮어 쓴다.</description></item><item><title>Linux 배포판 별 패키지 매니저</title><link>https://jo-minjun.github.io/notes/linux-package-manager/</link><pubDate>Thu, 05 Jan 2023 20:45:12 +0900</pubDate><guid>https://jo-minjun.github.io/notes/linux-package-manager/</guid><description>배포판 별 패키지 매니저 alpine 참고: Working with the Alpine Package Keeper (apk)
apk [&amp;lt;OPTIONS&amp;gt;...] COMMAND [&amp;lt;ARGUMENTS&amp;gt;...] 존재하는 리포지터리(repository)는 다음과 같다. main 공식적으로 지원하는 패키지들 community testing 리포지터리에서 테스트된 패키지들 testing 새롭거나, 손상됐거나, 오래된 테스트가 필요한 패키지들 Updating repository
apk update 리포지터리 인덱스를 업데이트한다. Searching
apk search [&amp;lt;OPTIONS&amp;gt;...] PATTERN... 리포지터리에서 PATTERN을 검색한다. Option Description &amp;ndash;description -d 설명에서 PATTERN을 검색한다. &amp;ndash;exact -e 패키지 이름을 정확하게 매칭시킨다. Installing
apk add [&amp;lt;OPTIONS&amp;gt;...] PACKAGES... 패키지를 설치한다.</description></item><item><title>Docker 스터디</title><link>https://jo-minjun.github.io/notes/docker-study/</link><pubDate>Wed, 04 Jan 2023 23:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/docker-study/</guid><description>Docker Docker란 애플리케이션 개발, 실행, 공유를 위한 오픈 플랫폼이다. 호스트 시스템과 격리된 환경에서 애플리케이션을 패키징하고 실행할 수 있게 해준다. (컨테이너) 협업 시 각 로컬에 개발환경을 설치하지 않아도 된다. 서버 관리에 편리하다. https://docs.docker.com/get-started/overview/
도커 명령어 크게 4가지 종류의 명령어가 있다. Registry 관련 Image 관련 Container 관련 Compose 관련 명령어의 자세한 옵션과 설명은 아래 문서를 참조
docker
Registry 관련 login
docker login Registry에 로그인한다. logout
docker logout Registry에서 로그아웃한다. search
docker search [OPTIONS] &amp;lt;TERM&amp;gt; Registry에 있는 이미지를 검색한다.</description></item></channel></rss>