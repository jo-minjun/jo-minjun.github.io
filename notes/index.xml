<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Notes on minjun's memory</title><link>https://jo-minjun.github.io/notes/</link><description>Recent content in Notes on minjun's memory</description><image><title>minjun's memory</title><url>https://jo-minjun.github.io/logo.png</url><link>https://jo-minjun.github.io/logo.png</link></image><generator>Hugo -- gohugo.io</generator><language>kr</language><lastBuildDate>Thu, 13 Jul 2023 18:40:44 +0900</lastBuildDate><atom:link href="https://jo-minjun.github.io/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>사소한 ThreadLocal Tips</title><link>https://jo-minjun.github.io/notes/threadlocal-tips/</link><pubDate>Thu, 13 Jul 2023 18:40:44 +0900</pubDate><guid>https://jo-minjun.github.io/notes/threadlocal-tips/</guid><description>가능하다면 로컬 변수를 사용합니다. 프레임워크에 위임합니다. e.g. RequestContextHolder ConcurrentHashMap 같은 요소를 ThreadLocal 변수로 변경할 수 있는지 검토합니다. public class UserContextHolder { public static ThreadLocal&amp;lt;User&amp;gt; holder = new ThreadLocal(); } class HoldingService { public void holdUser() { // Set user for this thread User user = getUser(); UserContextHolder.holder.set(user); } } class SomeService { public void getUser() { // Get user for this thread User user = UserContextHolder.holder.get(); // Remove user; user no longer required UserContextHolder.</description><content:encoded><![CDATA[<ol>
<li>가능하다면 로컬 변수를 사용합니다.</li>
<li>프레임워크에 위임합니다.
<ul>
<li>e.g. <code>RequestContextHolder</code></li>
</ul>
</li>
<li><code>ConcurrentHashMap</code> 같은 요소를 <code>ThreadLocal</code> 변수로 변경할 수 있는지 검토합니다.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserContextHolder</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ThreadLocal<span style="color:#f92672">&lt;</span>User<span style="color:#f92672">&gt;</span> holder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ThreadLocal<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HoldingService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">holdUser</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Set user for this thread
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    User user <span style="color:#f92672">=</span> getUser<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    UserContextHolder<span style="color:#f92672">.</span><span style="color:#a6e22e">holder</span><span style="color:#f92672">.</span><span style="color:#a6e22e">set</span><span style="color:#f92672">(</span>user<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SomeService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">getUser</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Get user for this thread
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    User user <span style="color:#f92672">=</span> UserContextHolder<span style="color:#f92672">.</span><span style="color:#a6e22e">holder</span><span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Remove user; user no longer required
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    UserContextHolder<span style="color:#f92672">.</span><span style="color:#a6e22e">holder</span><span style="color:#f92672">.</span><span style="color:#a6e22e">remove</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>12 factor app (15 factor app)</title><link>https://jo-minjun.github.io/notes/12-factor-app/</link><pubDate>Fri, 24 Feb 2023 00:02:51 +0900</pubDate><guid>https://jo-minjun.github.io/notes/12-factor-app/</guid><description>Introduction 12 factor app은 서비스형 소프트웨어를 구성하기 위한 방법론입니다.
개발 언어/프레임워크에 상관없는 이식성과 플랫폼 호환성 향상을 위한 디자인 원칙입니다. 애플리케이션의 수평적 확장이 용이하도록 합니다. 애플리케이션 확장 가능성 CI/CD에 용이성 플랫폼간 이식성 기본적인 기대치, 정책 설정 1. Codebase 형상관리 시스템에서 하나의 코드베이스를 관리하면서, 다수에 배포한다. 하나의 코드베이스에 여러개의 애플리케이션 코드가 있다면 12 factor app 위반입니다.
코드베이스는 모든 배포에 사용되지만 각 배포는 다른 버전이 사용될 수 있습니다.
2. Dependencies 의존성을 명시적으로 선언하고 분리한다.</description><content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>12 factor app은 서비스형 소프트웨어를 구성하기 위한 방법론입니다.</p>
<ul>
<li>개발 언어/프레임워크에 상관없는 이식성과 플랫폼 호환성 향상을 위한 디자인 원칙입니다.</li>
<li>애플리케이션의 수평적 확장이 용이하도록 합니다.</li>
</ul>
<blockquote>
<ul>
<li>애플리케이션 확장 가능성</li>
<li>CI/CD에 용이성</li>
<li>플랫폼간 이식성</li>
<li>기본적인 기대치, 정책 설정</li>
</ul>
</blockquote>
<h2 id="1-codebase">1. Codebase</h2>
<h3 id="형상관리-시스템에서-하나의-코드베이스를-관리하면서-다수에-배포한다">형상관리 시스템에서 하나의 코드베이스를 관리하면서, 다수에 배포한다.</h3>
<p>하나의 코드베이스에 여러개의 애플리케이션 코드가 있다면 12 factor app 위반입니다.</p>
<p>코드베이스는 모든 배포에 사용되지만 각 배포는 다른 버전이 사용될 수 있습니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/codebase.png" alt="codebase"  />
</p>
<h2 id="2-dependencies">2. Dependencies</h2>
<h3 id="의존성을-명시적으로-선언하고-분리한다">의존성을 명시적으로 선언하고 분리한다.</h3>
<p>의존성은 명시적으로 선언되어, 신규 개발자 또는 시스템 설정을 편리하게 해야합니다.</p>
<p>대부분의 프로그래밍 언어는 패키징 시스템을 제공하기 때문에 새로 설정을 해야할 때는 언어와 패키지 매니저만 설치하면 됩니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/dependencies.png" alt="dependencies"  />
</p>
<h2 id="3-config">3. Config</h2>
<h3 id="설정값을-환경에-저장한다">설정값을 환경에 저장한다.</h3>
<p>애플리케이션 설정값은 배포 환경에 따라 달라지는 값들입니다.</p>
<ul>
<li>데이터베이스 또는 Backing 서비스를 처리하는 리소스</li>
<li>Amazon S3 또는 트위터와 같은 외부 서비스에 대한 인증 정보</li>
<li>배포 환경 호스트 이름과 같은 값</li>
</ul>
<p><img loading="lazy" src="/images/notes/12-factor-app/config.png" alt="config"  />
</p>
<h2 id="4-backing-services">4. Backing services</h2>
<h3 id="backing-service">Backing service</h3>
<p>Backing 서비스는 데이터베이스와, 메시징, 메일 서비스 등 통해 연결된 모든 서비스입니다.</p>
<p>12 factor app은 Backing 서비스를 모두 리소스로 취급하고, 설정에서 값을 읽어서 처리하여 느슨하게 연결합니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/backing-service.png" alt="backing-service"  />
</p>
<h2 id="5-build-release-run">5. Build, release, run</h2>
<h3 id="빌드와-실행-단계를-엄격하게-구분한다">빌드와 실행 단계를 엄격하게 구분한다.</h3>
<p>코드베이스는 3단계를 거쳐 배포되고, 엄격하게 구분되어야 합니다.</p>
<ol>
<li>Build: 지정된 코드 버전을 사용하여 의존성을 가져오고 컴파일합니다.</li>
<li>Release: 컴파일된 결과물과 현재 배포 환경의 설정을 연결합니다. Release 단계의 결과물은 즉시 실행될 수 있습니다.</li>
<li>Run: 애플리케이션을 실행합니다.</li>
</ol>
<p>코드 변경은 반드시 빌드 단계에서만 이루어져야만 하며 만들어진 Release 결과는 변경될 수 없고, 이전 버전으로 롤백이 가능해야합니다.</p>
<h2 id="6-processes">6. Processes</h2>
<h3 id="애플리케이션을-하나-이상의-stateless-프로세스로-실행한다">애플리케이션을 하나 이상의 Stateless 프로세스로 실행한다.</h3>
<p>애플리케이션은 실행 환경에서 하나 이상의 프로세스로 실행됩니다.</p>
<p>상태는 데이터베이스와 같은 상태 저장 서비스에 저장해야 하며, 애플리케이션은 Stateless하게 유지해야 합니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/processes.png" alt="processes"  />
</p>
<h2 id="7-port-binding">7. Port binding</h2>
<h3 id="포트-바인딩을-통해-서비스-제공을-한다">포트 바인딩을 통해 서비스 제공을 한다.</h3>
<p>애플리케이션은 포트를 바인딩하여 서비스를 제공해야 합니다.</p>
<p>포트를 통해 서비스를 제공함으로써 다른 애플리케이션의 Backing 서비스가 될 수 있습니다.</p>
<h2 id="8-concurrency">8. Concurrency</h2>
<h3 id="프로세스-모델을-통해-수평적-확장을-한다">프로세스 모델을 통해 수평적 확장을 한다.</h3>
<p>애플리케이션은 리소스 추가를 통한 수직 확장 뿐만 아니라, 수를 늘리는 수평적 확장이 가능해야 합니다.</p>
<ol start="6">
<li>Processes를 준수함으로써 확장하거나 축소할 수 있습니다.</li>
</ol>
<h2 id="9-disposability">9. Disposability</h2>
<h3 id="빠른-시작과-그레이스풀-셧다운으로-안정성을-최대화한다">빠른 시작과 그레이스풀 셧다운으로 안정성을 최대화한다.</h3>
<p>배포와 수평 확장시 빠른 애플리케이션 구동을 위해 필요합니다.</p>
<p>종료 시그널을 받은 애플리케이션은 새로운 요청을 받지 않고, 기존 요청을 처리한 후 안정적으로 종료되어야 합니다.</p>
<h2 id="10-devprod-parity">10. Dev/prod parity</h2>
<h3 id="개발-스테이징-상용-환경을-최대한-비슷하게-유지한다">개발, 스테이징, 상용 환경을 최대한 비슷하게 유지한다.</h3>
<p>Local에서는 H2 database를 사용하고 상용에서는 MySQL을 사용하는 것과 같은 차이를 줄이는 것입니다.</p>
<p>12 factor app은 개발과 상용 환경 사이의 차이를 줄여 지속적인 배포가 가능하도록 해야합니다.</p>
<h2 id="11-logs">11. Logs</h2>
<h3 id="로그를-이벤트-스트림으로-처리한다">로그를 이벤트 스트림으로 처리한다.</h3>
<p>애플리케이션은 로그에 관여하면 안되며, 단순히 버퍼링없이 출력할 뿐입니다.</p>
<p>애플리케이션은 언제든지 생성되고 삭제될 수 있습니다. 따라서 이벤트는 별도 저장소에 보관되는 것이 좋습니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/logs.png" alt="logs"  />
</p>
<h2 id="12-admin-processes">12. Admin processes</h2>
<h3 id="어드민관리-작업을-일회성-프로세스로-실행해야-한다">어드민/관리 작업을 일회성 프로세스로 실행해야 한다.</h3>
<p>개발자는 종종 일회성으로 애플리케이션 관리 작업을 수행해야 하며, 작업을 스크립트화하여 한번에 실행할 수 있도록 해야합니다.</p>
<ul>
<li>데이터베이스 마이그레이션</li>
<li>일회성 스크립트 실행</li>
</ul>
<p>관리 스크립트는 애플리케이션과 같은 코드베이스에서 같은 설정 값을 사용해야 합니다.</p>
<hr>
<blockquote>
<p>케빈 허프만이 “Beyond the 12 factor app”을 통해 MSA 환경에 적합한 3가지 요소를 제시했다.</p>
</blockquote>
<h2 id="13-api-first">13. API first</h2>
<h3 id="api-스펙-정의를-우선으로-한다">API 스펙 정의를 우선으로 한다.</h3>
<p>API 스펙을 먼저 정의하여 어떤 스키마로 통신할지 결정해야 합니다.</p>
<p>API first를 통해 클라이언트와 서버가 동시에 작업을 진행할 수 있습니다.</p>
<h2 id="14-telemetry">14. Telemetry</h2>
<h3 id="애플리케이션-및-리소스를-모니터링한다">애플리케이션 및 리소스를 모니터링한다.</h3>
<p>애플리케이션 및 CPU, RAM등 리소스를 모니터링하여 성능, 이벤트 및 헬스 체크 등을 확인할 수 있습니다.</p>
<p>서비스 관리 및 경고 알람 트리거 설정에 도움을 줍니다.</p>
<h2 id="15-security">15. Security</h2>
<h3 id="보안-정책이-적절한지-확인한다">보안 정책이 적절한지 확인한다.</h3>
<p>API, DB 등 보안 정책이 적절한지 확인해야 합니다.</p>
<p>API는 OAuth 등으로 보호되어야 하며 HTTPS를 이용해서 노출시켜야 합니다.</p>
]]></content:encoded></item><item><title>Kubernetes: pod와 service</title><link>https://jo-minjun.github.io/notes/kubernetes-pod-service/</link><pubDate>Wed, 11 Jan 2023 23:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/kubernetes-pod-service/</guid><description>Pod container Pod에는 container가 여러개 있을 수 있으며, localhost로 접근할 수 있다. Pod가 생성될 때는 IP가 할당되며, 이 IP를 통해 Pod에 접근할 수 있다. 쿠버네티스 클러스터 내에서만 IP로 접근 가능하다. Pod가 재생성되면 IP 주소가 바뀐다. apiVersion: v1 # 하나의 Pod kind: Pod metadata: name: pod-1 spec: # 여러 개의 container containers: - name: container1 image: image1 ports: - containerPort: 8000 - name: container2 image: image2 ports: - containerPort: 8080 label Pod 뿐만 아니라 다른 오브젝트에도 사용할 수 있지만, Pod에서 가장 많이 사용된다.</description><content:encoded><![CDATA[<h2 id="pod">Pod</h2>
<h3 id="container">container</h3>
<ul>
<li>Pod에는 container가 여러개 있을 수 있으며, localhost로 접근할 수 있다.</li>
<li>Pod가 생성될 때는 IP가 할당되며, 이 IP를 통해 Pod에 접근할 수 있다.
<ul>
<li>쿠버네티스 클러스터 내에서만 IP로 접근 가능하다.</li>
</ul>
</li>
<li>Pod가 재생성되면 IP 주소가 바뀐다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 하나의 Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">pod-1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 여러 개의 container</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">container1</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">image</span>: <span style="color:#ae81ff">image1</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8000</span>
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">container2</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">image</span>: <span style="color:#ae81ff">image2</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>
</span></span></code></pre></div><h3 id="label">label</h3>
<ul>
<li>Pod 뿐만 아니라 다른 오브젝트에도 사용할 수 있지만, Pod에서 가장 많이 사용된다.</li>
<li>목적에 따라 오브젝트를 분류하고 분류된 오브젝트만 연결하기 위해서 사용한다.</li>
<li>key:value</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Pod1                      Pod2                      Pod3
</span></span><span style="display:flex;"><span>type:web                  type:db                   type:server
</span></span><span style="display:flex;"><span>env:dev                   env:dev                   env:dev
</span></span><span style="display:flex;"><span><span style="color:#f92672">================================================================</span>
</span></span><span style="display:flex;"><span>Pod4                      Pod5                      Pod6
</span></span><span style="display:flex;"><span>type:web                  type:db                   type:server
</span></span><span style="display:flex;"><span>env:prod                  env:prod                  env:prod
</span></span></code></pre></div><ul>
<li>위와 같은 dev/prod 환경에서 web/db/server 종류가 있는 경우
<ul>
<li>웹 개발자가 web만 보고 싶다면 type:web label인 Pod만 서비스에 연결해서 확인하면 된다.</li>
<li>prod환경 운영자는 env:prod label인 Pod만 서비스에 연결해서 확인하면 된다.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># Pod 생성</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">pod-2</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">type</span>: <span style="color:#ae81ff">db</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">env</span>: <span style="color:#ae81ff">dev</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">container</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">image</span>: <span style="color:#ae81ff">image</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># Service 생성</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">svc-1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">type</span>: <span style="color:#ae81ff">web</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">-port</span>: <span style="color:#ae81ff">8080</span>
</span></span></code></pre></div><h3 id="node-scheduler">node scheduler</h3>
<ul>
<li>Pod는 Node들 중 하나에 올라가야 한다.</li>
<li>수동으로 지정하는 방법과 자동으로 지정되는 방법이 있다.</li>
<li>수동
<ul>
<li>Node를 생성할 때 label을 설정하고 Pod를 만들 때 Node를 선택한다.</li>
<li><strong>NodeSelector</strong>, NodeAffinity, Pod Affinity, Anti-Affinity, Toleration, Taint…</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">pod-3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">nodeSelector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">hostname</span>: <span style="color:#ae81ff">node1</span> <span style="color:#75715e"># node에 지정한 label의 key, value</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">container</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">image</span>: <span style="color:#ae81ff">image</span>
</span></span></code></pre></div></li>
<li>자동
<ul>
<li>Pod가 요구하는 리소스 할당량과 각 Node의 리소스 할당 가능량을 계산해서 scheduler가 선택한다.</li>
</ul>
</li>
</ul>
<h2 id="service">Service</h2>
<ul>
<li>Service는 자신의 IP를 가지고 있다.</li>
<li>Service를 Pod에 연결해 놓으면 Service의 IP를 가지고 Pod에 접근할 수 있다.
<ul>
<li>Pod의 IP를 가지고 접근할 수도 있지만, Pod의 IP는 변경될 수 있다.</li>
</ul>
</li>
</ul>
<h3 id="clusterip">ClusterIP</h3>
<ul>
<li>가장 기본적인 Service이다.</li>
<li>클러스터 내에서만 접근이 가능한 IP이다.
<ul>
<li>클러스터 내의 오브젝트에서는 접근 가능하지만 외부에서는 접근할 수 없다.</li>
</ul>
</li>
<li>하나의 Pod 뿐만아니라 여러개의 Pod를 연결할 수 있다.
<ul>
<li>요청이 오면 여러개의 Pod로 분산도 해준다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">svc-1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># label을 이용해서 Pod 연결</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">pod</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 9000번 포트로 요청이 들어오면 8080번 포트로 연결이도 된다.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">port</span>: <span style="color:#ae81ff">9000</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">type</span>: <span style="color:#ae81ff">ClusterIP</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">pod-1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">container</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">image</span>: <span style="color:#ae81ff">tmkube:app</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">-containerPort</span>: <span style="color:#ae81ff">8080</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="nodeport">NodePort</h3>
<ul>
<li>Service에 IP가 포함되어 있어 ClusterIP와 같은 기능이 포함되어 있다.</li>
<li>클러스터 내부 모든 Node에 포트를 할당하여 Node의 IP로 접근을 하면 Service로 트래픽이 전달된다.
<ul>
<li>Service는 다시 자신에게 연결된 Pod로 트래픽을 전달한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">svc-2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">pod</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">port</span>: <span style="color:#ae81ff">9000</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">nodePort</span>: <span style="color:#ae81ff">30000</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">type</span>: <span style="color:#ae81ff">NodePort</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 이 옵션을 사용하면 Service가 요청이 들어온 Node의 Pod로 트래픽을 전달한다.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">externalTrafficPolicy</span>: <span style="color:#ae81ff">local</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="load-balancer">Load Balancer</h3>
<ul>
<li>NodePort의 특징을 포함하고 있다.</li>
<li>Load Balancer라는 오브젝트가 생성되어 각 Node에 트래픽을 분산 시킨다.</li>
<li>외부에서 Load Balancer에 접근하기 위한 IP는 기본적으로 설정되어 있지 않다.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">svc-3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">pod</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">port</span>: <span style="color:#ae81ff">9000</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">nodePort</span>: <span style="color:#ae81ff">30000</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">type</span>: <span style="color:#ae81ff">LoadBalancer</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="externalname">ExternalName</h3>
<ul>
<li>클러스터 외부 서비스에 접근하기 위해 사용하는 서비스이다.</li>
</ul>
]]></content:encoded></item><item><title>Introduce Kubernetes</title><link>https://jo-minjun.github.io/notes/introduce-kubernetes/</link><pubDate>Tue, 10 Jan 2023 21:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/introduce-kubernetes/</guid><description>What, Why Kubernetes? What 쿠버네티스는 컨테이너들을 운영, 관리하는 컨테이너 오케스트레이터이다. 컨테이너 오케스트레이터는 개별 컨테이너의 배포, 관리, 확장, 네트워킹을 자동화해준다. Why 물리 서버에서 동작하는 서비스는 리소스 관리를 효율적으로 할 수 없다. 3개의 서비스에 트래픽이 몰리는 시간대가 다르다. 각 서비스는 최소 트래픽 때 0.5대, 최대 트래픽 때 3개의 서버가 사용된다. 이 경우 총 9대의 서버가 사용된다. 배포시에도 비효율적이다. 중단이 가능한 경우 모든 서비스를 내린 후, 업데이트하여 다시 올린다. 중단이 불가능하면 서비스를 하나씩 내리고 하나씩 업데이트하여 다시 올린다.</description><content:encoded><![CDATA[<h2 id="what-why-kubernetes">What, Why Kubernetes?</h2>
<h3 id="what">What</h3>
<ul>
<li>쿠버네티스는 컨테이너들을 운영, 관리하는 <strong>컨테이너 오케스트레이터</strong>이다.</li>
<li>컨테이너 오케스트레이터는 개별 컨테이너의 배포, 관리, 확장, 네트워킹을 자동화해준다.</li>
</ul>
<h3 id="why">Why</h3>
<ul>
<li>물리 서버에서 동작하는 서비스는 리소스 관리를 효율적으로 할 수 없다.
<ul>
<li>3개의 서비스에 트래픽이 몰리는 시간대가 다르다.</li>
<li>각 서비스는 최소 트래픽 때 0.5대, 최대 트래픽 때 3개의 서버가 사용된다.</li>
<li>이 경우 총 9대의 서버가 사용된다.</li>
</ul>
</li>
<li>배포시에도 비효율적이다.
<ul>
<li>중단이 가능한 경우 모든 서비스를 내린 후, 업데이트하여 다시 올린다.</li>
<li>중단이 불가능하면 서비스를 하나씩 내리고 하나씩 업데이트하여 다시 올린다.</li>
</ul>
</li>
</ul>
<p>→ 쿠버네티스를 사용하면 리소스 관리를 효율적으로 할 수 있다.</p>
<ul>
<li>시간대 별로 평균 서버 필요량을 예측하여 다음과 같은 운용이 가능하다.
<ul>
<li>평균 4개의 서버</li>
<li>A서비스에 트래픽이 몰리는 경우 3개 서버에 A서비스 할당, 1개 서버에 B, C 서비스 할당</li>
</ul>
</li>
<li>서버에 장애가 발생한 경우에 유연하게 대처할 수 있다.
<ul>
<li>쿠버네티스에는 Auto Healing 기능이 있다.</li>
<li>여분의 서버 1개가 있는 경우 자동으로 여분 서버에 서비스를 옮긴다.</li>
</ul>
</li>
<li>배포할 때는 Deployment Object를 통해서 자동화 해준다.</li>
</ul>
<p>→ 서버가 효율적인 개수를 유지하고 자동화 됨으로써 유지보수 비용이 감소한다.</p>
<h2 id="overview">Overview</h2>
<p><img loading="lazy" src="/images/notes/introduce-kubernetes/1.png" alt="1"  />
</p>
<ul>
<li>서버 한대는 Master, 나머지 서버는 Node가 된다.</li>
</ul>
<p>→ 이것이 연결되어 하나의 쿠버네티스 클러스터가 된다.</p>
<ul>
<li>Master는 쿠버네티스의 기능을 컨트롤하고 Node는 리소스를 제공한다.
<ul>
<li>클러스터의 리소스를 늘리고 싶다면 Node를 추가하면 된다.</li>
</ul>
</li>
<li>namespace를 이용해서 쿠버네티스 오브젝트를 독립된 공간으로 분리시켜준다.</li>
<li>namespace에는 쿠버네티스 최소 배포 단위인 Pod가 있고, Pod에 IP를 할당되도록 연결되는 Service가 있다.
<ul>
<li>Service는 다른 namespace와는 연결될 수 없다.</li>
</ul>
</li>
<li>Pod에는 여러 Container가 있을 수 있다. 또한 Volume을 마운트해서 Pod의 데이터가 증발되지 않도록 한다.</li>
<li>namespace에는 ResourceQuota와 LimitRange를 설정해서 namespace의 리소스의 양을 제한시킬 수 있다.</li>
<li>ConfigMap과 Secret으로 Pod의 컨테이너에 환경변수를 설정할 수 있게 한다.</li>
<li>여러가지 컨트롤러는 Pod들을 관리한다.</li>
<li>Replication Controller, ReplicaSet은 Pod가 죽으면 다시 구동시키거나 스케일 인/아웃을 해준다.</li>
<li>Deployment는 배포 후에 Pod를 새 버전으로 업그레이드하고, 문제가 생기면 롤백 해준다.</li>
<li>DaemonSet은 한 Node에 하나의 Pod만 사용되도록 해준다.</li>
<li>CronJob은 특정 Job을 주기적으로 수행되도록 해준다.
<ul>
<li>Job은 특정 작업만 하고 종료되는 것이다.</li>
</ul>
</li>
</ul>
<h2 id="components">Components</h2>
<p><img loading="lazy" src="/images/notes/introduce-kubernetes/2.png" alt="2"  />
</p>
<ul>
<li>master 노드
<ul>
<li>kube-apiserver</li>
<li>etcd</li>
<li>kube-scheduler</li>
<li>kube-controller-manager</li>
</ul>
</li>
<li>worker 노드
<ul>
<li>kubelet</li>
<li>kube-proxy</li>
</ul>
</li>
</ul>
<h3 id="kube-apiserver">kube-apiserver</h3>
<ul>
<li>쿠버네티스 클러스터의 API를 사용할 수 있게 해준다.</li>
<li>kubectl과 같은 클라이언트로부터 요청 받아낸다.</li>
</ul>
<h3 id="etcd">etcd</h3>
<ul>
<li>key-value 형식의 데이터 저장소이다.</li>
</ul>
<h3 id="kube-scheduler">kube-scheduler</h3>
<ul>
<li>Node들의 리소스 상태와 kube-apiserver를 확인하면서, Pod에 Node 정보를 할당한다.</li>
</ul>
<h3 id="kube-controller-manager">kube-controller-manager</h3>
<ul>
<li>Controller들을 실행한다.</li>
</ul>
<h3 id="kubelet">kubelet</h3>
<ul>
<li>kube-apiserver를 확인하면서 Pod에 자신의 Node 정보가 할당된 것이 있으면 Pod를 생성한다.
<ul>
<li>컨테이너를 생성하고 kube-proxy에 네트워크 생성 요청을 한다.</li>
</ul>
</li>
</ul>
<h3 id="kube-proxy">kube-proxy</h3>
<ul>
<li>네트워크 규칙을 관리하고 컨테이너가 네트워크를 사용할 수 있도록 한다.</li>
</ul>
<h2 id="실습-환경-구축">실습 환경 구축</h2>
<ul>
<li>강의에서 소개된 환경이 아닌 minikube를 사용한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>minikube start <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --driver<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;docker&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --kubernetes-version<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;stable&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --nodes<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 실습을 위해 dashboard 사용</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 실제 업무에서는 secret 등의 값 노출을 막기위해 dashboard를 잘 사용하지 않는다.</span>
</span></span><span style="display:flex;"><span>minikube dashboard
</span></span></code></pre></div><ul>
<li>위와 같은 방법으로 master 1개, worker node 2개를 구축하고 dashboard를 사용할 수 있다.</li>
</ul>
]]></content:encoded></item><item><title>kubectl command</title><link>https://jo-minjun.github.io/notes/kubectl-command/</link><pubDate>Mon, 09 Jan 2023 23:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/kubectl-command/</guid><description>kubectl command 쿠버네티스 API를 사용하는 CLI 도구이다. kubectl [command] [TYPE] [NAME] [flags] [command] 하나 이상의 리소스에서 수행하는 동작을 지정한다. ex) create get describe delete [TYPE] 리소스 타입을 지정한다. 대소문자를 구분하지 않으며 단수형, 복수형, 약어를 지정할 수 있다. ex) pod pods po [NAME] 하나 이상의 리소스의 이름을 지정한다. 대소문자를 구분하며 리소스 이름을 지정하지 않으면 모든 리소스가 대상이 된다. 리소스가 모두 동일한 TYPE인 경우 ex) kubectl get pod name1 name2 리소스 타입을 개별로 지정하는 경우 ex) kubectl get pod/name1 replicaset/name2 [flags] 플래그를 지정한다.</description><content:encoded><![CDATA[<h2 id="kubectl-command">kubectl command</h2>
<ul>
<li>쿠버네티스 API를 사용하는 CLI 도구이다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl <span style="color:#f92672">[</span>command<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>TYPE<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>NAME<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>flags<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>[command]
<ul>
<li>하나 이상의 리소스에서 수행하는 동작을 지정한다.</li>
<li>ex) <code>create</code> <code>get</code> <code>describe</code> <code>delete</code></li>
</ul>
</li>
<li>[TYPE]
<ul>
<li>리소스 타입을 지정한다.</li>
<li>대소문자를 구분하지 않으며 단수형, 복수형, 약어를 지정할 수 있다.</li>
<li>ex) <code>pod</code> <code>pods</code> <code>po</code></li>
</ul>
</li>
<li>[NAME]
<ul>
<li>하나 이상의 리소스의 이름을 지정한다.</li>
<li>대소문자를 구분하며 리소스 이름을 지정하지 않으면 모든 리소스가 대상이 된다.</li>
<li>리소스가 모두 동일한 TYPE인 경우
<ul>
<li>ex) <code>kubectl get pod name1 name2</code></li>
</ul>
</li>
<li>리소스 타입을 개별로 지정하는 경우
<ul>
<li>ex) <code>kubectl get pod/name1 replicaset/name2</code></li>
</ul>
</li>
</ul>
</li>
<li>[flags]
<ul>
<li>플래그를 지정한다.</li>
<li>ex) <code>-A</code></li>
</ul>
</li>
</ul>
<h3 id="주요-명령어">주요 명령어</h3>
<table>
<thead>
<tr>
<th>command</th>
<th>description</th>
<th>example</th>
</tr>
</thead>
<tbody>
<tr>
<td>get</td>
<td>하나 이상의 리소스를 보여준다.</td>
<td>kubectl get pod</td>
</tr>
<tr>
<td>edit</td>
<td>서버의 리소스를 수정한다.</td>
<td>kubectl edit pod name1</td>
</tr>
<tr>
<td>delete</td>
<td>파일 또는 리소스를 삭제한다.</td>
<td>kubectl delete -f file.yaml kubectl delete pod name1</td>
</tr>
<tr>
<td>scale</td>
<td>deployment, replicaset 등의 scale을 조정한다.</td>
<td>kubectl scale replicaset name1 &ndash;replicas=3</td>
</tr>
<tr>
<td>top</td>
<td>CPU/memory 등 리소스 상태를 보여준다.</td>
<td>kubectl top pod kubectl top node</td>
</tr>
<tr>
<td>describe</td>
<td>리소스의 상세 정보를 보여준다.</td>
<td>kubectl describe -l key=value</td>
</tr>
<tr>
<td>logs</td>
<td>pod의 로그를 보여준다.</td>
<td>kubectl logs -f pod_name</td>
</tr>
<tr>
<td>exec</td>
<td>container에 커맨드를 실행시킨다.</td>
<td>kubectl exec -it pod_name &ndash; /bin/bash</td>
</tr>
<tr>
<td>port-forward</td>
<td>pod의 포트로 local 포트를 포워드한다.</td>
<td>kubectl port-forward pod_name 13231:80 kubectl replicaset/replicaset_name 13231:80 kubectl deployment/deployment_name 13231:80</td>
</tr>
<tr>
<td>cp</td>
<td>파일 또는 디렉터리를 복사한다. pod_name을 명시하지 않으면 local로 설정된다.</td>
<td>kubectl cp pod_name:path path</td>
</tr>
<tr>
<td>apply</td>
<td>리소스를 생성하거나 업데이트한다.</td>
<td>kubectl apply -f file.yaml</td>
</tr>
<tr>
<td>config</td>
<td>kubeconfig(~/.kube/config) 파일을 관리한다.</td>
<td>kubectl config view kubectl config use-context dev1</td>
</tr>
</tbody>
</table>
]]></content:encoded></item><item><title>Shell Script</title><link>https://jo-minjun.github.io/notes/shell-script/</link><pubDate>Mon, 09 Jan 2023 23:30:12 +0900</pubDate><guid>https://jo-minjun.github.io/notes/shell-script/</guid><description>Shell Script 쉘 스크립트로 만든 UP-DOWN 게임 Shell이란 운영체제에서 커널과 사용자 사이를 이어주는 역할을 하는 명령어 해석기이다.
Shell은 bash sh csh zsh등이 있다.
Shell Script란 운영체제의 Shell을 이용해서 Shell 명령어들을 순차적으로 실행시켜주는 스크립트이다.
Shell Script를 사용하기 위해서는 다음과 같이 시작해야 한다.
#!/bin/bash #!/usr/bin/env bash #!/usr/bin/env python3 위와 같이 #!으로 시작하여 Shell의 경로를 선언해준다. 이를 쉬뱅이라 한다. 쉬뱅은 어느 인터프리터가 스크립트의 명령어를 해석할 지 가리킨다. 변수 변수 number=1 string=&amp;#34;string&amp;#34; echo &amp;#34;$number&amp;#34; echo &amp;#34;$string&amp;#34; echo &amp;#34;${number}&amp;#34; echo &amp;#34;${string}&amp;#34; 변수는 위와 같이 공백을 사용하지 않고 선언한다.</description><content:encoded><![CDATA[<h2 id="shell-script">Shell Script</h2>
<ul>
<li><a href="https://github.com/jo-minjun/shell-script-up-down-game">쉘 스크립트로 만든 UP-DOWN 게임</a></li>
</ul>
<h3 id="shell이란">Shell이란</h3>
<p>운영체제에서 커널과 사용자 사이를 이어주는 역할을 하는 명령어 해석기이다.</p>
<p>Shell은 <code>bash</code> <code>sh</code> <code>csh</code> <code>zsh</code>등이 있다.</p>
<h3 id="shell-script란">Shell Script란</h3>
<p>운영체제의 Shell을 이용해서 Shell 명령어들을 순차적으로 실행시켜주는 스크립트이다.</p>
<p>Shell Script를 사용하기 위해서는 다음과 같이 시작해야 한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span></code></pre></div><ul>
<li>위와 같이 <code>#!</code>으로 시작하여 Shell의 경로를 선언해준다. 이를 <strong>쉬뱅</strong>이라 한다.</li>
<li><strong>쉬뱅</strong>은 어느 인터프리터가 스크립트의 명령어를 해석할 지 가리킨다.</li>
</ul>
<h2 id="변수">변수</h2>
<h3 id="변수-1">변수</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>number<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>string<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;string&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span>$number<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span>$string<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>number<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>string<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><ul>
<li>변수는 위와 같이 공백을 사용하지 않고 선언한다.</li>
<li>변수명은 대소문자를 구분한다.</li>
<li>변수명은 숫자를 포함할 수 있으나, 숫자로 시작할 수 없다.</li>
<li>변수에 숫자를 대입해도 문자열로 취급된다.</li>
<li>변수는 <code>$변수명</code> 또는 <code>${변수명}</code>으로 사용할 수 있다.</li>
</ul>
<h3 id="배열">배열</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>array<span style="color:#f92672">=(</span><span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#e6db74">&#34;c&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>array<span style="color:#f92672">+=(</span><span style="color:#e6db74">&#34;d&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>array[0]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>array[*]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${#</span>array[*]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><ul>
<li>배열은 각 원소를 공백으로 구분한다.</li>
<li>원소를 추가할 경우 <code>+=</code>으로 한다.</li>
<li><code>변수명[index]</code>를 사용해서 특정 인덱스(0 ~ n)의 원소에 접근할 수 있고, <code>변수명[*]</code>으로 모든 원소에 접근할 수 있다.</li>
<li><code>#변수명[*]</code>으로 원소의 수를 확인할 수 있다.</li>
</ul>
<h3 id="미리-정의된-변수">미리 정의된 변수</h3>
<table>
<thead>
<tr>
<th>변수</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>$0</td>
<td>쉘 스크립트의 파일명</td>
</tr>
<tr>
<td>$#</td>
<td>쉘 스크립트에 전달된 인자의 수</td>
</tr>
<tr>
<td>$$</td>
<td>쉘 스크립트의 PID</td>
</tr>
<tr>
<td>$1 ~ $n</td>
<td>쉘 스크립트에 전달된 인자 값</td>
</tr>
<tr>
<td>$*</td>
<td>쉘 스크립트에 전달된 인자들의 문자열</td>
</tr>
</tbody>
</table>
<h2 id="비교-연산자">비교 연산자</h2>
<h3 id="변수-비교-연산자">변수 비교 연산자</h3>
<table>
<thead>
<tr>
<th>연산자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>-z ${변수A}</td>
<td>변수A의 문자열 길이가 0이면 참</td>
</tr>
<tr>
<td>-n ${변수A}</td>
<td>변수A의 문자열 길이가 0이 아니면 참</td>
</tr>
<tr>
<td>${변수A} -eq ${변수B}</td>
<td>변수A와 변수B의 값이 같으면 참</td>
</tr>
<tr>
<td>${변수A} -ne ${변수B}</td>
<td>변수A와 변수B의 값이 다르면 참</td>
</tr>
<tr>
<td>${변수A} -gt ${변수B}</td>
<td>변수A의 값이 변수B의 값보다 크면 참</td>
</tr>
<tr>
<td>${변수A} -ge ${변수B}</td>
<td>변수A의 값이 변수B의 값보다 크거나 같으면 참</td>
</tr>
<tr>
<td>${변수A} -lt ${변수B}</td>
<td>변수A의 값이 변수B의 값보다 작으면 참</td>
</tr>
<tr>
<td>${변수A} -le ${변수B}</td>
<td>변수A의 값이 변수B의 값보다 작거나 같으면 참</td>
</tr>
<tr>
<td>연산1 -a 연산2</td>
<td>연산1과 연산2가 모두 참이면 참</td>
</tr>
<tr>
<td>연산1 -o 연산2</td>
<td>연산1과 연산2중 하나라도 참이면 참</td>
</tr>
</tbody>
</table>
<h3 id="파일디렉터리-비교-연산자">파일/디렉터리 비교 연산자</h3>
<table>
<thead>
<tr>
<th>연산자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d ${A}</td>
<td>A가 디렉터리면 참</td>
</tr>
<tr>
<td>-e ${A}</td>
<td>A파일이 존재하면 참</td>
</tr>
<tr>
<td>-L ${A}</td>
<td>A파일이 심볼릭 링크면 참</td>
</tr>
<tr>
<td>-r ${A}</td>
<td>A파일에 읽기 권한이 존재하면 참</td>
</tr>
<tr>
<td>-w ${A}</td>
<td>A파일에 쓰기 권한이 존재하면 참</td>
</tr>
<tr>
<td>-x ${A}</td>
<td>A파일에 실행 권한이 존재하면 참</td>
</tr>
<tr>
<td>-s ${A}</td>
<td>A파일의 크기가 0보다 크면 참</td>
</tr>
<tr>
<td>-f ${A}</td>
<td>A파일이 존재하면 참</td>
</tr>
<tr>
<td>${A} -nt ${B}</td>
<td>A파일이 B파일보다 최신 파일이면 참</td>
</tr>
<tr>
<td>${A} -ot ${B}</td>
<td>A파일이 B파일보다 이전 파일이면 참</td>
</tr>
<tr>
<td>${A} -ef ${B}</td>
<td>A파일이 B파일과 같은 파일이면 참</td>
</tr>
</tbody>
</table>
<ul>
<li>주로 <code>-d</code> <code>-f</code> 를 자주 사용한다.</li>
</ul>
<h2 id="제어문">제어문</h2>
<h3 id="분기문">분기문</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> 비교 연산자 <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> 비교 연산자 <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><ul>
<li><code>if</code>로 시작하고 <code>fi</code>로 끝난다.</li>
<li>분기문에서 비교 연산은 <code>[ 비교 연산자 ]; then</code> 구분을 사용한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">case</span> target in
</span></span><span style="display:flex;"><span>	값1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span>	값2|값3<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span>	*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">esac</span>
</span></span></code></pre></div><ul>
<li><code>case</code>로 시작하고 <code>esac</code>로 끝난다.</li>
<li><code>;;</code> 를 이용해서 break를 할 수 있다.</li>
</ul>
<h3 id="반복문">반복문</h3>
<p>반복문은 공통적으로 <code>do</code>로 시작하고 <code>done</code>으로 끝난다.</p>
<p><code>continue</code>와 <code>break</code>를 이용해서 반복문을 제어할 수 있다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>비교 연산자<span style="color:#f92672">)</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i in <span style="color:#e6db74">${</span>array[*]<span style="color:#e6db74">}</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><ul>
<li>배열의 각 요소에 접근한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>0..10<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><ul>
<li>0 ~ 10 범위의 값을 접근한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#f92672">((</span> i <span style="color:#f92672">=</span> 0; i &lt; 10; i++<span style="color:#f92672">))</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 실행</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><ul>
<li>0 ~ 10 범위의 값을 접근한다.</li>
</ul>
]]></content:encoded></item><item><title>Linux 주요 커맨드와 옵션들</title><link>https://jo-minjun.github.io/notes/linux-command/</link><pubDate>Fri, 06 Jan 2023 00:01:11 +0900</pubDate><guid>https://jo-minjun.github.io/notes/linux-command/</guid><description>Linux 주요 커맨드와 옵션 커맨드 라인 단축키
ctrl + a: 커서를 라인 가장 앞으로 옮긴다. ctrl + e: 커서를 라인 가장 뒤로 옮긴다. ctrl + k: 커서를 기준으로 뒤쪽을 모두 지운다. 유틸리티 piping, redirect
&amp;lt;COMMAND&amp;gt; | &amp;lt;COMMAND&amp;gt; |를 기준으로 앞 커맨드의 표준 출력을 뒷 커맨드의 표준 입력으로 사용한다. curl -s https://apigateway.dev1.meshdev.io/neogeo/management/info | jq &amp;lt;COMMAND&amp;gt; &amp;lt; &amp;lt;FILE&amp;gt; &amp;lt;COMMAND&amp;gt; &amp;gt; &amp;lt;FILE&amp;gt; &amp;lt;COMMAND&amp;gt; 1&amp;gt; &amp;lt;FILE&amp;gt; # 위 명령어와 같다. &amp;lt;COMMAND&amp;gt; 2&amp;gt; &amp;lt;FILE&amp;gt; # 커맨드의 에러 내용을 파일에 덮어 쓴다.</description><content:encoded><![CDATA[<h2 id="linux-주요-커맨드와-옵션">Linux 주요 커맨드와 옵션</h2>
<p><strong>커맨드 라인 단축키</strong></p>
<ul>
<li>ctrl + a: 커서를 라인 가장 앞으로 옮긴다.</li>
<li>ctrl + e: 커서를 라인 가장 뒤로 옮긴다.</li>
<li>ctrl + k: 커서를 기준으로 뒤쪽을 모두 지운다.</li>
</ul>
<h3 id="유틸리티">유틸리티</h3>
<p><strong>piping, redirect</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>&lt;COMMAND&gt; | &lt;COMMAND&gt;
</span></span></code></pre></div><ul>
<li><code>|</code>를 기준으로 앞 커맨드의 표준 출력을 뒷 커맨드의 표준 입력으로 사용한다.</li>
<li><code>curl -s https://apigateway.dev1.meshdev.io/neogeo/management/info | jq</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>&lt;COMMAND&gt; &lt; &lt;FILE&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;COMMAND&gt; &gt; &lt;FILE&gt;
</span></span><span style="display:flex;"><span>&lt;COMMAND&gt; 1&gt; &lt;FILE&gt; <span style="color:#75715e"># 위 명령어와 같다.</span>
</span></span><span style="display:flex;"><span>&lt;COMMAND&gt; 2&gt; &lt;FILE&gt; <span style="color:#75715e"># 커맨드의 에러 내용을 파일에 덮어 쓴다.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;COMMAND&gt; &gt;&gt; &lt;FILE&gt;
</span></span></code></pre></div><ul>
<li><code>&lt;</code>는 뒷 파일의 내용을 커맨드의 입력으로 사용한다.</li>
<li><code>&gt;</code>는 앞 커맨드의 결과를 파일 등에 덮어 쓴다.</li>
<li><code>&gt;&gt;</code>는 앞 커맨드의 결과를 파일 등에 추가한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cat <span style="color:#e6db74">&lt;&lt; EOT &gt; template.json
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;tag&#34;: &#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOT</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cat template.json
</span></span></code></pre></div><p><strong>grep</strong></p>
<ul>
<li>지정한 패턴이나 문자열에 매칭되는 내용만 출력한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>grep <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>PATTERN<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>FILE<span style="color:#f92672">]</span>
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-c</th>
<th>패턴이 일치하는 행의 수를 출력한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-i</td>
<td>대소문자를 구분하지 않는다.</td>
</tr>
<tr>
<td>-v</td>
<td>패턴이 일치하는 않는 내용만 출력한다.</td>
</tr>
<tr>
<td>-A <!-- raw HTML omitted --></td>
<td>패턴 일치 줄 이후 n개 라인을 출력한다.</td>
</tr>
<tr>
<td>-B <!-- raw HTML omitted --></td>
<td>패턴 일치 줄 이전 n개 라인을 출력한다.</td>
</tr>
</tbody>
</table>
<p><strong>watch</strong></p>
<ul>
<li>COMMAND의 결과를 계속해서 보여준다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>watch <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;COMMAND&gt;
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-d</th>
<th>변경된 부분을 표시한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-n <!-- raw HTML omitted --></td>
<td>m초 주기로 리프레쉬한다.</td>
</tr>
</tbody>
</table>
<p><strong>time</strong></p>
<ul>
<li>특정 명령어 또는 프로그램의 수행 시간을 보여준다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>time &lt;COMMAND&gt;
</span></span></code></pre></div><ul>
<li>real: 총 수행 시간</li>
<li>user: CPU가 사용자 영역에서 보낸 시간</li>
<li>sys: CPU가 커널 영역에서 보낸 시간</li>
</ul>
<p><strong>xargs</strong></p>
<ul>
<li>앞 커맨드의 수행 결과를 뒤 커맨드의 인자로 넘긴다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>&lt;COMMAND&gt; | xargs &lt;COMMAND&gt;
</span></span></code></pre></div><ul>
<li>아무 커맨드를 입력하지 않으면 <code>echo</code>가 수행된다.</li>
</ul>
<h3 id="파일dir">파일/DIR</h3>
<p><strong>cat</strong></p>
<ul>
<li>파일 이름을 받아서 내용을 터미널에 출력한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cat <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;FILE_NAME&gt;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cat name <span style="color:#75715e"># name 파일의 내용을 터미널에 출력한다.</span>
</span></span><span style="display:flex;"><span>cat name1 name2 <span style="color:#75715e"># name1, name2 파일의 내용을 터미널에 출력한다.</span>
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-b</th>
<th>줄번호를 출력한다. 비어있는 행은 포함하지 않는다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-n</td>
<td>줄번호를 출력한다. 비어있는 행을 포함한다.</td>
</tr>
<tr>
<td>-s</td>
<td>2개 이상의 빈 행을 한 행으로 출력한다.</td>
</tr>
</tbody>
</table>
<p><strong>touch</strong></p>
<ul>
<li>파일의 날짜와 시간을 수정하는 명령어다.</li>
<li>빈 파일을 생성하기 위해 자주 사용된다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>touch <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;FILE_NAME&gt; <span style="color:#75715e"># 파일이 없으면 생성하고, 접근 시간, 상태 변경 시간, 수정 시간을 현재로 변경</span>
</span></span></code></pre></div><p><strong>mkdir</strong></p>
<ul>
<li>디렉토리를 생성한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;DIRECTORY_NAME&gt;
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-m &ndash;mode</th>
<th>권한을 함께 부여한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p &ndash;parent</td>
<td>상위 디렉토리를 같이 생성한다.</td>
</tr>
</tbody>
</table>
<p><strong>rm</strong></p>
<ul>
<li>파일이나 디렉토리를 삭제한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rm <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;FILE_NAME | DIRECTORY_NAME&gt;
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-f &ndash;force</th>
<th>삭제 여부를 묻지 않는다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-r &ndash;recursive</td>
<td>해당 디렉토리와 해당 디렉토리 하위의 모든 파일과 디렉토리를 삭제한다.</td>
</tr>
</tbody>
</table>
<p><strong>tree</strong></p>
<ul>
<li>디렉토리의 하위 구조를 계층적으로 보여준다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>tree <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;DIRECTORY_NAME&gt;
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-L <!-- raw HTML omitted --></th>
<th>하위 구조의 레벨을 지정한다. (해당 레벨까지 출력)</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>파일은 제외하고 디렉토리만 출력한다.</td>
</tr>
</tbody>
</table>
<p><strong>echo</strong></p>
<ul>
<li>텍스트를 터미널에 출력한다.</li>
<li>텍스트에 특수문자가 있는 경우 <code>&quot;&lt;text&gt;&quot;</code>로 명시해주어야 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;TEXT&gt;
</span></span></code></pre></div><p><strong>sed</strong></p>
<p><a href="https://www.computerhope.com/unix/used.htm">Linux sed command help and examples</a></p>
<ul>
<li>파일을 수정하는 stream editor이다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sed OPTIONS... <span style="color:#f92672">[</span>SCRIPT<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>INPUT_FILE<span style="color:#f92672">]</span>
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-i</th>
<th>결과를 터미널에 출력하지 않고 파일에서 처리한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-r</td>
<td>정규식을 사용한다.</td>
</tr>
<tr>
<td>-n</td>
<td>적용 부분만 구분해서 출력한다.</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>&rsquo;s/문자1/문자2/'</th>
<th>문자1을 문자2로 대체한다. (/은 (공백)</th>
<th>. 으로 사용해도 된다.)</th>
</tr>
</thead>
<tbody>
<tr>
<td>&rsquo;n,ms/문자1/문자2/'</td>
<td>n ~ m 번 줄에서 문자1을 문자2로 대체한다.</td>
<td></td>
</tr>
<tr>
<td>&rsquo;n,mp'</td>
<td>n ~ m 번 줄을 출력한다.</td>
<td></td>
</tr>
<tr>
<td>&rsquo;n,md'</td>
<td>n ~ m 번 줄을 지운다.</td>
<td></td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gsed <span style="color:#e6db74">&#39;s/&#34;tag&#34;: ./&#34;tag&#34;: &#34;latest&#34;/g&#39;</span> template.json &gt; output.json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cat output.json
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>file: mail
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>billy@example.org
</span></span><span style="display:flex;"><span>tom@example.org
</span></span><span style="display:flex;"><span>jay@example.org
</span></span><span style="display:flex;"><span>root@example.org
</span></span></code></pre></div><ul>
<li>billy와 tom의 example.org만 example.com으로 변경하고 싶은 경우</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gsed -i -r <span style="color:#e6db74">&#39;s/^(billy|tom)@example.org/\1@example.com/&#39;</span> file
</span></span></code></pre></div><ul>
<li>1~2번 라인만 출력하고 싶은 경우</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gsed -n <span style="color:#e6db74">&#39;1,2p&#39;</span> file
</span></span></code></pre></div><ul>
<li>1~2번 라인을 지우고 출력하고 싶은 경우</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gsed <span style="color:#e6db74">&#39;1,2d&#39;</span> file
</span></span></code></pre></div><p><strong>tee</strong></p>
<ul>
<li>입력과 출력을 동시에 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>tee <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>FILE<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>출력을 redirection할 경우 파일이 root 권한이라면 실패한다.</li>
<li>이 경우 tee를 사용할 수 있다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo echo <span style="color:#e6db74">&#34;TEXT&#34;</span> &gt; ROOT_FILE <span style="color:#75715e"># permission denied</span>
</span></span><span style="display:flex;"><span>sudo echo <span style="color:#e6db74">&#34;TEXT&#34;</span> | tee ROOT_FILE
</span></span></code></pre></div><p><strong>less</strong></p>
<ul>
<li>내용을 터미널에 출력한다.</li>
<li>위 → 아래, 아래 → 위 방향으로 이동할 수 있다.</li>
<li>종료하려면 q를 눌러야 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>less file
</span></span></code></pre></div><p><strong>more</strong></p>
<ul>
<li>파일의 내용을 터미널에 출력한다.</li>
<li>위 → 아래 방향으로만 이동 가능하다.</li>
<li>가장 아래로 이동하면 more가 종료된다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>more file
</span></span></code></pre></div><p><strong>ls</strong></p>
<ul>
<li>디렉토리에 있는 파일이나 디렉토리를 출력한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ls <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>DIRECTORY<span style="color:#f92672">]</span>
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-a</th>
<th>모든 파일과 디렉토리를 보여준다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-l</td>
<td>사용자의 권한, 소유자, 크기, 날짜 등 디테일 정보를 보여준다.</td>
</tr>
</tbody>
</table>
<p><strong>which</strong></p>
<ul>
<li>특정 명령어의 위치를 출력한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>which <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> COMMAND
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-n <!-- raw HTML omitted --></th>
<th>옵션은 모든 위치에서의 명령어를 찾는다.</th>
</tr>
</thead>
</table>
<p><strong>head</strong></p>
<ul>
<li>파일의 앞 부분을 출력한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>head <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> FILE
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-n <!-- raw HTML omitted --></th>
<th>파일의 앞 부분 m줄 만큼 출력한다.</th>
</tr>
</thead>
</table>
<p><strong>tail</strong></p>
<ul>
<li>파일의 끝 부분을 출력한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>tail <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> FILE
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-n <!-- raw HTML omitted --></th>
<th>파일의 끝 부분 m줄 만큼 출력한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f</td>
<td>파일의 끝부터 10줄을 출력하고, 새로 입력되는 정보를 계속해서 출력한다.</td>
</tr>
<tr>
<td>-F</td>
<td>파일이 변경되어도 계속해서 추적하며 출력한다. (삭제되어도 다시 파일이 생기면 출력)</td>
</tr>
</tbody>
</table>
<p><strong>tar</strong></p>
<ul>
<li>여러개의 파일과 디렉토리를 하나의 파일로 묶거나 해제한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>tar <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;TARGET&gt;
</span></span><span style="display:flex;"><span>tar cvf name.tar ./dir <span style="color:#75715e"># tar 생성</span>
</span></span><span style="display:flex;"><span>tar xvf name.tar <span style="color:#75715e"># tar 해제</span>
</span></span></code></pre></div><table>
<thead>
<tr>
<th>c</th>
<th>tar 파일 생성</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td>tar 파일 해제</td>
</tr>
<tr>
<td>v</td>
<td>생성 또는 해제 시 파일 리스트 출력</td>
</tr>
<tr>
<td>t</td>
<td>tar에 포함된 내용 확인</td>
</tr>
<tr>
<td>f</td>
<td>파일 이름 지정</td>
</tr>
</tbody>
</table>
<p><strong>gzip / gunzip</strong></p>
<ul>
<li>gzip: 파일을 압축한다.</li>
<li>gunzip: gz파일을 해제한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gzip <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;TARGET&gt;
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-<!-- raw HTML omitted --></th>
<th>n(1 ~ 9)은 압축 속도이다. 압축 속도가 빠르면 압축률이 낮아진다. (1: 빠름, 9: 느림)</th>
</tr>
</thead>
<tbody>
<tr>
<td>-c</td>
<td>압축 결과를 출력하고 원본은 유지한다.</td>
</tr>
<tr>
<td>-d</td>
<td>압축을 해제한다.</td>
</tr>
<tr>
<td>-v</td>
<td>압축 시 자세한 정보를 출력한다. (진행률 등)</td>
</tr>
<tr>
<td>-r</td>
<td>디렉토리의 모든 파일을 압축한다.</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gunzip <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;TARGET&gt;
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-l</th>
<th>압축 파일 정보를 출력한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-v</td>
<td>해제 시 자세한 정보를 출력한다. (진행률 등)</td>
</tr>
<tr>
<td>-r</td>
<td>디렉토리의 모든 파일을 해제한다.</td>
</tr>
</tbody>
</table>
<p><strong>zip / unzip</strong></p>
<ul>
<li>zip: 파일 또는 디렉토리를 압축한다.</li>
<li>unzip: zip 파일을 해제한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>zip <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;ZIP_NAME.zip&gt; &lt;TARGET...&gt;
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-<!-- raw HTML omitted --></th>
<th>압축 정도 (0: store only ~ 9: compress better)</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>-e</td>
<td>압축 파일에 암호 적용</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>-s &lt;n(k</td>
<td>m</td>
<td>g</td>
<td>t)&gt;</td>
<td>분할 압축 (k: kilobytes, m: megabytes, g: gigabytes, t: terabytes)</td>
</tr>
<tr>
<td>-q</td>
<td>메시지 출력 제한</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>-r</td>
<td>하위 디렉토리의 파일과 숨겨진 파일을 포함한다.</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>upzip <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;TARGET&gt;
</span></span></code></pre></div><table>
<thead>
<tr>
<th>-d</th>
<th>특정 디렉토리에 zip을 해제한다.</th>
</tr>
</thead>
</table>
<p><strong>chmod</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chmod <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;MODE&gt; &lt;TARGET&gt;
</span></span></code></pre></div><ul>
<li>파일 또는 디렉토리의 권한 등을 변경한다.</li>
</ul>
<table>
<thead>
<tr>
<th>-R</th>
<th>지정한 모드를 하위 디렉토리 및 파일에 전부 적용한다.</th>
</tr>
</thead>
</table>
<table>
<thead>
<tr>
<th>000</th>
<th>모든 사용자가 r/w/x 불가능</th>
</tr>
</thead>
<tbody>
<tr>
<td>440</td>
<td>소유자 및 그룹은 r 가능, 그 외에는 불가능</td>
</tr>
<tr>
<td>664</td>
<td>소유자 및 그룹은 r/w 가능, 그 외에는 r만 가능</td>
</tr>
<tr>
<td>755</td>
<td>소유자는 r/w/x 가능, 그룹 및 그 외에는 r/x만 가능</td>
</tr>
<tr>
<td>777</td>
<td>모든 사용자가 r/w/x 가능</td>
</tr>
</tbody>
</table>
<h3 id="네트워크">네트워크</h3>
<p><strong>curl</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;URL&gt;
</span></span></code></pre></div><ul>
<li>여러 통신 프로토콜을 이용해서 데이터를 전송한다.</li>
</ul>
<table>
<thead>
<tr>
<th>-X <!-- raw HTML omitted --></th>
<th>HTTP METHOD를 지정한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-H <!-- raw HTML omitted --></td>
<td>HEADER 값을 지정한다.</td>
</tr>
<tr>
<td>-d <!-- raw HTML omitted --></td>
<td>BODY에 들어갈 값을 지정한다.</td>
</tr>
<tr>
<td>-T <!-- raw HTML omitted --></td>
<td>PUT 방식으로 파일을 업로드 한다.</td>
</tr>
<tr>
<td>-b <!-- raw HTML omitted --></td>
<td>쿠키를 지정한다.</td>
</tr>
<tr>
<td>-s</td>
<td>진행 상태, 에러 메세지 등을 보여주지 않는다.</td>
</tr>
<tr>
<td>-v</td>
<td>헤어 등의 데이터를 추가로 보여준다.</td>
</tr>
</tbody>
</table>
<p><strong>wget</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;URL&gt;
</span></span></code></pre></div><ul>
<li>웹에서 파일 다운로드를 한다.</li>
</ul>
<table>
<thead>
<tr>
<th>-c</th>
<th>중단된 파일 다운로드를 다시 시작한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b</td>
<td>파일 다운로드를 백그라운드로 한다.</td>
</tr>
<tr>
<td>-O <!-- raw HTML omitted --></td>
<td>파일의 이름을 지정한다.</td>
</tr>
</tbody>
</table>
<p><strong>nc</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nc <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>HOST<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>PORT<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>TCP 또는 UDP 프로토콜을 사용하는 네트워크 환경에서 데이터를 읽고 쓴다.</li>
<li>일반적으로 서버의 포트 상태를 확인과 접속 가능 여부를 확인하기 위해 사용한다.</li>
</ul>
<table>
<thead>
<tr>
<th>-z</th>
<th>포트 스캔만 진행한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-v</td>
<td>더 많은 정보를 출력한다.</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nc -z google.com <span style="color:#ae81ff">80</span>
</span></span></code></pre></div><p><strong>telnet</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>telnet <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>HOST<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>PORT<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>원격으로 호스트에 접속한다.</li>
</ul>
<table>
<thead>
<tr>
<th>-l <!-- raw HTML omitted --></th>
<th>접속할 ID를 지정</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>현재 사용자를 ID로 지정</td>
</tr>
</tbody>
</table>
<ul>
<li><code>telnet</code>만 입력하면 LINEMODE로 진입한다.</li>
</ul>
<table>
<thead>
<tr>
<th>?</th>
<th>사용법을 출력한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>logout</td>
<td>사용자가 로그아웃하며 접속을 해제한다.</td>
</tr>
<tr>
<td>open</td>
<td>지정한 호스트로 연결한다.</td>
</tr>
<tr>
<td>quit</td>
<td>텔넷을 종료한다.</td>
</tr>
<tr>
<td>status</td>
<td>텔넷의 상태를 출력한다.</td>
</tr>
<tr>
<td>…</td>
<td></td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>telnet google.com <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>GET / HTTP/1.1
</span></span></code></pre></div><p><strong>openssl</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># rsa 개인키 생성</span>
</span></span><span style="display:flex;"><span>openssl genrsa <span style="color:#f92672">[</span>-des3<span style="color:#f92672">]</span> -out PRIVATE_KEY_NAME.key <span style="color:#f92672">[</span>BIT_SIZE;1024, 2048<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># rsa 공개키 생성</span>
</span></span><span style="display:flex;"><span>openssl rsa -in PRIVATE_KEY_NAME.key -pubout -out PUBLIC_KEY_NAME.key
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 인증서 생성</span>
</span></span><span style="display:flex;"><span>openssl req -new -key PRIVATE_KEY_NAME.key <span style="color:#f92672">[</span>-days n<span style="color:#f92672">]</span> -out certification.csr
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HTTPS 통신</span>
</span></span><span style="display:flex;"><span>openssl s_client -connect google.com:443
</span></span></code></pre></div><ul>
<li>SSL/TLS 프로토콜을 이용하기 위한 오픈소스 라이브러리이다.</li>
<li><code># rsa 비밀키 생성</code>
<ul>
<li>공개키 암호화 방식의 개인키를 생성한다.</li>
<li><code>-des3</code> 옵션을 넣으면 des3 대칭키 알고리즘으로 한 번 더 암호화 해준다.
<ul>
<li>비밀키를 추가로 요구한다.</li>
</ul>
</li>
</ul>
</li>
<li><code># rsa 공개키 생성</code>
<ul>
<li>공개키 암호화 방식의 공개키를 생성한다.</li>
</ul>
</li>
<li><code># 인증서 생성</code>
<ul>
<li>개인키로 서명한 인증서를 생성한다.</li>
<li><code>-days</code> 옵션으로 유효한 기간을 설정할 수 있다.</li>
<li>인증서는 공개키와 발급자 정보를 식별하는 정보를 가지고 있다.</li>
<li>이 명령어를 수행하면 몇 가지 정보를 요청한다. (국가, 회사, 이메일 등)</li>
</ul>
</li>
</ul>
<p><strong>ab</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ab <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;HOST&gt;<span style="color:#f92672">[</span>:PORT<span style="color:#f92672">][</span>/PATH<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>아파치가 제공하는 HTTP 서버 성능 검증 도구이다.</li>
</ul>
<table>
<thead>
<tr>
<th>-n <!-- raw HTML omitted --></th>
<th>요청의 전체 수, m번 만큼 전체 요청을 수행한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-c <!-- raw HTML omitted --></td>
<td>동시에 요청하는 수, n개의 요청을 동시에 한다.</td>
</tr>
<tr>
<td>-H</td>
<td>요청 헤더를 지정한다.</td>
</tr>
<tr>
<td>-C</td>
<td>요청 쿠키를 지정한다.</td>
</tr>
<tr>
<td>-T</td>
<td>요청 Content-type을 지정한다.</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ab -n <span style="color:#ae81ff">10</span> -c <span style="color:#ae81ff">2</span> https://apigateway.dev1.meshdev.io/neogeo/management/info
</span></span></code></pre></div><p><strong>nslookup</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nslookup <span style="color:#f92672">[</span>-type<span style="color:#f92672">=</span>&lt;TYPE&gt;<span style="color:#f92672">]</span> DOMAIN_NAME <span style="color:#f92672">[</span>DNS<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>DNS 서버에서 도메인의 정보를 조회한다.</li>
</ul>
<table>
<thead>
<tr>
<th>-type=soa</th>
<th>origin DNS를 조회한다.</th>
</tr>
</thead>
</table>
<p><strong>host</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>host <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> NAME
</span></span></code></pre></div><ul>
<li>DNS 서버에서 도메인의 정보를 조회한다.</li>
</ul>
<p><strong>netstat</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>netstat <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>네트워크 연결상태, 인터페이스 상태 등을 보여준다.</li>
</ul>
<table>
<thead>
<tr>
<th>옵션</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>모든 소켓 확인한다.</td>
</tr>
<tr>
<td>-r</td>
<td>라우팅 테이블 확인한다.</td>
</tr>
<tr>
<td>-n</td>
<td>호스트 이름을 ip 주소로 보여준다.</td>
</tr>
<tr>
<td>-t</td>
<td>TCP 소켓을 확인한다.</td>
</tr>
<tr>
<td>-u</td>
<td>UDP 소켓을 확인한다.</td>
</tr>
<tr>
<td>-p</td>
<td>PID/program name을 확인한다.</td>
</tr>
</tbody>
</table>
<p><strong>traceroute</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>traceroute <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> HOST
</span></span></code></pre></div><ul>
<li>HOST까지 가는 네트워크 경로를 확인해준다.</li>
</ul>
<h3 id="프로세스">프로세스</h3>
<p><strong>top</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>top <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>실시간으로 시스템의 프로세스 상태를 확인한다.</li>
</ul>
<table>
<thead>
<tr>
<th>-b</th>
<th>배치 모드</th>
</tr>
</thead>
<tbody>
<tr>
<td>-n <!-- raw HTML omitted --></td>
<td>m 후에 인터렉션 종료 (top 화면을 나간다.)</td>
</tr>
<tr>
<td>-d <!-- raw HTML omitted --></td>
<td>화면 새로고침 주기</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>shift + p</th>
<th>CPU 사용률 내림차순</th>
</tr>
</thead>
<tbody>
<tr>
<td>shift + m</td>
<td>메모리 사용률 내림차순</td>
</tr>
<tr>
<td>shift + t</td>
<td>프로세스 런타임 내림차순</td>
</tr>
<tr>
<td>k</td>
<td>PID 작성시 kill</td>
</tr>
</tbody>
</table>
<p><strong>ps</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ps <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>현재 실행중인 프로세스의 목록과 상태를 보여준다.</li>
</ul>
<table>
<thead>
<tr>
<th>-A</th>
<th>모든 프로세스를 출력한다.</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f</td>
<td>풀 포맷으로 보여준다. (UID, PPID 등)</td>
</tr>
<tr>
<td>-r</td>
<td>현재 실행 중인 프로세스를 보여준다.</td>
</tr>
<tr>
<td>-e</td>
<td>커널 프로세스를 제외한 모든 프로세스를 출력한다.</td>
</tr>
</tbody>
</table>
<p><strong>kill / pkill</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kill <span style="color:#f92672">[</span>SIGNAL<span style="color:#f92672">]</span> PID
</span></span></code></pre></div><ul>
<li>PID를 이용해서 프로세스에 signal을 보낸다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pkill <span style="color:#f92672">[</span>SIGNAL<span style="color:#f92672">]</span> NAME
</span></span></code></pre></div><ul>
<li>프로세스 이름을 이용해서 프로세스에 signal을 보낸다.</li>
</ul>
<table>
<thead>
<tr>
<th>9</th>
<th>SIGKILL</th>
<th>강제 종료 시그널</th>
</tr>
</thead>
<tbody>
<tr>
<td>15</td>
<td>SIGTERM</td>
<td>정상 종료 시그널 (termination)</td>
</tr>
</tbody>
</table>
<pre tabindex="0"><code>kill vs terminate
- kill
	- It is more like pressing PC power and reset button.
		It wont save any logs or other data.
- terminate
		- it will store all your data before shutting down
		(write data from RAM to disk, logs, etc)
</code></pre><p><strong>pgrep</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pgrep <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>PATTERN<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>패턴에 일치하는 프로세스 정보를 출력한다.</li>
</ul>
<table>
<thead>
<tr>
<th>-u <!-- raw HTML omitted --></th>
<th>특정 유저가 실행시킨 프로세스를 검색한다. (이름)</th>
</tr>
</thead>
<tbody>
<tr>
<td>-U <!-- raw HTML omitted --></td>
<td>특정 유저가 실행시킨 프로세스를 검색한다. (UID)</td>
</tr>
<tr>
<td>-g</td>
<td>특정 그룹이 실행시킨 프로세스를 검색한다. (이름)</td>
</tr>
<tr>
<td>-G</td>
<td>특정 그룹이 실행시킨 프로세스를 검색한다. (이름)</td>
</tr>
<tr>
<td>-l</td>
<td>프로세스 이름을 같이 출력한다.</td>
</tr>
</tbody>
</table>
]]></content:encoded></item><item><title>Linux 배포판 별 패키지 매니저</title><link>https://jo-minjun.github.io/notes/linux-package-manager/</link><pubDate>Thu, 05 Jan 2023 20:45:12 +0900</pubDate><guid>https://jo-minjun.github.io/notes/linux-package-manager/</guid><description>배포판 별 패키지 매니저 alpine 참고: Working with the Alpine Package Keeper (apk)
apk [&amp;lt;OPTIONS&amp;gt;...] COMMAND [&amp;lt;ARGUMENTS&amp;gt;...] 존재하는 리포지터리(repository)는 다음과 같다. main 공식적으로 지원하는 패키지들 community testing 리포지터리에서 테스트된 패키지들 testing 새롭거나, 손상됐거나, 오래된 테스트가 필요한 패키지들 Updating repository
apk update 리포지터리 인덱스를 업데이트한다. Searching
apk search [&amp;lt;OPTIONS&amp;gt;...] PATTERN... 리포지터리에서 PATTERN을 검색한다. Option Description &amp;ndash;description -d 설명에서 PATTERN을 검색한다. &amp;ndash;exact -e 패키지 이름을 정확하게 매칭시킨다. Installing
apk add [&amp;lt;OPTIONS&amp;gt;...] PACKAGES... 패키지를 설치한다.</description><content:encoded><![CDATA[<h2 id="배포판-별-패키지-매니저">배포판 별 패키지 매니저</h2>
<h3 id="alpine">alpine</h3>
<p>참고: <a href="https://docs.alpinelinux.org/user-handbook/0.1a/Working/apk.html">Working with the Alpine Package Keeper (apk)</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apk <span style="color:#f92672">[</span>&lt;OPTIONS&gt;...<span style="color:#f92672">]</span> COMMAND <span style="color:#f92672">[</span>&lt;ARGUMENTS&gt;...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>존재하는 리포지터리(repository)는 다음과 같다.
<ul>
<li>main
<ul>
<li>공식적으로 지원하는 패키지들</li>
</ul>
</li>
<li>community
<ul>
<li>testing 리포지터리에서 테스트된 패키지들</li>
</ul>
</li>
<li>testing
<ul>
<li>새롭거나, 손상됐거나, 오래된 테스트가 필요한 패키지들</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Updating repository</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apk update
</span></span></code></pre></div><ul>
<li>리포지터리 인덱스를 업데이트한다.</li>
</ul>
<p><strong>Searching</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apk search <span style="color:#f92672">[</span>&lt;OPTIONS&gt;...<span style="color:#f92672">]</span> PATTERN...
</span></span></code></pre></div><ul>
<li>리포지터리에서 PATTERN을 검색한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;description -d</td>
<td>설명에서 PATTERN을 검색한다.</td>
</tr>
<tr>
<td>&ndash;exact -e</td>
<td>패키지 이름을 정확하게 매칭시킨다.</td>
</tr>
</tbody>
</table>
<p><strong>Installing</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apk add <span style="color:#f92672">[</span>&lt;OPTIONS&gt;...<span style="color:#f92672">]</span> PACKAGES...
</span></span></code></pre></div><ul>
<li>패키지를 설치한다.</li>
<li>이미 존재하면 업그레이드를 시도한다.</li>
</ul>
<p><strong>Upgrading</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apk upgrade <span style="color:#f92672">[</span>&lt;OPTIONS&gt;...<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>&lt;PACKAGES&gt;...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>설치된 패키지를 업그레이드 한다.</li>
<li>특정 패키지가 명시되지 않으면 설치된 패키지 중 가능한 패키지를 업그레이드 한다.</li>
</ul>
<p><strong>Removing</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apk del <span style="color:#f92672">[</span>&lt;OPTIONS&gt;...<span style="color:#f92672">]</span> PACKAGES...
</span></span></code></pre></div><ul>
<li>설치된 패키지를 제거한다.</li>
</ul>
<h3 id="centosamazon-linux-2-amazon-linux-2022">centos(Amazon Linux 2, Amazon Linux 2022)</h3>
<p>참고: <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/ch-yum#doc-wrapper">Chapter 9. Yum Red Hat Enterprise Linux 7 | Red Hat Customer Portal</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum <span style="color:#f92672">[</span>&lt;OPTIONS&gt;...<span style="color:#f92672">]</span> COMMAND <span style="color:#f92672">[</span>&lt;ARGUMENTS&gt;...<span style="color:#f92672">]</span>
</span></span></code></pre></div><p><strong>Searching</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum search PATTERN
</span></span></code></pre></div><ul>
<li>패키지 이름은 모르지만 관련 용어를 알고 있을 때 편리한 패키지 검색 명령어이다.</li>
</ul>
<p><strong>Listing</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum list all
</span></span></code></pre></div><ul>
<li>설치 되었거나 설치 가능한 패키지 목록을 보여준다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum list installed
</span></span></code></pre></div><ul>
<li>설치된 패키지 목록을 보여준다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum list available
</span></span></code></pre></div><ul>
<li>설치 가능한 패키지 목록을 보여준다.</li>
</ul>
<p><strong>Installing</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum install PACKAGE
</span></span></code></pre></div><ul>
<li>패키지를 설치한다.</li>
</ul>
<p><strong>Updating packages</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum check-update
</span></span></code></pre></div><ul>
<li>설치된 패키지 중 업데이트가 가능한 패키지를 확인한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum update PACKAGE
</span></span></code></pre></div><ul>
<li>한 개 이상 패키지에 대한 업데이트를 진행한다.</li>
<li>패키지를 입력하지 않으면 모든 패키지에 대해 업데이트를 진행한다.</li>
</ul>
<p><strong>Removing</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum remove PACKAGE
</span></span></code></pre></div><ul>
<li>패키지를 제거한다.</li>
</ul>
<p><strong>History</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum history list
</span></span></code></pre></div><ul>
<li>실행되었던 yum 관련 명령어들을 확인한다.</li>
</ul>
<p><strong>Rollback</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum history rollback HISTORY_ID
</span></span></code></pre></div><ul>
<li>history에서 확인한 ID로 해당 명령어를 수행하기 전으로 되돌린다.</li>
</ul>
<h3 id="ubuntudebian">ubuntu(debian)</h3>
<p>참고: <a href="https://manpages.ubuntu.com/manpages/xenial/man8/apt.8.html#description">Ubuntu Manpage: apt - command-line interface</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt <span style="color:#f92672">[</span>options<span style="color:#f92672">]</span> command
</span></span></code></pre></div><p><strong>Updating</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt update
</span></span></code></pre></div><ul>
<li>리포지터리의 설치 가능한 목록을 업데이트 한다.</li>
</ul>
<p><strong>Listing</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt list PATTERN
</span></span></code></pre></div><ul>
<li>패키지 이름으로 목록을 검색해서 보여준다.</li>
<li><code>apt -i list</code> 로 설치된 목록을 확인 할 수 있다.</li>
</ul>
<p><strong>Searching</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt search PATTERN
</span></span></code></pre></div><ul>
<li>패키지 설명, 이름 등으로 목록을 검색해서 보여준다.</li>
</ul>
<p><strong>Installing</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt install PACKAGE
</span></span></code></pre></div><ul>
<li>패키지를 설치한다.</li>
</ul>
<p><strong>Removing</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt remove PACKAGE
</span></span></code></pre></div><ul>
<li>패키지를 제거한다.</li>
</ul>
<p><strong>Upgrading</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt upgrade <span style="color:#f92672">[</span>PACKAGE<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>설치된 패키지를 업그레이드 한다.</li>
</ul>
]]></content:encoded></item><item><title>Docker 스터디</title><link>https://jo-minjun.github.io/notes/docker-study/</link><pubDate>Wed, 04 Jan 2023 23:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/docker-study/</guid><description>Docker Docker란 애플리케이션 개발, 실행, 공유를 위한 오픈 플랫폼이다. 호스트 시스템과 격리된 환경에서 애플리케이션을 패키징하고 실행할 수 있게 해준다. (컨테이너) 협업 시 각 로컬에 개발환경을 설치하지 않아도 된다. 서버 관리에 편리하다. https://docs.docker.com/get-started/overview/
도커 명령어 크게 4가지 종류의 명령어가 있다. Registry 관련 Image 관련 Container 관련 Compose 관련 명령어의 자세한 옵션과 설명은 아래 문서를 참조
docker
Registry 관련 login
docker login Registry에 로그인한다. logout
docker logout Registry에서 로그아웃한다. search
docker search [OPTIONS] &amp;lt;TERM&amp;gt; Registry에 있는 이미지를 검색한다.</description><content:encoded><![CDATA[<h1 id="docker">Docker</h1>
<h3 id="docker란">Docker란</h3>
<ul>
<li>애플리케이션 개발, 실행, 공유를 위한 오픈 플랫폼이다.</li>
<li>호스트 시스템과 격리된 환경에서 애플리케이션을 패키징하고 실행할 수 있게 해준다. (컨테이너)
<ul>
<li>협업 시 각 로컬에 개발환경을 설치하지 않아도 된다.</li>
<li>서버 관리에 편리하다.</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="/images/notes/docker-study/1.svg" alt="1"  />
</p>
<p><a href="https://docs.docker.com/get-started/overview/">https://docs.docker.com/get-started/overview/</a></p>
<h2 id="도커-명령어">도커 명령어</h2>
<ul>
<li>크게 4가지 종류의 명령어가 있다.
<ul>
<li>Registry 관련</li>
<li>Image 관련</li>
<li>Container 관련</li>
<li>Compose 관련</li>
</ul>
</li>
</ul>
<p>명령어의 자세한 옵션과 설명은 아래 문서를 참조</p>
<p><a href="https://docs.docker.com/engine/reference/commandline/docker/">docker</a></p>
<h3 id="registry-관련">Registry 관련</h3>
<p><strong>login</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker login
</span></span></code></pre></div><ul>
<li>Registry에 로그인한다.</li>
</ul>
<p><strong>logout</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker logout
</span></span></code></pre></div><ul>
<li>Registry에서 로그아웃한다.</li>
</ul>
<p><strong>search</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker search <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;TERM&gt;
</span></span></code></pre></div><ul>
<li>Registry에 있는 이미지를 검색한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;filter -f</td>
<td></td>
<td>key=value 포맷으로 검색을 필터링 한다.</td>
</tr>
</tbody>
</table>
<ul>
<li>stars: star의 개수 (int)</li>
<li>is-automated: 자동 빌드 여부 (boolean)</li>
<li>is-official: 공식 여부 (boolean) |
| &ndash;limit | 25 | 검색 결과의 최대 개수 |
| &ndash;no-trunc | | 검색 결과 텍스트를 생략하지 않고 전부 보여준다. |</li>
</ul>
<p><strong>pull</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker pull <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;IMAGE&gt;
</span></span></code></pre></div><ul>
<li>Registry에서 이미지를 내려 받는다.</li>
<li><!-- raw HTML omitted -->에 사용자 명을 지정하지 않으면 공식 이미지를 내려 받는다.</li>
</ul>
<p><strong>push</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker push <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;IMAGE&gt;
</span></span></code></pre></div><ul>
<li>이미지를 Registry에 업로드 한다.</li>
</ul>
<h3 id="image-관련">Image 관련</h3>
<p><strong>build</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker image build <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Dockerfile PATH | URL<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>Dockerfile을 이용해서 이미지를 빌드한다.</li>
</ul>
<p><strong>ls</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker image ls <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>이미지 목록를 보여준다.</li>
</ul>
<p><strong>rm</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker image rm <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;IMAGE&gt; <span style="color:#f92672">[</span>IMAGE...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>하나 또는 하나 이상의 이미지를 제거한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;force -f</td>
<td></td>
<td>이미지를 강제로 제거한다.</td>
</tr>
</tbody>
</table>
<p><strong>tag</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker image tag SOURCE_IMAGE TARGET_IMAGE
</span></span></code></pre></div><ul>
<li>이미지에 태그를 설정한다. (IMAGE_ID에 별칭을 부여한다.)</li>
<li>숫자 및 <code>_</code> <code>-</code> <code>.</code> 으로 이름을 시작할 수 없다.</li>
</ul>
<h3 id="container-관련">Container 관련</h3>
<p><strong>commit</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container commit <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CONTAINER
</span></span></code></pre></div><ul>
<li>컨테이너의 변경사항을 이미지로 생성한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;author -a</td>
<td></td>
<td>커밋한 사용자를 작성한다.</td>
</tr>
<tr>
<td>&ndash;message -m</td>
<td></td>
<td>커밋 메시지를 작성한다.</td>
</tr>
</tbody>
</table>
<p><strong>diff</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container diff CONTAINER
</span></span></code></pre></div><ul>
<li>컨테이너의 변경사항을 확인한다.</li>
<li>A: 추가, C: 변경, D: 삭제</li>
</ul>
<p><strong>exec</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container exec <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CONTAINER COMMAND <span style="color:#f92672">[</span>ARG...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li><code>docker exec</code> 명령어와 같다.</li>
<li>실행 중인 컨테이너에 명령어를 실행한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;detach -d</td>
<td></td>
<td>명령어를 백그라운드로 실행한다.</td>
</tr>
<tr>
<td>&ndash;interactive -i</td>
<td></td>
<td>표준입력을 유지한다.</td>
</tr>
<tr>
<td>&ndash;tty -t</td>
<td></td>
<td>터미널(pseudo-TTY)을 할당한다.</td>
</tr>
</tbody>
</table>
<p><strong>logs</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container logs CONTAINER
</span></span></code></pre></div><ul>
<li><code>docker logs</code> 명령어와 같다.</li>
<li>컨테이너의 로그를 보여준다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;follow -f</td>
<td></td>
<td>로그를 계속 추적하면서 출력한다.</td>
</tr>
<tr>
<td>&ndash;timestamps -t</td>
<td></td>
<td>시간 데이터를 보여준다.</td>
</tr>
</tbody>
</table>
<p><strong>ls</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container ls <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>컨테이너 목록을 보여준다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;all -a</td>
<td>running container</td>
<td>모든 컨테이너를 보여준다.</td>
</tr>
<tr>
<td>&ndash;size -s</td>
<td></td>
<td>사이즈를 같이 보여준다.</td>
</tr>
</tbody>
</table>
<p><strong>prune</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container prune
</span></span></code></pre></div><ul>
<li>stop 상태인 모든 컨테이너를 제거한다.</li>
</ul>
<p><strong>rename</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container rename CONTAINER NEW_NAME
</span></span></code></pre></div><ul>
<li>컨테이너 이름을 변경한다.</li>
</ul>
<p><strong>rm</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container rm <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CONTAINER <span style="color:#f92672">[</span>CONTAINER...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>하나 또는 하나 이상 컨테이너를 제거한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;force -f</td>
<td></td>
<td>동작 중인 컨테이너를 강제로 제거한다.</td>
</tr>
</tbody>
</table>
<p><strong>run</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container run <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> IMAGE <span style="color:#f92672">[</span>COMMAND<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>ARG...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>이미지를 컨테이너로 생성하고 실행한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>—detach -d</td>
<td></td>
<td>컨테이너의 ID를 출력하고 백그라운드로 실행한다.</td>
</tr>
<tr>
<td>&ndash;interactive -i</td>
<td></td>
<td>표준입력을 유지한다.</td>
</tr>
<tr>
<td>&ndash;tty -t</td>
<td></td>
<td>터미널(pseudo-TTY)을 할당한다.</td>
</tr>
<tr>
<td>&ndash;name</td>
<td>random</td>
<td>컨테이너에 이름을 지정한다.</td>
</tr>
<tr>
<td>&ndash;env -e</td>
<td></td>
<td>환경변수를 설정한다.</td>
</tr>
<tr>
<td>&ndash;publish -p</td>
<td></td>
<td>host(port):container(port) 포맷으로 publish와 bind를 설정한다.</td>
</tr>
<tr>
<td>&ndash;volume -v</td>
<td></td>
<td>볼륨을 마운트 시킨다.</td>
</tr>
<tr>
<td>&ndash;rm</td>
<td></td>
<td>종료되면 해당 컨테이너를 삭제한다.</td>
</tr>
</tbody>
</table>
<p><strong>start, restart</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container start <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CONTAINER <span style="color:#f92672">[</span>CONTAINER...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>하나 또는 하나 이상의 컨테이너를 시작한다.</li>
<li>이미 실행 중인 컨테이너를 다시 시작하려면 <code>restart</code>를 사용한다.</li>
</ul>
<p><strong>stop</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container stop <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CONTAINER <span style="color:#f92672">[</span>CONTAINER...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>하나 또는 하나 이상의 컨테이너를 중지시킨다.</li>
</ul>
<h3 id="compose-관련">Compose 관련</h3>
<p><strong>up</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose up
</span></span></code></pre></div><ul>
<li>컴포즈 파일의 컨테이너들을 생성하고 시작한다.</li>
</ul>
<p><strong>down</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose down
</span></span></code></pre></div><ul>
<li>컨테이너를 중단하고 제거한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;rmi</td>
<td></td>
<td>서비스에 사용된 이미지를 제거한다.</td>
</tr>
<tr>
<td>&ndash;volumnes -v</td>
<td></td>
<td>이름이 지정된 volume을 제거한다.</td>
</tr>
</tbody>
</table>
<h2 id="dockerfile">Dockerfile</h2>
<ul>
<li>Dockerfile을 이용해서 Docker 이미지를 빌드할 수 있다.</li>
<li><code>docker image build</code> 명령어를 사용해서 Dockerfile에 명시된 command line을 수행하도록 할 수 있다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker image build <span style="color:#f92672">[</span>Dockerfile 경로<span style="color:#f92672">]</span>
</span></span></code></pre></div><p><strong>Format</strong></p>
<ul>
<li>Dockerfile 포맷은 다음과 같다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#75715e"># Comment</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>INSTRUCTION arguments<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>INSTRUCTION은 대/소문자를 구분하지 않지만, 대문자로 작성하는 것이 컨벤션이다.</li>
<li>Dockerfile은 반드시 <code>FROM</code> INSTRUCTION으로 시작해야 한다.</li>
</ul>
<p><strong>Environment replacement</strong></p>
<ul>
<li>환경변수는 <code>$variable_name</code> 또는 <code>${variable_name}</code> 방식으로 사용할 수 있다.</li>
<li><code>${variable_name}</code> 는 다음과 같은 연산자를 지원한다.
<ul>
<li><code>${variable_name:-word}</code> 는 <code>variable_name</code> 이 정의되어있지 않다면 <code>word</code> 로 대체된다.</li>
<li><code>${variable_name:+word}</code> 는 <code>variable_name</code> 이 정의되어 있다면 <code>word</code> 가 그 값으로 대체되고 정의되어있지 않다면 빈 문자열로 대체된다.</li>
</ul>
</li>
</ul>
<p><strong>FROM</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> [--platform=&lt;platform&gt;] &lt;IMAGE&gt; [AS &lt;name&gt;]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> [--platform=&lt;platform&gt;] &lt;IMAGE&gt;[:&lt;TAG&gt;] [AS &lt;name&gt;]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> [--platform=&lt;platform&gt;] &lt;IMAGE&gt;[@&lt;DIGEST&gt;] [AS &lt;name&gt;]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>생성할 이미지의 베이스 이미지를 설정한다.</li>
<li>멀티 플랫폼 이미지를 참조할 때 <code>--platform</code> 사용하여 플랫폼을 특정할 수 있다.
<ul>
<li>linux/amd64</li>
<li>linux/arm64</li>
<li>windows/amd64</li>
<li>…</li>
</ul>
</li>
<li><!-- raw HTML omitted --> 뒤에 <code>TAG</code>와 <code>DIGEST</code>는 선택적으로 사용한다. 둘 다 생략했다면 <code>TAG</code>로 latest가 사용된다.</li>
<li>AS를 사용해서 빌드 단계에 이름을 줄 수 있다.</li>
</ul>
<p><strong>RUN</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">RUN</span> &lt;command&gt; <span style="color:#75715e"># shell 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;executable&#34;</span>, <span style="color:#e6db74">&#34;param1&#34;</span>, <span style="color:#e6db74">&#34;param2&#34;</span><span style="color:#f92672">]</span> <span style="color:#75715e"># exec 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>현재 이미지의 새 레이어에서 실행되고 결과를 커밋되고, 커밋된 이미지는 Dockerfile의 다음 스텝에서 사용된다.</li>
<li>RUN 명령어는 두 가지 방식을 따른다.
<ul>
<li>shell 형식
<ul>
<li>내부적으로 shell 명령어를 호출하여 <!-- raw HTML omitted -->를 호출한다.</li>
</ul>
</li>
<li>exec 형식
<ul>
<li>사용자가 executable(<code>/bin/sh</code>, <code>/bin/bash</code>…) 을 명시하여 명령어를 실행할 수 있다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>CMD</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">CMD</span> &lt;command&gt; param1 param2 <span style="color:#75715e"># shell 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;executable&#34;</span>, <span style="color:#e6db74">&#34;param1&#34;</span>, <span style="color:#e6db74">&#34;param2&#34;</span>] <span style="color:#75715e"># exec 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>컨테이너가 실행될 때 수행될 default 명령어를 설정한다.</li>
<li>컨테이너 실행시 override가 가능하다.</li>
<li>CMD는 두 가지 방식을 따른다.
<ul>
<li>shell 형식
<ul>
<li>내부적으로 shell 명령어를 호출하여 <!-- raw HTML omitted -->를 호출한다.</li>
</ul>
</li>
<li>exec 형식
<ul>
<li>사용자가 executable(<code>/bin/sh</code>, <code>/bin/bash</code>…) 을 명시하여 명령어를 실행할 수 있다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>ENTIRYPOINT</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">ENTRYPOINT</span> command param1 param2 <span style="color:#75715e"># shell 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;executable&#34;</span>, <span style="color:#e6db74">&#34;param1&#34;</span>, <span style="color:#e6db74">&#34;param2&#34;</span>] <span style="color:#75715e">#exec 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>컨테이너가 실행될 때 가장 먼저 수행되는 명령어를 지정한다.</li>
<li>ENTIRYPOINT 명령어는 두 가지 방식을 따른다.
<ul>
<li>shell 형식
<ul>
<li>내부적으로 shell 명령어를 호출하여 <!-- raw HTML omitted -->를 호출한다.</li>
</ul>
</li>
<li>exec 형식
<ul>
<li>사용자가 executable(<code>/bin/sh</code>, <code>/bin/bash</code>…) 을 명시하여 명령어를 실행할 수 있다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>LABEL</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">LABEL</span> &lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; &lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; &lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; ... <span style="color:#75715e"># 한 줄에 작성</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">LABEL</span> &lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; <span style="color:#ae81ff">\ </span><span style="color:#75715e"># 여러 줄에 작성</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>			&lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>			&lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>			...<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>키=밸류 방식으로 이미지에 메타데이터를 추가한다.</li>
<li>LABEL은 기본 또는 상위 이미지의 LABEL을 현재 이미지에 상속 받는다.</li>
<li>이미지의 라벨은 <code>docker image inspect</code> 명령어로 확인할 수 있다.</li>
</ul>
<p><strong>EXPOSE</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>Docker에게 컨테이너가 런타임에서 어떤 네트워크 포트를 사용할 지 알려준다.</li>
<li>TCP, UDP를 사용할 수 있고, 명시하지 않는다면 TCP가 사용된다.</li>
<li>실제로 포트를 공개하지는 않지만 <code>docker run -P</code> 명령어를 사용하면 호스트의 랜덤 포트가 컨테이너의 EXPOSE로 명시한 포트에 매핑된다.</li>
</ul>
<p><strong>ENV</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">ENV</span> &lt;key&gt; &lt;value&gt;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> &lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; ...<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>환경변수 <!-- raw HTML omitted -->를 <!-- raw HTML omitted -->로 설정한다.</li>
<li>컨테이너 실행 시 <code>docker container run —env</code> 명령어로 변경할 수 있다.</li>
</ul>
<p><strong>ADD</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">ADD</span> <span style="color:#f92672">[</span>--chown<span style="color:#f92672">=</span>&lt;user&gt;;&lt;group&gt;<span style="color:#f92672">]</span> &lt;src&gt;... &lt;dest&gt;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> <span style="color:#f92672">[</span>--chown<span style="color:#f92672">=</span>&lt;user&gt;;&lt;group&gt;<span style="color:#f92672">]</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;&lt;src&gt;&#34;</span>,... <span style="color:#e6db74">&#34;&lt;dest&gt;&#34;</span><span style="color:#f92672">]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li><!-- raw HTML omitted -->의 파일, 디렉토리, 리모트 파일의 URL을 <!-- raw HTML omitted -->에 추가한다.</li>
<li><code>*</code>과 <code>?</code> 과 같은 패턴을 사용할 수도 있다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#75715e"># hom으로 시작하는 모든 파일 추가</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> home* /dir/<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># ?는 단일 문자 대체</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> hom?.txt /dir/<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p><strong>COPY</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">COPY</span> <span style="color:#f92672">[</span>--chown<span style="color:#f92672">=</span>&lt;user&gt;:&lt;group&gt;<span style="color:#f92672">]</span> &lt;src&gt;... &lt;dest&gt;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> <span style="color:#f92672">[</span>--chown<span style="color:#f92672">=</span>&lt;user&gt;:&lt;group&gt;<span style="color:#f92672">]</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;&lt;src&gt;&#34;</span>,... <span style="color:#e6db74">&#34;&lt;dest&gt;&#34;</span><span style="color:#f92672">]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>이미지에 호스트의 파일이나 디렉토리를 복사한다.</li>
<li><code>ADD</code>는 대상이 압축파일인 경우 해체하여 복사하는 등 기능을 제공하지만, COPY는 복사만 수행한다.</li>
</ul>
<p><strong>WORKDIR</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /path/to/workdir</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>Dockerfile에서 정의한 명령을 실행하기 위한 디렉토리를 지정하며, 경로가 존재하지 않으면 생성한다.</li>
</ul>
<p><strong>ARG</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">ARG</span> &lt;name&gt;<span style="color:#f92672">[=</span>&lt;default value&gt;<span style="color:#f92672">]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>Dockerfile에서 사용할 변수를 정의한다.</li>
<li><code>ENV</code>와 달리 Dockerfile 내부에서만 사용 가능하다.</li>
</ul>
<p><strong>HEALTHCHECK</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">HEALTHCHECK</span> <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CMD command <span style="color:#75715e"># 사용할 명령을 지정 (curl 등)</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">HEALTHCHECK</span> NONE <span style="color:#75715e">#기본 이미지에서 상속된 healthcheck 사용 안함</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>컨테이너가 잘 동작하는지 확인한다.</li>
<li>옵션은 다음과 같다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;interval=n</td>
<td>30s</td>
<td>헬스 체크 간격</td>
</tr>
<tr>
<td>&ndash;timeout=n</td>
<td>30s</td>
<td>헬스 체크 타임아웃 기준</td>
</tr>
<tr>
<td>&ndash;retries=n</td>
<td>3</td>
<td>타임아웃 횟수</td>
</tr>
<tr>
<td>&ndash;start_period=n</td>
<td>0s</td>
<td>컨테이너 실행 후 대기 시간</td>
</tr>
</tbody>
</table>
<h2 id="compose-file">Compose file</h2>
<p><a href="https://docs.docker.com/compose/compose-file/">Compose specification</a></p>
<h3 id="compose-file-versions">Compose file versions</h3>
<table>
<thead>
<tr>
<th>Reference file</th>
<th>What changed in this version</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a> (most current, and recommended)</td>
<td><a href="https://docs.docker.com/compose/compose-file/compose-versioning/#versioning">https://docs.docker.com/compose/compose-file/compose-versioning/#versioning</a></td>
</tr>
<tr>
<td><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></td>
<td><a href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-3">https://docs.docker.com/compose/compose-file/compose-versioning/#version-3</a></td>
</tr>
<tr>
<td><a href="https://docs.docker.com/compose/compose-file/compose-file-v2/">https://docs.docker.com/compose/compose-file/compose-file-v2/</a></td>
<td><a href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-2">https://docs.docker.com/compose/compose-file/compose-versioning/#version-2</a></td>
</tr>
<tr>
<td>Version 1 (Deprecated)</td>
<td><a href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-1-deprecated">https://docs.docker.com/compose/compose-file/compose-versioning/#version-1-deprecated</a></td>
</tr>
</tbody>
</table>
<h3 id="compose-specification">Compose specification</h3>
<ul>
<li>Compose specification은 도커가 다중 컨테이너 애플리케이션을 정의하기 위해 만든 <strong>새로운 표준 규격</strong>이다.</li>
<li>**YAML(YML)**을 이용해서 다음과 같은 항목을 정의한다.
<ul>
<li>service(필수), network, volume, config, secret</li>
</ul>
</li>
<li>Compose file의 이름은 compose.yaml 또는 docker-compose.yaml을 사용한다.</li>
<li>만약 둘 다 존재하는 경우 Compose spec의 컨벤션인 <strong>compose.yaml을 권장</strong>한다.</li>
</ul>
<h3 id="compose-애플리케이션-모델">Compose 애플리케이션 모델</h3>
<ul>
<li>Compose file은 플랫폼에 의존하지 않는 컨테이너 집합 기반 애플리케이션을 정의한다.</li>
<li><strong>서비스(service)</strong>
<ul>
<li>애플리케이션 컴포넌트를 구성한다.</li>
<li>컨테이너를 실행해서 플랫폼에 구현되는 추상 개념이다.</li>
<li>어떤 서비스는 런타임 또는 플랫폼에 의존적인 **설정(config)**을 필요로 한다.</li>
</ul>
</li>
<li><strong>네트워크(network)</strong>
<ul>
<li>서비스간 통신을 구성한다.</li>
<li>서로 연결된 서비스 컨테이너 간에 IP 라우팅을 위한 플랫폼 기능 추상체이다.</li>
</ul>
</li>
<li><strong>볼륨(volume)</strong>
<ul>
<li>서비스는 볼륨에 데이터를 저장하고 공유한다.</li>
</ul>
</li>
<li>config와 secret을 이용해서 컨테이너에 필요한 정책과 보안을 설정할 수 있다.</li>
</ul>
<h3 id="profile">Profile</h3>
<ul>
<li>프로필을 사용해서 환경에 맞게 Compose 애플리케이션 모델을 조정할 수 있다.</li>
<li><code>services</code>는 요소로 서비스 <code>name</code>을 제공하고 그 하위에 <code>profiles</code> 속성을 제공한다.
<ul>
<li>profiles 속성으로 프로필 목록을 정의한다.</li>
<li>profiles 속성이 설정되지 않은 서비스는 항상 활성화 된다.</li>
<li>특정 서비스를 실행하는 경우 지정한 프로필이 활성화 된다.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 모든 프로필에서 활성화 된다.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">foo</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">image</span>: <span style="color:#ae81ff">foo</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># test 프로필에서 활성화 된다.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">bar</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">image</span>: <span style="color:#ae81ff">bar</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">profiles</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#ae81ff">test</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># test 및 debug 프로필에서 활성화 된다.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">baz</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">image</span>: <span style="color:#ae81ff">baz</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#ae81ff">bar</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">profiles</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#ae81ff">test</span>
</span></span><span style="display:flex;"><span>			- <span style="color:#ae81ff">debug</span>
</span></span></code></pre></div><h3 id="service의-구성-요소">service의 구성 요소</h3>
<ul>
<li>service의 주요 하위 요소
<ul>
<li><code>build</code> <code>image</code> <code>command</code> <code>container_name</code> <code>depends_on</code> <code>environment</code> <code>expose</code> <code>ports</code> <code>healthcheck</code> <code>volumes</code></li>
</ul>
</li>
<li>다른 구성 요소는 문서를 참고</li>
</ul>
<p><strong>build</strong></p>
<ul>
<li>컨테이너 이미지를 생성하기 위한 빌드 구성을 지정한다.</li>
<li><code>build</code> 요소는 문자열 값을 가지거나 하위 요소를 가질 수 있다.</li>
<li>아래와 같이 build에 문자열 값을 가지면 Dockerfile의 context만 가질 수 있다.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">webapp</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">build</span>: <span style="color:#ae81ff">./dir</span>
</span></span></code></pre></div></li>
<li><code>build</code> 요소의 하위 요소는 다음과 같다.
<ul>
<li>context: Dockerfile의 context를 지정한다.</li>
<li>dockerfile: 사용할 Dockerfile의 이름을 지정한다.</li>
<li>args: Dockerfile ARG 값을 정의한다.</li>
<li>…</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">webapp</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">context</span>: <span style="color:#ae81ff">./dir</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">webapp.Dockerfile</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>				- <span style="color:#ae81ff">GIT_COMMIT=cdc3b19</span>
</span></span></code></pre></div></li>
</ul>
<p><strong>image</strong></p>
<ul>
<li>컨테이너를 시작할 이미지를 지정한다.</li>
<li><code>[&lt;registry&gt;/][&lt;project&gt;/]&lt;image&gt;[:&lt;tag&gt;|@&lt;digest&gt;]</code> 방식으로 기술해야 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">redis</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">redis:5</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">library/redis</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker.io/library/redis</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">my_private.registry:5000/redis</span>
</span></span></code></pre></div><p><strong>command</strong></p>
<ul>
<li>컨테이너 이미지(CMD)에 선언된 기본 명령을 재정의 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">webapp</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">command</span>: [<span style="color:#e6db74">&#34;bundle&#34;</span>, <span style="color:#e6db74">&#34;exec&#34;</span>, <span style="color:#e6db74">&#34;thin&#34;</span>, <span style="color:#e6db74">&#34;-p&#34;</span>, <span style="color:#e6db74">&#34;3000&#34;</span>] <span style="color:#75715e"># exec 형식</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">command</span>: <span style="color:#ae81ff">bundle exec thin -p 3000 </span> <span style="color:#75715e"># shell 형식</span>
</span></span></code></pre></div><p><strong>container_name</strong></p>
<ul>
<li>container_name은 컨테이너의 이름을 지정한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">webapp</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">my-web-container</span>
</span></span></code></pre></div><p>*<strong>*depends_on**</strong></p>
<ul>
<li>서비스 간의 시작 및 종료 종속성을 기술한다.</li>
<li>두 가지 방법으로 기술할 수 있다.</li>
<li>Short syntax
<ul>
<li>종속성 서비스 이름만 지정한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">web</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>: <span style="color:#ae81ff">.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">db</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">redis</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">redis</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">redis</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">postgres</span>
</span></span></code></pre></div><ul>
<li>위 예제는 아래와 같은 동작을 의미한다.
<ul>
<li><code>web</code> 보다 <code>db</code> 및 <code>redis</code>가 빨리 생성된다.</li>
<li><code>web</code> 이 <code>db</code> 및 <code>redis</code>보다 빨리 제거된다.</li>
</ul>
</li>
</ul>
</li>
<li>Long syntax
<ul>
<li>이 방법을 사용하면 추가 필드를 사용할 수 있다.</li>
<li><code>condition</code>: 종속성이 충족된 것으로 간주되는 조건
<ul>
<li><code>service_started</code>: (default) 의존하는 서비스가 먼저 시작됨</li>
<li><code>service_healthy</code>: 의존하는 서비스가 먼저 시작되고, healthy 상태임</li>
<li><code>service_completed_successfully</code>: 의존하는 서비스가 성공적으로 종료됨</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">web</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>: <span style="color:#ae81ff">.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">service_healthy</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">redis</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">service_started</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">redis</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">redis</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">postgres</span>
</span></span></code></pre></div><ul>
<li>위 예제는 아래와 같은 동작을 의미한다.
<ul>
<li><code>web</code> 이 실행되기 전에 <code>db</code> 가 healthy 상태이고 <code>redis</code>가 시작된 상태이다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>environment</strong></p>
<ul>
<li>컨테이너에 설정된 환경변수를 정의한다.</li>
<li>두 가지 방법으로 환경변수를 정의할 수 있다.</li>
<li>Map syntax
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">RACK_ENV</span>: <span style="color:#ae81ff">development</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">SHOW</span>: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">USER_INPUT</span>:
</span></span></code></pre></div></li>
<li>Array syntax
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">RACK_ENV=development</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">SHOW=true</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">USER_INPUT</span>
</span></span></code></pre></div></li>
</ul>
<p><strong>expose</strong></p>
<ul>
<li>컨테이너에서 노출해야 하는 포트를 정의한다.</li>
<li>호스트 내부의 다른 컨테이너들만 엑세스가 가능하다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">expose</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;3000&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;8000&#34;</span>
</span></span></code></pre></div><p><strong>ports</strong></p>
<ul>
<li>컨테이너 포트를 노출한다.</li>
<li><code>[HOST:]CONTAINER[/PROTOCOL]</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;3000&#34;</span> <span style="color:#75715e"># 호스트의 랜덤 포트, 컨테이너의 3000번 포트</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;3000-3005&#34;</span> <span style="color:#75715e"># 컨테이너의 포트 번호 범위내에서 할당</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;8000:8000&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;9090-9091:8080-8081&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;49100:22&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;127.0.0.1:8001:8001&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;127.0.0.1:5000-5010:5000-5010&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;6060:6060/udp&#34;</span>
</span></span></code></pre></div><pre tabindex="0"><code>expose vs ports
- ports는 호스트와 컨테이너의 포트를 바인딩 시킨다.
- ports는 호스트 포트와 컨테이너 포트를 모두 노출시키기 때문에
	호스트 내부 컨테이너 간에는 노출된 포트로 접근할 수 있지만,
	호스트 외부에서는 컨테이너와 바인딩된 포트로 접근해야 한다.

- expose는 호스트 포트를 공개하지 않고 컨테이너의 포트만 공개한다.
- 따라서 호스트 외부에서는 컨테이너에 접근할 수 없고 컨테이너 끼리만 접근이 가능하다.
</code></pre><p><strong>healthcheck</strong></p>
<ul>
<li>서비스 컨테이너가 healthy 상태인지 확인한다.</li>
<li>healthcheck의 하위 구성 요소는 아래와 같다.</li>
</ul>
<table>
<thead>
<tr>
<th>Element</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>disable</td>
<td>true 또는 false로 healthcheck 여부를 설정</td>
</tr>
<tr>
<td>test</td>
<td>컨테이너 상태를 확인하기 위한 명령 정의. exec 방식과 shell 방식 모두 사용 가능</td>
</tr>
<tr>
<td>interval</td>
<td>헬스 체크 간격</td>
</tr>
<tr>
<td>timeout</td>
<td>헬스 체크 타임아웃 기준</td>
</tr>
<tr>
<td>retries</td>
<td>타임아웃 횟수</td>
</tr>
<tr>
<td>start_period</td>
<td>컨테이너 시작 후 대기 시간</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">healthcheck</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">test</span>: [<span style="color:#e6db74">&#34;CMD&#34;</span>, <span style="color:#e6db74">&#34;curl&#34;</span>, <span style="color:#e6db74">&#34;-f&#34;</span>, <span style="color:#e6db74">&#34;http://localhost&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">interval</span>: <span style="color:#ae81ff">1m30s</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">timeout</span>: <span style="color:#ae81ff">10s</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">retries</span>: <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">start_period</span>: <span style="color:#ae81ff">40s</span>
</span></span></code></pre></div><p><strong>volumes</strong></p>
<ul>
<li>서비스 컨테이너에서 엑세스하는 마운트 호스트 경로 또는 정의한 볼륨을 기술한다.</li>
<li>마운트가 단일 서비스에서만 사용되는 경우 최상위 volumes 요소 대신 services 하위 요소로 선언할 수 있다.</li>
<li>여러 서비스가 볼륨을 재사용하려면 최상위 volumes 요소에서 정의된 볼륨을 기술해야 한다.</li>
<li><code>HOST_VOLUME:CONTAINER_PATH:[ACCESS_MODE]</code>
<ul>
<li><code>HOST_VOLUME</code>: 호스트 경로 또는 최상위 volumes 요소에서 정의한 볼륨 이름</li>
<li><code>CONTAINER_PATH</code>: 컨테이너의 경로</li>
<li><code>ACCESS_MODE</code>: 목록은 <code>,</code>으로 구분된다.
<ul>
<li><code>rw</code> : 읽기 및 쓰기(기본값)</li>
<li><code>ro</code> : 읽기 전용</li>
<li></li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">awesome/database</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">db-data:/etc/data</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backup</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">backup-service</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">db-data:/var/lib/backup/data</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">db-data</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">driver_opts</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">device</span>: <span style="color:#ae81ff">/host/path/to/volume</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">awesome/database</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/dir1:/etc/data</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backup</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">backup-service</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/dir2:/var/lib/backup/data:ro</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>DDD 핵심 정리</title><link>https://jo-minjun.github.io/notes/ddd-study/</link><pubDate>Fri, 30 Dec 2022 17:10:50 +0900</pubDate><guid>https://jo-minjun.github.io/notes/ddd-study/</guid><description>0. 참고 도메인 주도 개발 시작하기
도메인 주도 개발 시작하기 - YES24 핵사고날 아키텍처
Hexagonal Architecture with Java and Spring
https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/
예제 프로젝트
https://github.com/jo-minjun/order-delivery-project 1. 도메인이란 무엇일까? wikipedia: Domain (software engineering) A domain is the targeted subject area of a computer program. It is a term used in software engineering. Formally it represents the target subject of a specific programming project, whether narrowly or broadly defined.
소프트웨어 엔지니어링에서 사용되는 용어 컴퓨터 프로그램의 대상이 되는 영역 Example 소프트웨어 프로젝트의 목표가 특정 병원을 위한 프로그램을 만드는 경우 범위를 확장하여 모든 병원을 대상으로 하는 프로그램을 만드는 경우 상점과 기사를 이어주고 고객에게 물품을 전달해주는 라스트마일 서비스 2.</description><content:encoded><![CDATA[<h2 id="0-참고">0. 참고</h2>
<ul>
<li>
<p>도메인 주도 개발 시작하기</p>
<ul>
<li><a href="http://www.yes24.com/Product/Goods/108431347">도메인 주도 개발 시작하기 - YES24</a></li>
</ul>
</li>
<li>
<p>핵사고날 아키텍처</p>
<ul>
<li>
<p><a href="https://reflectoring.io/spring-hexagonal/">Hexagonal Architecture with Java and Spring</a></p>
</li>
<li>
<p><a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/">https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/</a></p>
</li>
</ul>
</li>
<li>
<p>예제 프로젝트</p>
<ul>
<li><a href="https://github.com/jo-minjun/order-delivery-project">https://github.com/jo-minjun/order-delivery-project</a></li>
</ul>
</li>
</ul>
<h2 id="1-도메인이란-무엇일까">1. 도메인이란 무엇일까?</h2>
<h3 id="wikipedia-domain-software-engineering">wikipedia: Domain (software engineering)</h3>
<blockquote>
<p>A domain is the targeted subject area of a <a href="https://en.wikipedia.org/wiki/Computer_program">computer program</a>. It is a term used in <a href="https://en.wikipedia.org/wiki/Software_engineering">software engineering</a>.
Formally it represents the target subject of a specific programming project, whether narrowly or broadly defined.</p>
</blockquote>
<ol>
<li>소프트웨어 엔지니어링에서 사용되는 용어</li>
<li>컴퓨터 프로그램의 대상이 되는 영역</li>
</ol>
<h3 id="example">Example</h3>
<ul>
<li>소프트웨어 프로젝트의 목표가 특정 병원을 위한 프로그램을 만드는 경우</li>
<li>범위를 확장하여 모든 병원을 대상으로 하는 프로그램을 만드는 경우</li>
<li>상점과 기사를 이어주고 고객에게 물품을 전달해주는 라스트마일 서비스</li>
</ul>
<h2 id="2-ddd란-무엇일까">2. DDD란 무엇일까?</h2>
<ul>
<li>Domain Driven Design이다.</li>
<li>프로그램을 도메인별로 나누어 설계하는 방법</li>
<li>모듈(도메인)간 응집도는 높이고, 결합도는 낮춰 준다.</li>
<li>DDD의 목표를 달성하기 위해 전략적 설계 패턴과 전술적 설계 패턴을 사용한다.</li>
</ul>
<h2 id="3-왜-ddd를-할까">3. 왜 DDD를 할까?</h2>
<ul>
<li>복잡도 관리
<ul>
<li>시간 경과에 따라 코드 라인이 늘어나고, 변경 비용이 증가한다.
<img loading="lazy" src="/images/notes/DDD-study/1.png" alt="1"  />

<a href="https://dreamix.eu/blog/java/why-good-clean-software-architecture-matters">https://dreamix.eu/blog/java/why-good-clean-software-architecture-matters</a></li>
</ul>
</li>
<li>개발자는 특정 도메인의 전문가보다 도메인에 대한 전문성이 떨어진다.
<ul>
<li>공인 중개사와 개발자</li>
<li>변호사와 개발자</li>
<li>인사팀과 개발자</li>
<li>…</li>
</ul>
</li>
<li>전문가와 기획자, 개발자의 언어가 다르다.
<ul>
<li>도저히 이해할 수 없는 말들…</li>
<li>네트워크 광전송 장비: OTN, PTN, ROADM, SERVICE, TUNNEL…</li>
</ul>
</li>
</ul>
<p>→ 최소 문서를 읽거나 대화할 때 서로가 하는 말을 이해하고 context를 맞춰 나가야 한다.</p>
<h2 id="4-전략적-설계">4. 전략적 설계</h2>
<h3 id="유비쿼터스-언어">유비쿼터스 언어</h3>
<ul>
<li>도메인 전문가, 기획자, 개발자 등 구성원들이 서로 다른 용어를 사용하면, 의사소통에 불편함이 있다.
<ul>
<li>지번주소 vs 구주소</li>
</ul>
</li>
</ul>
<p>→ <strong>유비쿼터스 언어</strong>를 사용해야 한다.</p>
<ul>
<li>구성원들 모두가 <strong>보편적으로 사용하는 언어</strong></li>
<li>구성원들의 공통된 언어를 만들고 대화, 문서, 코드, 테스트 <strong>모든 곳에서 같은 용어</strong>를 사용한다.</li>
</ul>
<h3 id="도메인-모델과-경계">도메인 모델과 경계</h3>
<ul>
<li>다시 도메인에 대해 짚어보자면
<ul>
<li>소프트웨어 프로젝트에서 대상이 되고, 해결해야 할 영역</li>
<li>온라인 쇼핑몰을 개발하는 프로젝트</li>
</ul>
</li>
<li>도메인은 다시 하위 도메인으로 나뉘어 진다.
<ul>
<li>회원, 혜택(쿠폰), 주문, 카탈로그, 배송, 결제…</li>
</ul>
</li>
<li><strong>도메인 모델</strong>
<ul>
<li>특정 도메인을 개념적으로 표현한 것</li>
<li>도메인에 대한 이해도에 따라 도메인 모델도 변경된다.
<img loading="lazy" src="/images/notes/DDD-study/2.png" alt="2"  />
</li>
</ul>
</li>
<li>위와 같은 서브 도메인을 하나의 도메인으로 표현하기는 불가능에 가깝다.</li>
<li>서브 도메인마다 같은 대상이라도 지칭하는 용어가 다를 수 있다.</li>
</ul>
<p>→ Problem Space가 된다.</p>
<ul>
<li>상품
<ul>
<li>카탈로그의 상품: 이미지, 상품명, 가격…</li>
<li>배송의 상품: 무게, 수량…</li>
</ul>
</li>
<li>회원
<ul>
<li>회원 도메인의 회원: 회원</li>
<li>주문 도메인의 회원: 주문자</li>
<li>배송 도메인의 회원: 받는 사람</li>
</ul>
</li>
<li>즉, 모델은 특정한 컨텍스트 하에서 완전한 의미를 갖는다.</li>
</ul>
<p>→ 각 서브 도메인마다 <strong>명시적으로 구분되는 경계</strong>를 가져서 섞이지 않도록 해야 한다.</p>
<h3 id="바운디드-컨텍스트">바운디드 컨텍스트</h3>
<ul>
<li>각 도메인 영역의 경계를 결정하는 <strong>명시적인 구분</strong></li>
<li>각각의 도메인이 가진 모델을 정확하게 표현하기 위함이다.</li>
</ul>
<p>→ 즉 문제를 해결하기 위한 공간, Solution Space이다.</p>
<ul>
<li>바운디드 컨텍스트를 구분하는 조건
<ul>
<li>같은 용어, 다른 의미
<ul>
<li><strong>계정</strong>을 의미하는 Account</li>
<li><strong>계좌</strong>를 의미하는 Account
→ 이런 경우 두 가지 의미를 하나의 도메인 모델에 포함해서는 안된다.</li>
</ul>
</li>
<li>같은 개념, 다른 용도
<ul>
<li>회원 서비스의 <strong>맴버</strong></li>
<li>주문 서비스의 <strong>맴버</strong>
→ 맴버는 서로 다른 도메인에 집중하고 있고, 발전의 방향성도 다르다.</li>
</ul>
</li>
<li>팀 조직 구조
<ul>
<li>A팀의 관심사는 주문, B팀의 관심사는 결제.
<ul>
<li>하나의 주문 도메인에서도 관심사에 따라 컨텍스트가 달라진다.</li>
</ul>
</li>
<li>한 팀이 하나의 시스템에서 온라인 쇼핑을 서비스한다.
<ul>
<li>서브 도메인은 회원, 카탈로그, 재고, 구매, 결제 등이 있다.</li>
<li>상품 컨텍스트에서 재고와 카탈로그를 구현한다.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>이상적으로는 바운디드 컨텍스트와 하위 도메인이 1대1로 대응되는 것이 좋다.</li>
<li>하지만 팀 상황이나 유비쿼터스 언어가 명확하게 정의되지 않아 1대1로 대응되지 않는 경우도 있다.
<img loading="lazy" src="/images/notes/DDD-study/3.png" alt="3"  />
</li>
</ul>
<h3 id="바운디드-컨텍스트-간-관계">바운디드 컨텍스트 간 관계</h3>
<ul>
<li>바운디드 컨텍스트는 어떻게든 연결되기 때문에 다양한 방식으로 관계를 형성한다.
<ul>
<li>고객/공급자</li>
<li>공유 커널</li>
<li>독립 방식</li>
</ul>
</li>
<li><strong>고객/공급자</strong>
<ul>
<li>가장 흔한 관계이다.</li>
<li>한쪽에서 **API를 제공(상류)**하고 다른쪽에서 **API를 호출(하류)**한다.
<img loading="lazy" src="/images/notes/DDD-study/4.png" alt="카탈로그 바운디드 컨텍스트는 추천 바운디드 컨텍스트에 의존한다."  />

카탈로그 바운디드 컨텍스트는 추천 바운디드 컨텍스트에 의존한다.</li>
</ul>
</li>
<li><strong>공유 커널</strong>
<ul>
<li>여러 바운디드 컨텍스트가 <strong>같은 모델을 공유</strong>하는 관계이다.</li>
<li>중복을 줄일 수 있지만 공유 모델을 사용하는 바운디드 컨텍스트가 서로 영향을 받을 수 있다.</li>
</ul>
</li>
<li><strong>독립 방식</strong>
<ul>
<li>여러 바운디드 컨텍스트가 <strong>외부에 의해 관계</strong>를 맺는다.
<ul>
<li>수동으로 두 바운디드 컨텍스트 간 통합시킨다.
<ul>
<li>사람에 의한 관계</li>
</ul>
</li>
<li>자동화 시스템을 개발해서 두 바운디드 컨텍스트를 통합시킨다.
<ul>
<li>자동화 시스템에 의한 관계</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="바운디드-컨텍스트-맵">바운디드 컨텍스트 맵</h3>
<ul>
<li>특정 바운디드 컨텍스트에 과도하게 집중하면 전체적인 바운디드 컨텍스트 간의 관계를 인식하지 못할 수 있다.</li>
<li>도메인을 더 잘 이해하거나 컨텍스트 간 관계가 바뀌면 컨텍스트 맵도 바뀐다.
<img loading="lazy" src="/images/notes/DDD-study/5.png" alt="5"  />
</li>
</ul>
<h2 id="5-핵사고날-아키텍처">5. 핵사고날 아키텍처</h2>
<ul>
<li>예제 프로젝트에 핵사고날 아키텍처를 적용했다.
<img loading="lazy" src="/images/notes/DDD-study/6.png" alt="6"  />

<a href="https://reflectoring.io/spring-hexagonal/">https://reflectoring.io/spring-hexagonal/</a></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>└── xxx
</span></span><span style="display:flex;"><span>    ├── adapter
</span></span><span style="display:flex;"><span>    │   ├── in
</span></span><span style="display:flex;"><span>    │   │   ├── xxxController.java
</span></span><span style="display:flex;"><span>    │   │   └── EventHandler.java <span style="color:#f92672">(</span>or MessageHandler.java<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    │   └── out
</span></span><span style="display:flex;"><span>    │       └── EventPublisher.java <span style="color:#f92672">(</span>or MessagePublisher.java<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    ├── application
</span></span><span style="display:flex;"><span>    │   ├── xxxService.java
</span></span><span style="display:flex;"><span>    │   └── port
</span></span><span style="display:flex;"><span>    │       ├── in
</span></span><span style="display:flex;"><span>    │       │   ├── xxxCommand.java
</span></span><span style="display:flex;"><span>    │       │   ├── xxxDto.java
</span></span><span style="display:flex;"><span>    │       │   └── xxxUsecase.java
</span></span><span style="display:flex;"><span>    │       └── out
</span></span><span style="display:flex;"><span>    │           ├── xxxEvent.java
</span></span><span style="display:flex;"><span>    │           ├── xxxEventPublisher.java
</span></span><span style="display:flex;"><span>    │           └── xxxRepository.java
</span></span><span style="display:flex;"><span>    └── domain
</span></span><span style="display:flex;"><span>        ├── AggregateRootEntity.java
</span></span><span style="display:flex;"><span>        └── ValueObject.java
</span></span></code></pre></div><h2 id="6-전술적-설계">6. 전술적 설계</h2>
<h3 id="도메인-영역의-주요-구성-요소">도메인 영역의 주요 구성 요소</h3>
<table>
<thead>
<tr>
<th>요소</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>엔티티 (ENTITY)</td>
<td>고유의 식별자를 갖는 객체로 자신의 라이프 사이클을 갖는다. 도메인의 고유한 개념을 표현한다. 도메인 모델의 데이터를 포함하며 해당 데이터와 관련된 기능을 함께 제공한다.</td>
</tr>
<tr>
<td>밸류 (VALUE)</td>
<td>고유의 식별자를 갖지 않는 객체다. 엔티티의 속성으로 사용할 뿐만 아니라 다른 밸류 타입의 속성으로도 사용할 수 있다.</td>
</tr>
<tr>
<td>애그리거트 (AGGREGATE)</td>
<td>애그리거트는 연관된 엔티티와 밸류 객체를 개념적으로 하나로 묶은 것이다.</td>
</tr>
<tr>
<td>리포지터리 (REPOSITORY)</td>
<td>도메인 모델의 영속성을 처리한다.</td>
</tr>
<tr>
<td>도메인 서비스 (DOMAIN SERVICE)</td>
<td>특정 엔티티에 속하지 않은 도메인 로직을 제공한다. 도메인 로직이 여러 엔티티와 밸류를 필요로 하면 도메인 서비스에서 로직을 구현한다.</td>
</tr>
</tbody>
</table>
<h3 id="엔티티--밸류">엔티티 &amp; 밸류</h3>
<ul>
<li>
<p>도메인 모델을 표현할 때 이용한다.</p>
</li>
<li>
<p>도메인 모델의 엔티티는 기능을 함께 제공한다.</p>
<ul>
<li>도메인 관점에서 도메인 로직을 구현하고 캡슐화해서 데이터가 임의로 변경되는 것을 막는다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.delivery.domain<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">changeDeliveryInfo</span><span style="color:#f92672">(</span>Address address<span style="color:#f92672">,</span> String phoneNumber<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  canChangeDelivery<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">address</span> <span style="color:#f92672">=</span> address<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">phoneNumber</span> <span style="color:#f92672">=</span> phoneNumber<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">canChangeDelivery</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">status</span><span style="color:#f92672">.</span><span style="color:#a6e22e">canChangeDelivery</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RuntimeException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;배송 정보 수정 불가&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>외부에서 setter를 이용해 배송지 정보를 변경한다면 배송지 변경 가능 여부 검증이 누락될 수 있고, 같은 로직이 반복될 수도 있다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">final</span> DeliveryStatus status <span style="color:#f92672">=</span> delivery<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatus</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 배송지 변경 조건
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">status</span><span style="color:#f92672">.</span><span style="color:#a6e22e">canChangeDelivery</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RuntimeException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;배송 정보 수정 불가&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>delivery<span style="color:#f92672">.</span><span style="color:#a6e22e">setAddress</span><span style="color:#f92672">(</span>newAddress<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>delivery<span style="color:#f92672">.</span><span style="color:#a6e22e">setPhoneNumber</span><span style="color:#f92672">(</span>newPhoneNumber<span style="color:#f92672">);</span>
</span></span></code></pre></div></li>
<li>
<p>밸류는 도메인 모델에서 두 개 이상의 데이터가 개념적으로 하나인 경우 사용한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.domain<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Table</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;orders&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Getter</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@NoArgsConstructor</span><span style="color:#f92672">(</span>access <span style="color:#f92672">=</span> AccessLevel<span style="color:#f92672">.</span><span style="color:#a6e22e">PROTECTED</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@AllArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@EqualsAndHashCode</span><span style="color:#f92672">(</span>of <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@ToString</span><span style="color:#f92672">(</span>of <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;orderLine&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;totalAmount&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;deliveryId&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;paymentId&#34;</span><span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Order</span> <span style="color:#66d9ef">implements</span> Serializable <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@GeneratedValue</span><span style="color:#f92672">(</span>strategy <span style="color:#f92672">=</span> GenerationType<span style="color:#f92672">.</span><span style="color:#a6e22e">IDENTITY</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> Long id<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Embedded</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> OrderLine orderLine<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// 밸류 타입, AttributeConverter를 이용함.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> Money totalAmount <span style="color:#f92672">=</span> Money<span style="color:#f92672">.</span><span style="color:#a6e22e">ZERO</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">...</span> <span style="color:#75715e">// 다른 필드
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.common<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Converter</span><span style="color:#f92672">(</span>autoApply <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MoneyConverter</span> <span style="color:#66d9ef">implements</span> AttributeConverter<span style="color:#f92672">&lt;</span>Money<span style="color:#f92672">,</span> BigDecimal<span style="color:#f92672">&gt;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> BigDecimal <span style="color:#a6e22e">convertToDatabaseColumn</span><span style="color:#f92672">(</span>Money attribute<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> attribute<span style="color:#f92672">.</span><span style="color:#a6e22e">getValue</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Money <span style="color:#a6e22e">convertToEntityAttribute</span><span style="color:#f92672">(</span>BigDecimal dbData<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> Money<span style="color:#f92672">(</span>dbData<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>엔티티는 @Entity 애너테이션을 사용한다.</p>
</li>
<li>
<p>밸류는 @Embeddable, @Embedded, @SecondaryTable, @ElementCollection, @CollectionTable을 사용한다.</p>
<ul>
<li>@ElementCollection은 생명주기를 상위 엔티티에 종속시킨다.</li>
<li>즉, cascade와 orphanRemoval 옵션을 제공하지 않는다.</li>
<li>@OneToMany(cascade = ALL, orphanRemoval = true)와 차이점
<ul>
<li>@ElementCollection은 식별자를 갖지 않는다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.domain<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Embedded</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> OrderLine orderLine<span style="color:#f92672">;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.domain<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Embeddable</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OrderLine</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@ElementCollection</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@CollectionTable</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;order_lines&#34;</span><span style="color:#f92672">,</span> joinColumns <span style="color:#f92672">=</span> <span style="color:#a6e22e">@JoinColumn</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;orders_id&#34;</span><span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> Set<span style="color:#f92672">&lt;</span>LineItem<span style="color:#f92672">&gt;</span> lineItems <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashSet<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span> <span style="color:#75715e">// 메서드
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>@AttributeOverride를 이용해서 @Embeddable 밸류의 애트리뷰트를 override할 수도 있다.</li>
</ul>
<h3 id="애그리거트">애그리거트</h3>
<ul>
<li>
<p>도메인이 커지면 도메인 모델이 복잡해진다.</p>
</li>
<li>
<p>도메인 모델이 복잡해지면 전체 구조에 초점을 맞추지 못하게 되고, 모델 간에 관계를 이해하기 어렵게 된다.</p>
</li>
<li>
<p>애그리거트는 관련 객체를 묶어서 <strong>상위 개념으로 표현</strong>해준다.</p>
<ul>
<li>Order 도메인은 주문, 주문 목록, 총 결제 금액 등 하위 모델로 구성된다.</li>
<li>이를 하나로 묶어 <strong>주문</strong>이라는 상위 개념으로 표현해준다.</li>
</ul>
</li>
<li>
<p>애그리거트는 루트 엔티티를 가지며, 이를 애그리거트 루트라 한다.</p>
</li>
<li>
<p>애그리거트 루트는 애그리거트에 속해 있는 엔티티와 밸류 객체를 이용해서 애그리거트가 구현해야 할 기능을 제공한다.</p>
<ul>
<li>애그리거트의 내부 구현을 숨겨서 애그리거트 단위로 구현을 캡슐화 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.delivery.domain<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> <span style="color:#75715e">// 애너테이션
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Delivery</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@GeneratedValue</span><span style="color:#f92672">(</span>strategy <span style="color:#f92672">=</span> GenerationType<span style="color:#f92672">.</span><span style="color:#a6e22e">IDENTITY</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> Long id<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Embedded</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> Address address<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> String phoneNumber<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">...</span> <span style="color:#75715e">// 다른 필드
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">changeDeliveryInfo</span><span style="color:#f92672">(</span>Address address<span style="color:#f92672">,</span> String phoneNumber<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    canChangeDelivery<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">address</span> <span style="color:#f92672">=</span> address<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">phoneNumber</span> <span style="color:#f92672">=</span> phoneNumber<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="리포지터리">리포지터리</h3>
<ul>
<li>리포지터리는 애그리거트 단위로 도메인 객체를 저장하고 조회한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.application.port.out<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> minjun.ddd.order.domain.Order<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.springframework.data.jpa.repository.JpaRepository<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">OrderRepository</span> <span style="color:#66d9ef">extends</span> JpaRepository<span style="color:#f92672">&lt;</span>Order<span style="color:#f92672">,</span> Long<span style="color:#f92672">&gt;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>
<p>애그리거트의 <strong>루트 엔티티만 리포지터리를 갖는다.</strong></p>
<ul>
<li>애그리거트의 밸류 등은 루트 엔티티와 생명 주기가 같다.</li>
<li><strong>생명 주기가 다르거나 데이터 변경 주체가 다르다면 다른 애그리거트일 가능성이 높다.</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.product.application.port.out<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> minjun.ddd.product.domain.Product<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.springframework.data.jpa.repository.JpaRepository<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">ProductRepository</span> <span style="color:#66d9ef">extends</span> JpaRepository<span style="color:#f92672">&lt;</span>Product<span style="color:#f92672">,</span> Long<span style="color:#f92672">&gt;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>Product 애그리거트는 Order나 Delivery와 연관이 있기 때문에 같은 애그리거트로 생각될 수 있다.</li>
<li>하지만 Order나 Delivery는 변경 주체가 주문자와 기사이지만, Product는 상품 관리자가 관리한다.</li>
</ul>
</li>
</ul>
<h3 id="도메인-서비스">도메인 서비스</h3>
<ul>
<li>도메인 영역을 개발하다 보면 <strong>한 애그리거트로 기능을 구현하지 못할 때</strong>가 있다.</li>
<li>결제 금액 계산 로직에 할인이 적용되는 경우
<ul>
<li>할인 쿠폰 애그리거트: 쿠폰별로 지정한 금액이나 비율에 따라 총 금액을 할인한다.</li>
<li>회원 애그리거트: 회원 등급에 따라 추가 할인이 가능하다.</li>
</ul>
</li>
<li>주문 애그리거트에 할인 관련 로직을 적용하면 할인 정책 변경시 주문 애그리거트가 변경된다.</li>
</ul>
<p>→ <strong>도메인 서비스 사용</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DiscountCalculationService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> Money <span style="color:#a6e22e">calculateDiscountAmounts</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>OrderLine<span style="color:#f92672">&gt;</span> orderLines<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>                                        List<span style="color:#f92672">&lt;</span>Coupon<span style="color:#f92672">&gt;</span> coupons<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>                                        MemberGrade grade<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		Money couponDiscount <span style="color:#f92672">=</span> coupons<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>coupon <span style="color:#f92672">-&gt;</span> calculateDiscount<span style="color:#f92672">(</span>coupon<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">.</span><span style="color:#a6e22e">reduce</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Money<span style="color:#f92672">(</span><span style="color:#ae81ff">0</span><span style="color:#f92672">),</span> <span style="color:#f92672">(</span>v1<span style="color:#f92672">,</span> v2<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> v1<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>v2<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Money membershipDiscount <span style="color:#f92672">=</span> calculateDiscount<span style="color:#f92672">(</span>orderer<span style="color:#f92672">.</span><span style="color:#a6e22e">getMember</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getGrade</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> couponDiscount<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>membershipDiscount<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> Money <span style="color:#a6e22e">calculateDiscount</span><span style="color:#f92672">(</span>Coupon coupon<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> Money <span style="color:#a6e22e">calculateDiscount</span><span style="color:#f92672">(</span>MemberGrade grade<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>
<p>외부 시스템이나 타 도메인과 <strong>연동 기능</strong>도 도메인 서비스가 될 수 있다.</p>
</li>
<li>
<p>상품 관리 시스템에서 사용자가 권한을 가졌는지 확인하기 위해 맴버 시스템을 연동하는 경우</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">PermissionChecker</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">hasUserPermission</span><span style="color:#f92672">(</span>String userId<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>여기서 인터페이스는 외부 시스템의 역할을 표현하기 위해 도메인 로직 관점에서 작성한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CreateProductService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> PermissionChecker permissionChecker<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> Long <span style="color:#a6e22e">createProduct</span><span style="color:#f92672">(</span>CreateProductRequest req<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		validate<span style="color:#f92672">(</span>req<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>permissionChecker<span style="color:#f92672">.</span><span style="color:#a6e22e">hasUserPermission</span><span style="color:#f92672">(</span>req<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserId</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> NoPermissionException<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">...</span> <span style="color:#75715e">// 생성
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="이벤트">이벤트</h3>
<ul>
<li>
<p>API를 이용하는 방법은 <strong>시스템간 결합 문제</strong>를 발생시킨다.</p>
<ul>
<li>외부 서비스의 성능</li>
<li>트랜잭션 처리 정책</li>
<li>설계상 문제</li>
</ul>
</li>
<li>
<p><strong>외부 서비스의 성능</strong></p>
</li>
<li>
<p><strong>트랜잭션 처리 정책</strong></p>
<ol>
<li>환불 외부 서비스에서 익셉션이 발생하면 주문까지 트랜잭션을 롤백한다.</li>
<li>주문만 취소 상태로 변경하고 환불은 나중에 처리한다.</li>
</ol>
</li>
<li>
<p><strong>설계상 문제</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.application.service<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@RequiredArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Transactional</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OrderService</span> <span style="color:#66d9ef">implements</span> OrderUsecase <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> PaymentPort paymentPort<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">cancelOrder</span><span style="color:#f92672">(</span>Long orderId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">final</span> Order order <span style="color:#f92672">=</span> findOrder<span style="color:#f92672">(</span>orderId<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Payment 도메인 로직
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">final</span> Boolean responseFromPayment <span style="color:#f92672">=</span> paymentPort<span style="color:#f92672">.</span><span style="color:#a6e22e">cancelPayment</span><span style="color:#f92672">(</span>order<span style="color:#f92672">.</span><span style="color:#a6e22e">getPaymentId</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>responseFromPayment<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RuntimeException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;결제 취소 실패&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Order 도메인 로직
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    order<span style="color:#f92672">.</span><span style="color:#a6e22e">cancelOrder</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>다른 도메인의 로직이 섞이고, 트랜잭션 처리 정책 및 외부 서비스 영향이 증가한다.</li>
</ul>
</li>
</ul>
<p><strong>→ 시스템의 결합도를 낮추기 위해 이벤트를 사용한다.</strong></p>
<ul>
<li>
<p>이벤트는 <strong>과거에 벌어진 어떤 것</strong>을 의미하며, <strong>상태가 변경</strong>됐다는 것을 의미한다.</p>
</li>
<li>
<p>이벤트는 다음과 같이 네 개의 구성요소를 가진다.
<img loading="lazy" src="/images/notes/DDD-study/7.png" alt="7.png"  />
</p>
<ul>
<li>
<p>이벤트</p>
<ul>
<li>이벤트 종류, 발생 시간, 이벤트 관련 정보</li>
</ul>
</li>
<li>
<p>이벤트 생성 주체</p>
<ul>
<li>도메인 로직을 실행해서 <strong>상태가 바뀌면</strong> 관련 이벤트를 발생시킨다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.delivery.application<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">startDelivery</span><span style="color:#f92672">(</span>Long deliveryId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> Delivery delivery <span style="color:#f92672">=</span> deliveryRepository<span style="color:#f92672">.</span><span style="color:#a6e22e">findById</span><span style="color:#f92672">(</span>deliveryId<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">.</span><span style="color:#a6e22e">orElseThrow</span><span style="color:#f92672">(</span>NoSuchElementException<span style="color:#f92672">::</span><span style="color:#66d9ef">new</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  delivery<span style="color:#f92672">.</span><span style="color:#a6e22e">startDelivery</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  deliveryEventPublisher<span style="color:#f92672">.</span><span style="color:#a6e22e">publish</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> DeliveryStartedEvent<span style="color:#f92672">(</span>delivery<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>이벤트 디스패처</p>
<ul>
<li>핸들러에 <strong>이벤트를 전파</strong>한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.delivery.adapter.out<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// org.springframework.context.ApplicationEventPublisher
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> ApplicationEventPublisher publisher<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">publish</span><span style="color:#f92672">(</span>DeliveryEvent event<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  publisher<span style="color:#f92672">.</span><span style="color:#a6e22e">publishEvent</span><span style="color:#f92672">(</span>event<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Order Event Published: {} {}&#34;</span><span style="color:#f92672">,</span> event<span style="color:#f92672">.</span><span style="color:#a6e22e">getDelivery</span><span style="color:#f92672">(),</span> event<span style="color:#f92672">.</span><span style="color:#a6e22e">getTimestamp</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>이벤트 핸들러</p>
<ul>
<li>이벤트 생성 주체가 발생시킨 이벤트에 반응한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> minjun.ddd.order.adapter.in<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@EventListener</span><span style="color:#f92672">(</span>DeliveryStartedEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">handleDeliveryStartedEvent</span><span style="color:#f92672">(</span>DeliveryStartedEvent event<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  orderUsecase<span style="color:#f92672">.</span><span style="color:#a6e22e">startDelivery</span><span style="color:#f92672">(</span>event<span style="color:#f92672">.</span><span style="color:#a6e22e">getDelivery</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getOrderId</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>위와 같은 방법이 아닌, <strong>메시징 시스템을 이용한 방법</strong>도 가능하다.</p>
<ul>
<li>이벤트 저장소를 이용한 메시징 (<strong>Transactional Outbox Pattern</strong>)</li>
<li>이벤트 발행 서비스
<img loading="lazy" src="/images/notes/DDD-study/8.png" alt="transactional-outbox-pattern.png"  />
</li>
<li>이벤트 소비 서비스
<img loading="lazy" src="/images/notes/DDD-study/9.png" alt="idempotent-receiver.png"  />
</li>
</ul>
</li>
</ul>
]]></content:encoded></item><item><title>MSA 개발 스택 빠르게 훑어보기</title><link>https://jo-minjun.github.io/notes/msa-stack-quick-peek/</link><pubDate>Wed, 28 Dec 2022 17:10:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/msa-stack-quick-peek/</guid><description>1. 요구사항 아주 간단한 웹 기반 ITunes 주요 데이터는 다음과 같다. 가수 (Singer) 이름 정보를 가진다. 앨범 (Album) 발매 날짜, 앨범 제목 정보를 가진다. 노래 (Song) 노래 제목과 재생 시간 정보를 가진다. 공통 데이터 생성 시간 업데이트 시간 생성한 사람 업데이트한 사람 주요 기능 가수를 등록할 수 있다. 앨범을 등록할 수 있다. 노래를 등록할 수 있다. 노래 목록들을 조회할 수 있다. 노래를 조회할 수 있다. 노래를 업데이트 할 수 있다. 노래를 삭제할 수 있다.</description><content:encoded><![CDATA[<h2 id="1-요구사항">1. 요구사항</h2>
<ul>
<li>아주 간단한 웹 기반 ITunes</li>
<li>주요 데이터는 다음과 같다.
<ul>
<li>가수 (Singer)
<ul>
<li>이름 정보를 가진다.</li>
</ul>
</li>
<li>앨범 (Album)
<ul>
<li>발매 날짜, 앨범 제목 정보를 가진다.</li>
</ul>
</li>
<li>노래 (Song)
<ul>
<li>노래 제목과 재생 시간 정보를 가진다.</li>
</ul>
</li>
<li>공통 데이터
<ul>
<li>생성 시간</li>
<li>업데이트 시간</li>
<li>생성한 사람</li>
<li>업데이트한 사람</li>
</ul>
</li>
</ul>
</li>
<li>주요 기능
<ul>
<li>가수를 등록할 수 있다.</li>
<li>앨범을 등록할 수 있다.</li>
<li>노래를 등록할 수 있다.</li>
<li>노래 목록들을 조회할 수 있다.</li>
<li>노래를 조회할 수 있다.</li>
<li>노래를 업데이트 할 수 있다.</li>
<li>노래를 삭제할 수 있다.</li>
</ul>
</li>
</ul>
<h3 id="엔티티-class">엔티티 Class</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/1.png" alt="1"  />
</p>
<h2 id="2-프로젝트-scaffolding">2. 프로젝트 scaffolding</h2>
<h3 id="섀시-패턴">섀시 패턴</h3>
<ul>
<li>아래와 같은 프로젝트들의 공통 관심사를 편리하게 설정할 수 있다.
<ul>
<li>health check 패턴: actuator</li>
<li>개발 생산성 확보: spring-configuration-processor, lombok, mapstruct:</li>
<li>로깅 패턴: logback, request - response 로깅</li>
<li>추적 패턴: B3 Propagation(Sleuth), Sentry 적용</li>
<li>로컬 개발 환경: docker-compose를 이용한 local cluster 구성 (UAA + MySQL + Kafka + …)</li>
<li>Persistence: QueryDSL, JPA Specification integration</li>
<li>API-First: OpenApi Generator 및 Zalando problem details 연동</li>
<li>Scheduler: ShedLock 연동</li>
<li>Security: UAA 및 리소스 서버 통합</li>
<li>CI / CD: 도커 이미지 빌드, 젠킨스 연동</li>
</ul>
</li>
</ul>
<h3 id="msa-bootcamp-프로젝트-세팅-meshkorea">msa-bootcamp 프로젝트 세팅 (Meshkorea)</h3>
<ol>
<li>
<p><code>git clone https://github.com/meshkorea/msa-starter.git</code></p>
<ul>
<li>starter project를 clone한다.</li>
</ul>
</li>
<li>
<p><code>cd msa-starter &amp;&amp; ./gradlew generate</code></p>
<ul>
<li>위 명령어를 수행하면 아래와 같은 세팅 메세지가 나온다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Starting a Gradle Daemon <span style="color:#f92672">(</span>subsequent builds will be faster<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt; Task :getBuildInfo
</span></span><span style="display:flex;"><span>&gt; WebMVC/JPA 프로젝트인가요<span style="color:#f92672">(</span>m<span style="color:#f92672">)</span>? WebFlux/R2DBC 프로젝트인가요<span style="color:#f92672">(</span>f<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>default: m<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>17s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 부릉 프로젝트입니까<span style="color:#f92672">(</span>y/n, default: n<span style="color:#f92672">)</span>?:
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>27s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 사용하려는 자바 버전은 무엇입니까<span style="color:#f92672">(</span>1.8/11, default: 11<span style="color:#f92672">)</span>?:
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>31s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span>
</span></span><span style="display:flex;"><span>&gt; 프로젝트 이름은 무엇입니까<span style="color:#f92672">(</span>default: example<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>35s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 그룹 이름은 무엇입니까<span style="color:#f92672">(</span>default: com.vroong<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>38s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 웹 서버 포트는 무엇입니까<span style="color:#f92672">(</span>default: 8080<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>42s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 웹 요청 및 응답에 사용할 미디어 타입은 무엇입니까<span style="color:#f92672">(</span>default: application/vnd.vroong.private.v1+json<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>47s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>진행할까요<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;n&#39;</span> to quit<span style="color:#f92672">)</span>? <span style="color:#f92672">[</span>osArch:intel, projectType:v, projectName:example, groupName:com.vroong, packageName:com.vroong.example, portNumber:8080, mediaType:application/vnd.vroong.private.v1+json, javaVersion:11, dockerImage:amazoncorretto:11-alpine-jdk, skipTokens:<span style="color:#f92672">[</span>.DS_Store<span style="color:#f92672">]]</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>50s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt; Task :generate
</span></span></code></pre></div></li>
<li>
<p><code>cp -r build {path-to-your-project}</code></p>
</li>
<li>
<p><code>cd {path-to-your-project} &amp;&amp; ./gradlew clean build</code></p>
</li>
<li>
<p><code>git init</code></p>
</li>
</ol>
<h3 id="로컬-개발-환경-구동-방법">로컬 개발 환경 구동 방법</h3>
<ol>
<li>JDK 설치
<ul>
<li>corretto11</li>
</ul>
</li>
<li>jhipster-uaa 세팅
<ol>
<li>msa-starter 디렉토리의 jhipster-uaa.zip을 해제한다.</li>
<li><code>cd jhipster-uaa &amp;&amp; ./gradlew jibDockerBuild -Djib.to.image=jhipster-uaa -Djib.to.tags=latest</code></li>
<li>로컬에서는 jhipster-uaa를 사용하지만, EKS에 올렸을 때는 이미 구동중인 vroong-uaa를 사용한다.</li>
</ol>
</li>
<li>도커 구동
<ul>
<li><code>./gradlew clusterUp</code></li>
<li>MySQL (3306)</li>
<li>Kafka (9092)</li>
<li>jhipster-uaa (9999)</li>
</ul>
</li>
<li>애플리케이션 구동</li>
</ol>
<h2 id="3-api-first-개발-방법론">3. API-First 개발 방법론</h2>
<h3 id="api-first-개발-방법론">API-First 개발 방법론</h3>
<ul>
<li>API를 중심으로 제품을 설계하는 방법이다.</li>
<li>API는 중요한 비즈니스 요소이며, 개발 조직에 API를 제공하는 것이 높은 우선순위를 가진다고 인식하는 것이다.</li>
</ul>
<h3 id="api-first-장점">API-First 장점</h3>
<ul>
<li><strong>일관성 제공</strong>
<ul>
<li>API-First 도구를 사용하여 일관성 있는 설계 및 문서화를 통해 일관된 개발자 경험을 제공할 수 있도록 해준다.</li>
</ul>
</li>
<li><strong>병렬 개발 편의성</strong>
<ul>
<li>API를 먼저 설계하고 결과물로 나온 API Spec을 이용해서 서버 스켈레톤과 클라이언트 SDK(API 문서 + 클라이언트 라이브러리 Stub)를 생성할 수 있고 클라이언트와 서버가 생성된 코드를 이용해서 빠르게 개발을 시작할 수 있다.</li>
</ul>
</li>
<li><strong>개발 속도 향상</strong>
<ul>
<li>API-First 도구는 클라이언트 SDK를 생성해주고, 이를 사내 Repository에 공유할 수 있다.</li>
<li>개발자들은 Mock API를 사용함으로써, API가 완성되기 전에 클라이언트를 구축할 수 있다.</li>
</ul>
</li>
<li><strong>빠른 피드백 제공</strong>
<ul>
<li>클라이언트 개발자는 서버 개발자가 개발 완료 후 API를 제공할 때까지 기다리지 않고, API 문서와 Mock API를 이용하여 설계를 검토하고 검증해볼 수 있다.</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/2.png" alt="2"  />
</p>
<h3 id="api-first-도구---oas-openapi-specification">API-First 도구 - OAS (OpenApi Specification)</h3>
<ul>
<li>OAS는 REST API를 위한 IDL(Interface Defintion Language) 이다.
<ul>
<li>API 스펙 및 기능, 설명을 기술한다.</li>
</ul>
</li>
<li>OAS 파일은 YAML 또는 JSON으로 작성할 수 있다.</li>
<li>OAS 파일은 아래 내용을 포함한 내용을 기술할 수 있다.
<ul>
<li>API endpoint와 HTTP method (GET /users, POST /users 등)</li>
<li>각 API의 요청과 응답의 파라미터</li>
<li>인증 method</li>
<li>이용 방법, 라이센스, 연락처 등과 기타 정보</li>
</ul>
</li>
<li>Swagger Editor/IDE plugin를 사용하면 OpenApi Specification의 문법 오류와 UI를 확인 할 수 있다.</li>
</ul>
<h3 id="openapi-generator의-특징">OpenApi Generator의 특징</h3>
<ul>
<li>OpenApi Generator를 사용하면 서버의 코드 스켈레톤과 클라이언트의 SDK를 자동으로 생성해준다.
<ul>
<li>서버 스켈레톤은 각 API에 대한 기술없이, 구현만 해주면 된다.</li>
<li>JAVA 뿐만 아니라 PHP, GO, C++, C#, Python, Ruby, Typescript 등 대부분의 언어를 지원한다.</li>
<li>API Interface 뿐만 아니라 model도 구현해주고, 정규 표현식 또는 다른 제한을 validation 까지 해준다.</li>
</ul>
</li>
<li>브라우저에서 사용자가 직접 호출해볼 수 있는 interactive API 문서를 만들어 준다.
<ul>
<li>Ex) Swagger Editor</li>
</ul>
</li>
</ul>
<h3 id="oas-문법">OAS 문법</h3>
<ul>
<li>
<p><a href="https://swagger.io/docs/specification/basic-structure/">https://swagger.io/docs/specification/basic-structure/</a></p>
</li>
<li>
<p>간단한 OAS 예시</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">openapi</span>: <span style="color:#e6db74">&#34;3.0.1&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">info</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">title</span>: <span style="color:#e6db74">&#34;msa-bootcamp&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">1.0.0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">servers</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://localhost:8080</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Local server</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">/api/singers</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">post</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">description</span>: <span style="color:#ae81ff">create an singer</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">operationId</span>: <span style="color:#ae81ff">createSinger</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">Singer</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">requestBody</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">description</span>: <span style="color:#ae81ff">singer model</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">content</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">application/vnd.vroong.private.v1+json</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">schema</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/CreateSingerRequest&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">responses</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;201&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/Created&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;400&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/BadRequest&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;401&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/Unauthorized&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;403&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/Forbidden&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;500&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/ServerError&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">components</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">schemas</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">CommonProperties</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">createdAt</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/DateTime&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">updatedAt</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/DateTime&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">createdBy</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/UUID&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">updatedBy</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/UUID&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Page</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">size</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int32</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">default</span>: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">totalElements</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int64</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">totalPages</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int32</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">number</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int32</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">default</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">CreateSingerRequest</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">required</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">name</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Singer</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">allOf</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/CommonProperties&#34;</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">singerId</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/LongId&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="서버-코드-스켈레톤-생성-및-클라이언트-sdk-생성">서버 코드 스켈레톤 생성 및 클라이언트 SDK 생성</h3>
<ul>
<li>
<p>OpenApi Generator를 사용한다.</p>
<ul>
<li><a href="https://openapi-generator.tech/docs/installation">https://openapi-generator.tech/docs/installation</a></li>
</ul>
</li>
<li>
<p>서버 코드 스켈레톤 생성</p>
<ul>
<li>아래와 같이 gradle이 정의되어 있어야 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>plugin <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	id <span style="color:#e6db74">&#39;org.openapi.generator&#39;</span> version <span style="color:#e6db74">&#39;4.3.1&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>openApiGenerate <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    generatorName <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;spring&#39;</span>
</span></span><span style="display:flex;"><span>    inputSpec <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span>$rootDir<span style="color:#e6db74">/src/main/resources/swagger/api.yml&#34;</span>.toString<span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    outputDir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span>$buildDir<span style="color:#e6db74">/openapi&#34;</span>.toString<span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    apiPackage <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;com.vroong.msabootcamp.api&#39;</span>
</span></span><span style="display:flex;"><span>    modelPackage <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;com.vroong.msabootcamp.api.model&#39;</span>
</span></span><span style="display:flex;"><span>    modelNameSuffix <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Dto&#34;</span>
</span></span><span style="display:flex;"><span>    apiFilesConstrainedTo <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    modelFilesConstrainedTo <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    supportingFilesConstrainedTo <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;ApiUtil.java&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    configOptions <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>            delegatePattern: <span style="color:#e6db74">&#34;true&#34;</span>,
</span></span><span style="display:flex;"><span>            title: <span style="color:#e6db74">&#34;msabootcamp&#34;</span>,
</span></span><span style="display:flex;"><span>            useTags: <span style="color:#e6db74">&#34;true&#34;</span>,
</span></span><span style="display:flex;"><span>            dateLibrary: <span style="color:#e6db74">&#34;java8&#34;</span>,
</span></span><span style="display:flex;"><span>            java8: <span style="color:#e6db74">&#34;true&#34;</span>,
</span></span><span style="display:flex;"><span>            hideGenerationTimestamp: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    validateSpec <span style="color:#f92672">=</span> true
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sourceSets <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    main <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        java <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            srcDir file<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>project.buildDir.path<span style="color:#e6db74">}</span><span style="color:#e6db74">/openapi/src/main/java&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./gradlew openApiGenerate
</span></span></code></pre></div><ul>
<li>Stub을 생성하면 아래의 파일이 생성된다.
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/3.png" alt="3"  />

<ul>
<li>model에는 OAS에서 정의한 schema를 가진 DTO가 있다.</li>
</ul>
</li>
</ul>
</li>
<li>
<p>클라이언트 SDK 빌드 및 배포</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./gradlew :clients:clean :clients:publish -Dorg.gradle.internal.publish.checksums.insecure<span style="color:#f92672">=</span>true
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 배포 결과는 https://nexus.mm.meshkorea.net/ 에서 확인할 수 있습니다.</span>
</span></span></code></pre></div><h2 id="4-controller-작성">4. Controller 작성</h2>
<ul>
<li>
<p>서버 코드 스켈레톤을 이용해서 controller를 구현한다.
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/4.png" alt="4"  />
</p>
</li>
<li>
<p>SingerApi</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * https://openapi-generator.tech
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Do not edit the class manually.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@javax.annotation.Generated</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;org.openapitools.codegen.languages.SpringCodegen&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Validated</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Api</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Singer&#34;</span><span style="color:#f92672">,</span> description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;the Singer API&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">SingerApi</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> SingerApiDelegate <span style="color:#a6e22e">getDelegate</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SingerApiDelegate<span style="color:#f92672">()</span> <span style="color:#f92672">{};</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * POST /api/singers
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * create an singer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param createSingerRequestDto singer model (optional)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @return Created (status code 201)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Bad Request (status code 400)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Unauthorized (status code 401)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Forbidden (status code 403)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Internal Server Error (status code 500)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@ApiOperation</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> nickname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;createSinger&#34;</span><span style="color:#f92672">,</span> notes <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;create an singer&#34;</span><span style="color:#f92672">,</span> authorizations <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@Authorization</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;jhipster-uaa&#34;</span><span style="color:#f92672">,</span> scopes <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">}),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@Authorization</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;jhipster-uaa&#34;</span><span style="color:#f92672">,</span> scopes <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">},</span> tags<span style="color:#f92672">={</span> <span style="color:#e6db74">&#34;Singer&#34;</span><span style="color:#f92672">,</span> <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@ApiResponses</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">201</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Created&#34;</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">400</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Bad Request&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">401</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Unauthorized&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">403</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Forbidden&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Internal Server Error&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span> <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@RequestMapping</span><span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>        method <span style="color:#f92672">=</span> RequestMethod<span style="color:#f92672">.</span><span style="color:#a6e22e">POST</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>        value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/api/singers&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>        produces <span style="color:#f92672">=</span> <span style="color:#f92672">{</span> <span style="color:#e6db74">&#34;application/problem+json&#34;</span> <span style="color:#f92672">},</span>
</span></span><span style="display:flex;"><span>        consumes <span style="color:#f92672">=</span> <span style="color:#f92672">{</span> <span style="color:#e6db74">&#34;application/vnd.vroong.private.v1+json&#34;</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> ResponseEntity<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@ApiParam</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;singer model&#34;</span><span style="color:#f92672">)</span> <span style="color:#a6e22e">@Valid</span> <span style="color:#a6e22e">@RequestBody</span><span style="color:#f92672">(</span>required <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span> CreateSingerRequestDto createSingerRequestDto<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> getDelegate<span style="color:#f92672">().</span><span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>createSingerRequestDto<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>SingerApiController</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@javax.annotation.Generated</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;org.openapitools.codegen.languages.SpringCodegen&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Controller</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@RequestMapping</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;${openapi.msabootcamp.base-path:}&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SingerApiController</span> <span style="color:#66d9ef">implements</span> SingerApi <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> SingerApiDelegate delegate<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">SingerApiController</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@org.springframework.beans.factory.annotation.Autowired</span><span style="color:#f92672">(</span>required <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span> SingerApiDelegate delegate<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">delegate</span> <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">ofNullable</span><span style="color:#f92672">(</span>delegate<span style="color:#f92672">).</span><span style="color:#a6e22e">orElse</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> SingerApiDelegate<span style="color:#f92672">()</span> <span style="color:#f92672">{});</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> SingerApiDelegate <span style="color:#a6e22e">getDelegate</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> delegate<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>SingerApiDelegate</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * A delegate to be called by the {@link SingerApiController}}.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Implement this interface with a {@link org.springframework.stereotype.Service} annotated class.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@javax.annotation.Generated</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;org.openapitools.codegen.languages.SpringCodegen&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">SingerApiDelegate</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> Optional<span style="color:#f92672">&lt;</span>NativeWebRequest<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getRequest</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * POST /api/singers
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * create an singer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param createSingerRequestDto singer model (optional)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @return Created (status code 201)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Bad Request (status code 400)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Unauthorized (status code 401)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Forbidden (status code 403)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Internal Server Error (status code 500)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @see SingerApi#createSinger
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> ResponseEntity<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>CreateSingerRequestDto createSingerRequestDto<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> ResponseEntity<span style="color:#f92672">&lt;&gt;(</span>HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">NOT_IMPLEMENTED</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>SingerApiDeleateImpl</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@RequiredArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SingerApiDelegateImpl</span> <span style="color:#66d9ef">implements</span> SingerApiDelegate <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> SingerService singerService<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> ResponseEntity<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>CreateSingerRequestDto createSingerRequestDto<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    SingerDto singerDto <span style="color:#f92672">=</span> singerService<span style="color:#f92672">.</span><span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>createSingerRequestDto<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ResponseEntity
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">created</span><span style="color:#f92672">(</span>HeaderUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">uri</span><span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>singerDto<span style="color:#f92672">.</span><span style="color:#a6e22e">getSingerId</span><span style="color:#f92672">())))</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="5-messaging">5. Messaging</h2>
<ul>
<li>이벤트 메세지 또는 커맨드 메세지를 이용하여 상호간에 통신하는 방식</li>
</ul>
<h3 id="이벤트">이벤트</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/5.png" alt="5"  />
</p>
<ul>
<li>이미 일어난 정보에 대한 메세지이다.</li>
<li>immutable 하다.</li>
<li>producer는 이벤트의 comsumer가 누구인지, 무엇을 하는지 모른다.</li>
<li>ex)
<ul>
<li>신규 물품이 입고되었을 때 필요한 시스템만 이벤트를 구독한다.</li>
<li>신규 물품이 입고된 것은 이미 일어난 사건이다.</li>
</ul>
</li>
</ul>
<h3 id="커맨드">커맨드</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/6.png" alt="6"  />
</p>
<ul>
<li>수행할 작업에 대한 하나의 시스템에서 다른 시스템으로의 메세지</li>
<li>미래에 발생할 사건의 트리거가 된다.</li>
</ul>
<h3 id="메시징을-사용하는-이유">메시징을 사용하는 이유</h3>
<ul>
<li>REST API는 클라이언트가 요청하는 시점에 서버가 항상 가용해야 하는 문제가 있다.</li>
<li>REST와 같은 동기 IPC (Inter Process Communication) 문제점을 해결하고자 비동기 메시징을 사용한다.</li>
<li>메시지 브로커가 가용하다면 consumer의 장애 시점에도 producer가 발행한 메시지는 메시지 브로커에 적재되며, consumer가 장애에서 복구되면 메시지를 소비할 수 있다.</li>
</ul>
<h3 id="transactional-outbox-pattern">Transactional Outbox Pattern</h3>
<ul>
<li>메시징을 통해 데이터를 처리할 때 데이터의 일관성을 처리하기 위해 사용한다.</li>
<li>producer 역할을 하는 서비스에서 발생한 도메인 이벤트/메시지는 적어도 한번(at least once) 발행해야 한다.</li>
<li>방법
<ol>
<li>producer 역할을 하는 서비스에 OUTBOX 테이블을 생성하고, 도메인 이벤트/메시지를 트랜잭션 범위안에서 OUTBOX 테이블에 insert한다.</li>
<li>별도의 MessageRelay가 주기적으로 OUTBOX 테이블에 있는 메세지를 발행한다.
<ul>
<li>MessageRelay는 polling publisher로 구현할 수 있다.
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/7.png" alt="transactional-outbox-pattern.png"  />
</li>
</ul>
</li>
</ol>
</li>
<li>데이터베이스 트랜잭션이 커밋된 경우에만 MessageRelay를 통해서 메시지를 발행한다.</li>
<li>MessageRelay를 통하기 때문에 메세지 발행에 시차는 생기지만, Eventual Consistency를 유지한다.</li>
</ul>
<h3 id="멱등-수신자-idempotent-receiver">멱등 수신자 (Idempotent Receiver)</h3>
<ul>
<li>consumer 역할을 하는 서비스는 동일한 메시지를 중복으로 여러번 수신할 수 있으므로, 중복 메시지로 인한 사이드 이펙트가 발생하지 않도록 멱등 수신자를 구현해야 한다.</li>
<li>방법
<ol>
<li>PROCESSED_MESSAGE 테이블을 추가한다.</li>
<li>메세지를 수신하면 식별자를 이용해서 테이블에서 조회한다.</li>
<li>테이블에서 조회된다면 메세지를 무시한다.</li>
<li>조회되지 않는 메세지면 PROCESSED_MESSAGE에 저장하고 처리한다.</li>
</ol>
<ul>
<li>(메세지 식별자에 unique 제약조건을 걸어서 구분할 수도 있다.)
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/8.png" alt="idempotent-receiver.png"  />
</li>
</ul>
</li>
</ul>
<h3 id="kafka-코드">Kafka 코드</h3>
<ul>
<li>
<p>application.yml</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">spring</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">cloud</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">stream</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kafka</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">binder</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">headers</span>:
</span></span><span style="display:flex;"><span>            [<span style="color:#e6db74">&#34;messageId&#34;</span>, <span style="color:#e6db74">&#34;messageType&#34;</span>, <span style="color:#e6db74">&#34;messageVersion&#34;</span>, <span style="color:#e6db74">&#34;messageSource&#34;</span>]
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">auto-create-topics</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># Kafka - SASL_SSL설정과 SCRAM-SHA-512 를 이용한 ID Password 설정</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># @see https://wiki.mm.meshkorea.net/pages/viewpage.action?pageId=95856174</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">configuration</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">sasl</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">jaas</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">config</span>: <span style="color:#e6db74">&#39;org.apache.kafka.common.security.plain.PlainLoginModule required username=&#34;alice&#34; password=&#34;alice-secret&#34;;&#39;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">mechanism</span>: <span style="color:#ae81ff">PLAIN</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">security</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">SASL_PLAINTEXT</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bindings</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">messageChannel</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">binder</span>: <span style="color:#ae81ff">kafka</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">destination</span>: <span style="color:#ae81ff">local-msabootcamp-output</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">producer</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># @see https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/3.0.10.RELEASE/reference/html/spring-cloud-stream-binder-kafka.html#kafka-producer-properties</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">header-mode</span>: <span style="color:#ae81ff">headers</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">partition-key-expression</span>: <span style="color:#ae81ff">headers[&#39;partitionKey&#39;]</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">partition-count</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">subscribableChannel</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">binder</span>: <span style="color:#ae81ff">kafka</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">destination</span>: <span style="color:#ae81ff">local-msabootcamp-output</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">content-type</span>: <span style="color:#ae81ff">application/json</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">consumer</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">header-mode</span>: <span style="color:#ae81ff">embeddedHeaders</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">checkpointMode</span>: <span style="color:#ae81ff">record</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">default-binder</span>: <span style="color:#ae81ff">kafka</span>
</span></span></code></pre></div><ul>
<li><code>spring.cloud.stream.kafka.binder</code> 를 이용해서 <code>KafkaBinderConfigurationProperties.class</code> 의 값을 세팅</li>
</ul>
</li>
<li>
<p>PersistentEventCreator.class</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersistentEventCreator</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> PersistentEventRepository repository<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> ObjectMapper objectMapper<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Transactional</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">create</span><span style="color:#f92672">(</span>String eventType<span style="color:#f92672">,</span> Object source<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    String body <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      body <span style="color:#f92672">=</span> objectMapper<span style="color:#f92672">.</span><span style="color:#a6e22e">writeValueAsString</span><span style="color:#f92672">(</span>source<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>IOException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      log<span style="color:#f92672">.</span><span style="color:#a6e22e">error</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Serialization failed&#34;</span><span style="color:#f92672">,</span> e<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">final</span> PersistentEvent entity <span style="color:#f92672">=</span> PersistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">newInstance</span><span style="color:#f92672">(</span>eventType<span style="color:#f92672">,</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">(),</span> body<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    repository<span style="color:#f92672">.</span><span style="color:#a6e22e">save</span><span style="color:#f92672">(</span>entity<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>PersistentEventPublisher.class - publish()</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Transactional</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Scheduled</span><span style="color:#f92672">(</span>fixedDelayString <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;PT50S&#34;</span><span style="color:#f92672">,</span> initialDelayString <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;PT10S&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SchedulerLock</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;PersistentEventPublisher&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Async</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">publish</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> Instant timeScope <span style="color:#f92672">=</span> Instant<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">(</span>Clock<span style="color:#f92672">.</span><span style="color:#a6e22e">system</span><span style="color:#f92672">(</span>ZONE_ID<span style="color:#f92672">)).</span><span style="color:#a6e22e">minus</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> ChronoUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">MINUTES</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  List<span style="color:#f92672">&lt;</span>PersistentEvent<span style="color:#f92672">&gt;</span> candidates <span style="color:#f92672">=</span> repository<span style="color:#f92672">.</span><span style="color:#a6e22e">findUnproducedByTimeScope</span><span style="color:#f92672">(</span>timeScope<span style="color:#f92672">);</span> <span style="color:#75715e">// OUTBOX 조회
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>candidates<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  writeLog<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;started&#34;</span><span style="color:#f92672">,</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;total&#34;</span><span style="color:#f92672">,</span> candidates<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> success <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>PersistentEvent candidate <span style="color:#f92672">:</span> candidates<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">boolean</span> produced <span style="color:#f92672">=</span> producer<span style="color:#f92672">.</span><span style="color:#a6e22e">produce</span><span style="color:#f92672">(</span>candidate<span style="color:#f92672">);</span> <span style="color:#75715e">// produce
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>produced<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">markProduced</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        success<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>        writeLog<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;handling&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>            kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;persistentEventId&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">()),</span>
</span></span><span style="display:flex;"><span>            kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;eventType&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventType</span><span style="color:#f92672">()),</span>
</span></span><span style="display:flex;"><span>            kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;eventId&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventId</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RuntimeException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Message was not produced&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">markFailed</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>      reportError<span style="color:#f92672">(</span>e<span style="color:#f92672">,</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;persistentEventId&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  writeLog<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;success&#34;</span><span style="color:#f92672">,</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;success&#34;</span><span style="color:#f92672">,</span> success<span style="color:#f92672">),</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;total&#34;</span><span style="color:#f92672">,</span> candidates<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>MessageProducer.class</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MessageProducer</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> MessageChannel messageChannel<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">produce</span><span style="color:#f92672">(</span>PersistentEvent persistentEvent<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">final</span> String body <span style="color:#f92672">=</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBody</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    Message<span style="color:#f92672">&lt;?&gt;</span> message <span style="color:#f92672">=</span> MessageBuilder
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">withPayload</span><span style="color:#f92672">(</span>body<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">ID</span><span style="color:#f92672">,</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventId</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">TYPE</span><span style="color:#f92672">,</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventType</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">VERSION</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">SOURCE</span><span style="color:#f92672">,</span> PROJECT_NAME<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">RESOURCE</span><span style="color:#f92672">,</span> body<span style="color:#f92672">.</span><span style="color:#a6e22e">getClass</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getSimpleName</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">PARTITION_KEY</span><span style="color:#f92672">,</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getPartitionKey</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Event publish: {}&#34;</span><span style="color:#f92672">,</span> message<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> messageChannel<span style="color:#f92672">.</span><span style="color:#a6e22e">send</span><span style="color:#f92672">(</span>message<span style="color:#f92672">,</span> MessagePolicy<span style="color:#f92672">.</span><span style="color:#a6e22e">DEFAULT_TIMEOUT</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>MessageSubscriber.class</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MessageSubscriber</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> ReceivedEventRepository receivedEventRepository<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@StreamListener</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> ConsumerChannel<span style="color:#f92672">.</span><span style="color:#a6e22e">CHANNEL</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">subscribe</span><span style="color:#f92672">(</span>Message<span style="color:#f92672">&lt;</span>Album<span style="color:#f92672">&gt;</span> event<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    UUID messageId <span style="color:#f92672">=</span> event<span style="color:#f92672">.</span><span style="color:#a6e22e">getHeaders</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    Optional<span style="color:#f92672">&lt;</span>ReceivedEvent<span style="color:#f92672">&gt;</span> receivedEvent <span style="color:#f92672">=</span> receivedEventRepository<span style="color:#f92672">.</span><span style="color:#a6e22e">findByMessageId</span><span style="color:#f92672">(</span>messageId<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>receivedEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">isPresent</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Duplicated event: {}&#34;</span><span style="color:#f92672">,</span> receivedEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getMessageId</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    receivedEventRepository<span style="color:#f92672">.</span><span style="color:#a6e22e">save</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> ReceivedEvent<span style="color:#f92672">(</span>event<span style="color:#f92672">.</span><span style="color:#a6e22e">getHeaders</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Event received: {}&#34;</span><span style="color:#f92672">,</span> event<span style="color:#f92672">.</span><span style="color:#a6e22e">getPayload</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="전체-흐름">전체 흐름</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/9.png" alt="messaging-sequence.png"  />
</p>
<h2 id="6-cicd">6. CI/CD</h2>
<h3 id="cicd란">CI/CD란</h3>
<ul>
<li>CI (Continuous Integration): 애플리케이션의 소스 변경 사항이 지속적으로 빌드 및 테스트되어 공유 리포지토리에 통합되는 것이다.</li>
<li>CD (Continuous Delivery/Deployment): 변경 사항을 테스트 또는 프로덕션 환경에 지속적으로 배포하는 것이다.</li>
</ul>
<h3 id="jenkinsfile">Jenkinsfile</h3>
<ul>
<li>
<p>jenkins는 CI 도구이다.</p>
<ul>
<li>빌드 → 테스트 → 코드 분석 → 도커 이미지 빌드 → helm chart 빌드</li>
<li>위 과정을 파이프라인으로 자동화 해준다.</li>
</ul>
</li>
<li>
<p>파이프라인은 Job들을 순차적 또는 병렬적으로 실행시키거나 작성한 스크립드로 이벤트를 연속적으로 실행시키는 것이다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>@<span style="color:#ae81ff">Library(&#39;meshkorea&#39;) _</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">vroongNeoMsaJavaPipeline(</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">team</span>: <span style="color:#e6db74">&#39;&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ecrRepoName</span>: <span style="color:#e6db74">&#39;vroong/msabootcamp&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argoAppName</span>: <span style="color:#e6db74">&#39;vroong-msabootcamp&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">gradleBuildArguments</span>: <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">)</span>
</span></span></code></pre></div><ul>
<li>team: 슬랙 {team}-build-alerts 채널에 관련 alert를 발생시킨다.</li>
<li>ecrRepoName: Jenkins에서 도커 빌드 후 push할 ECR 이름</li>
<li>argoAppName: argoCD 앱 이름</li>
<li>gradleBuildArguments: jar 파일 빌드시 뒤에 추가할 argument</li>
</ul>
</li>
<li>
<p>Jenkins 파이프라인 적용 방법</p>
<ul>
<li>리포지토리 root에 Jenkinsfile이 있어야만 파이프라인이 실행된다.</li>
<li>github push, PR, merge 와 같은 이벤트 발생시 파이프라인이 구동된다.</li>
<li>도커 이미지 tag는 파이프라인에 도커 빌드 과정에서 {tag}-{commit hash} 형태로 빌드 후 ECR에 push된다.
<ul>
<li>tag가 example이고, commit hash가 2d48cj3a인 경우 도커 이미지 tag는 example-2d48cj3a이다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="helm-values">Helm values</h3>
<ul>
<li>Helm은 K8S 패키지 관리를 도와주는 패키지 매니저이다.
<ul>
<li>ex) dev와 qa, prod 환경의 DB 주소가 다르다면 이를 관리해 주는 것이다.</li>
</ul>
</li>
<li>vroong-{appname}-helm-values 리포지토리 에 필요한 환경 변수 추가
<ul>
<li>위 리포지토리를 보면 다음과 같은 구조가 있다.
<ul>
<li>dev1</li>
<li>prod</li>
<li>qa1 ~ 4</li>
<li>values.yaml</li>
</ul>
</li>
<li>argoCD에서 helm values를 배포하면 K8S 서비스, deployment(replica set, pod), 서비스 account, config map 등의 리소스를 만들어준다.</li>
</ul>
</li>
<li>values.yaml
<ul>
<li>모든 환경에 동일하게 적용되어야 하는 내용이 선언되어 있다.</li>
<li>각 환경 별로 values.yaml 파일이 또 있다.
<ul>
<li>각 환경 별로 바인딩 되어야 하는 환경 변수를 선언한다.</li>
<li>override하고 싶은 내용을 선언한다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="빌드-및-배포-과정">빌드 및 배포 과정</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/10.png" alt="10"  />
</p>
<ol>
<li>Start</li>
<li>Init
<ul>
<li>저장소 checkout 후, commit hash를 구한다.</li>
<li>슬랙에 파이프라인 구동 메세지를 보낸다.</li>
<li>Jenkinsfile에 작성한 값을 읽어낸다.</li>
</ul>
</li>
<li>Check the docker image
<ul>
<li>ECR에 같은 tag를 가진 이미지가 있는지 확인한다.</li>
</ul>
</li>
<li>Gradle build
<ul>
<li>nexus에 접근하기 위한 계정 정보를 복사한다.</li>
<li>jar 파일을 빌드한다.</li>
</ul>
</li>
<li>code review / unit test
<ul>
<li>sonarqube로 코드 리뷰를 하고 unit 테스트를 수행한다.</li>
</ul>
</li>
<li>Docker / ECR login
<ul>
<li>도커 이미지를 빌드하고 tag를 붙인다.</li>
<li>ECR에 login한다.</li>
</ul>
</li>
<li>ECR push
<ul>
<li>ECR에 도커 이미지를 push한다.</li>
</ul>
</li>
<li>ArgoCD trigger
<ul>
<li>argoCD에 login한다.</li>
<li>슬랙에 빌드 완료 메세지를 보낸다.</li>
</ul>
</li>
<li>End</li>
</ol>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/11.png" alt="11"  />
</p>
<ol>
<li>
<p>Jenkins 과정을 거친 후 APP DIFF 버튼을 눌러, helm values 변경 사항을 확인한다.</p>
</li>
<li>
<p>변경 사항에 이상이 없으면 SYNC 버튼을 누른다.</p>
</li>
<li>
<p>pod가 잘 교체 되는지 확인한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>k9s
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/<span style="color:#f92672">{</span>서비스 이름으로 검색<span style="color:#f92672">}</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/12.png" alt="12"  />
</p>
<ul>
<li>상단 Context에서 현재 환경을 확인할 수 있다.</li>
<li>새로운 pod가 실행된 후 완료되면 기존 pod를 교체한다.</li>
</ul>
</li>
<li>
<p>모니터링한다.</p>
</li>
</ol>
<h2 id="7-uaa">7. UAA</h2>
<ul>
<li>
<p>User Account and Authentication</p>
</li>
<li>
<p>MSA Resource 서버를 보호하기 위한 Authorization Server</p>
</li>
<li>
<p>OAuth2 (Open Authorization) 방식</p>
<ul>
<li>Authorization Code Grant Type</li>
<li>Resource Owner Password Grant type</li>
<li>Client Credentials Grant Type</li>
</ul>
</li>
<li>
<p>Client Credentials Grant Type Flow
<a href="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAGn3b%2FbtqVyURyeZN%2F77J24Xr2Y3aAIZyLUsQZg1%2Fimg.png">https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAGn3b%2FbtqVyURyeZN%2F77J24Xr2Y3aAIZyLUsQZg1%2Fimg.png</a></p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">security</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">oauth2</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">client</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">access-token-uri</span>: <span style="color:#ae81ff">http://localhost:9999/oauth/token</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">user-authorization-uri</span>: <span style="color:#ae81ff">http://localhost:9999/oauth/token</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">client-id</span>: <span style="color:#ae81ff">internal</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">client-secret</span>: <span style="color:#ae81ff">internal</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">scope</span>: <span style="color:#ae81ff">web-app</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">grant-type</span>: <span style="color:#ae81ff">client_credentials</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">authorized-grant-type</span>: <span style="color:#ae81ff">password, client_credentials, refresh_token</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resource</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">jwt.key-uri</span>: <span style="color:#ae81ff">http://localhost:9999/oauth/token_key</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>네트워크 기초 지식</title><link>https://jo-minjun.github.io/notes/networkbasic/</link><pubDate>Wed, 17 Aug 2022 17:10:48 +0900</pubDate><guid>https://jo-minjun.github.io/notes/networkbasic/</guid><description>1. MAC, IP, Port 번호의 식별 MAC, IP, Port는 각 다음과 같은 레이어의 식별자이다. * DoD로 구분한 Layer * user mode ============================================ - Application kernel mode ============================================ - Transport: PORT - Network: IP H/W ============================================ - Access: MAC Transport
Port가 식별자가 된다. Network
Host에 대해서 IP가 식별자가 된다. Host: 네트워크에 연결된 컴퓨터, NIC 하나에 IP 주소를 여러 개 바인딩 할 수 있다.
→ Host에 IP가 여러개 존재한다. Access
Network Interface Card에 대해서 MAC이 식별자가 된다.</description><content:encoded><![CDATA[<h2 id="1-mac-ip-port-번호의-식별">1. MAC, IP, Port 번호의 식별</h2>
<h3 id="mac-ip-port는-각-다음과-같은-레이어의-식별자이다">MAC, IP, Port는 각 다음과 같은 레이어의 식별자이다.</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>* DoD로 구분한 Layer *
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Application
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Transport: PORT
</span></span><span style="display:flex;"><span>- Network: IP
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Access: MAC
</span></span></code></pre></div><p>Transport</p>
<ul>
<li>Port가 식별자가 된다.</li>
</ul>
<p>Network</p>
<ul>
<li>Host에 대해서 IP가 식별자가 된다.
<ul>
<li>Host: 네트워크에 연결된 컴퓨터, NIC 하나에 IP 주소를 여러 개 바인딩 할 수 있다.<br>
→ Host에 IP가 여러개 존재한다.</li>
</ul>
</li>
</ul>
<p>Access</p>
<ul>
<li>Network Interface Card에 대해서 MAC이 식별자가 된다.
<ul>
<li>하드웨어 식별자지만, MAC 변경이 가능하다.</li>
<li>Network Interface Card: 노트북은 유선/무선 랜카드가 2개
→ NIC가 2개</li>
</ul>
</li>
</ul>
<h2 id="2-host-switch-network의-관계">2. Host, Switch, Network의 관계</h2>
<p><strong>Host</strong>는 Network에 연결된 컴퓨터이다.</p>
<p>Network는 다음과 같이 두 가지로 나뉜다.</p>
<ul>
<li>Network 이용 주체
→ <strong>End-Point</strong>가 된다. (Peer, Server, Client 등)</li>
<li>Network 자체
→ 이 Computer를 <strong>Switch</strong>라 한다. (Firewall, Router 등)</li>
</ul>
<p><strong>Network</strong>는 <strong>Router(L3 Switch)와 DNS의 집합체</strong>이다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#f92672">(</span>스위칭 비용 증가<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>L7
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>L6
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>L5
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>L4
</span></span><span style="display:flex;"><span>- TCP
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>L3 <span style="color:#f92672">(</span>Router<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>- IP
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>L2
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>L1
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>스위칭 비용 감소<span style="color:#f92672">)</span>
</span></span></code></pre></div><h2 id="3-ipv4-주소-체계">3. IPv4 주소 체계</h2>
<h3 id="ip-주소">IP 주소</h3>
<p>Host에 대한 식별자</p>
<p>IP 주소는 다음과 같이 두가지 표현 방법이 있다.</p>
<ul>
<li>IPv4: 32bit</li>
<li>IPv6: 128bit</li>
</ul>
<p>IPv4의 32bit는 다음과 같이 이루어져 있다.</p>
<ul>
<li>32bit는 8bit씩 나누어 표기한다.
<ul>
<li>121.123.223.10</li>
</ul>
</li>
<li>크게 두 부분으로 나뉜다.
<ul>
<li>Net ID, Host ID</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>Net ID   Host ID
</span></span><span style="display:flex;"><span>----------- --
</span></span><span style="display:flex;"><span>121.123.223.10
</span></span></code></pre></div><ul>
<li>이때 Net ID의 길이를 구분하기 위해 서브넷 마스크를 사용한다.</li>
</ul>
</li>
</ul>
<h3 id="서브넷-마스크">서브넷 마스크</h3>
<p>서브넷 마스크도 32bit로, 8bit씩 나누어 표기한다.</p>
<p>서브넷 마스크와 IP 주소를 and 연산하면 Net ID를 확인할 수 있다.</p>
<p>하지만 일반적으로 다음과 같이 Net ID의 길이를 함께 표기한다.</p>
<ul>
<li>121.123.223.10/24</li>
</ul>
<p>→ 121.123.223.0은 Net ID, Host는 10이다.</p>
<ul>
<li>이 표기하는 것을 CIDR라 한다.</li>
</ul>
<h2 id="4-port-번호의-이해">4. Port 번호의 이해</h2>
<p>Port는 관점에 따라 여러 의미를 가진다.</p>
<ul>
<li>Process 식별자</li>
<li>Service 식별자</li>
<li>Interface 번호</li>
</ul>
<p>여기서는 개발자 관점에서 Process 식별자를 알아본다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Process
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP
</span></span><span style="display:flex;"><span>- IP
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- Driver
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- NIC
</span></span></code></pre></div><ul>
<li>kernel mode는 user mode가 접근이 가능하게 하기 위해 file이라는 인터페이스를 제공한다.</li>
<li>하지만 이를 프로토콜 관점에서 추상화하면 socket이 된다.</li>
<li>이때 socket에 attach되는 정보 중 하나가 Port 번호이다.</li>
</ul>
<p>Port는 다음과 같은 특징이 있다.</p>
<ul>
<li>socket에 attach되는 정보이다.</li>
<li>16bit 정보이다.</li>
</ul>
<p>→ 2^16</p>
<p>→ Port 번호의 범위는 0 ~ 61535 이다. (하지만 0과 61535는 사용할 수 없다.)</p>
<ul>
<li>패킷이 하위 레이어에서 상위 레이어로 올라갈 때 Port를 이용해서 프로세스를 식별한다.</li>
</ul>
<h2 id="5-switch-switching">5. Switch, Switching</h2>
<p><strong>Switching은 경로 또는 인터페이스를 선택</strong>하는 것이다.</p>
<p>이 때 <strong>선택지가 나오는 곳을 Switch</strong>라 한다.</p>
<p>Network는 라우터와 DNS의 집합이다.</p>
<ul>
<li>라우터는 L3 스위치이다.</li>
<li>라우터는 <strong>라우팅 테이블</strong>을 근거로 최적의 경로를 찾아낸다.</li>
</ul>
<h2 id="6-네트워크-데이터-단위">6. 네트워크 데이터 단위</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Application <span style="color:#f92672">(</span>Socket 수준<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP
</span></span><span style="display:flex;"><span>- IP
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>-
</span></span></code></pre></div><ul>
<li>위에서 설명한 user와 kernel 모드 사이의 file(socket)은 <strong>Stream</strong>이다.
<ul>
<li>기본적으로 file은 사용자가 계속 데이터를 입력하면 계속해서 데이터가 커진다.</li>
</ul>
</li>
<li>TCP에서 다루는 데이터 단위: <strong>Segment</strong></li>
<li>IP에서 다루는 데이터 단위: <strong>Packet</strong></li>
<li>IP 아래 단계에서 다루는 데이터 단위: <strong>Frame</strong></li>
</ul>
<p>이 데이터 단위의 흐름은 다음과 같다.</p>
<ul>
<li>Stream이 Segment로 넘어갈 때 일정한 길이로 데이터를 분해한다.
<ul>
<li>이때 **Segment의 최대 크기를 Maximum Segment Size(MSS)**라 한다.</li>
</ul>
</li>
<li>MSS는 Packet의 최대 크기으로 결정하게 되는데, <strong>Packet의 최대 크기를 (Maximum Transport Unit)MTU</strong>라 한다.</li>
<li>이 Packet을 Frame 데이터로 캡슐화하여 전달한다.</li>
</ul>
<h2 id="7-네트워크-인터페이스-선택-원리와-기준">7. 네트워크 인터페이스 선택 원리와 기준</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- HTTP <span style="color:#f92672">(</span>L7<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>-
</span></span><span style="display:flex;"><span>- SSL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP, UDP <span style="color:#f92672">(</span>L4<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>- IP <span style="color:#f92672">(</span>L3<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Ethernet
</span></span><span style="display:flex;"><span>-
</span></span></code></pre></div><p>아래와 같은 상황에서 인터페이스는 어떻게 선택될까?</p>
<ul>
<li>사용자가 브라우저를 켰다. (Socket이 열리고, TCP와 IP가 바인딩 되어야 한다.)</li>
<li>KT 유선 인터넷과 SKT 무선 인터넷을 두 개 연결했다. (일반적으로 IP 주소는 2개가 된다.)</li>
</ul>
<p>→ 메트릭(쉽게 말해 비용) 값으로 결정한다.</p>
<p>→ 따라서 위 경우에는 KT 유선과 SKT 무선 중 메트랙 값이 적은 쪽으로 바인딩 된다.</p>
<h2 id="8-웹-서비스를-만드신-분에-대해">8. 웹 서비스를 만드신 분에 대해</h2>
<h3 id="웹-탄생-배경">웹 탄생 배경</h3>
<ol>
<li>영국 물리학 연구원 <strong>팀 버너스 리</strong></li>
<li>연구원은 논문을 많이 읽는다.</li>
<li>논문에는 항상 참고문헌이 많았다.</li>
<li>하지만 당시 링크 개념이 존재하지 않았고 문서는 모두 Text 파일이었다.</li>
</ol>
<p>→ 문서(Text) + Link 를 이용해서 <strong>HTML</strong>이라는 문서 형식을 만들었다.</p>
<p>→ <strong>HTML</strong>의 인터넷 전달 방법을 위해서 <strong>HTTP</strong>라는 프로토콜을 만들었다.</p>
<p>→ 여러 문서들이 계속해서 연결되니, Web이 형성되었다.</p>
<p>→ 이는 웹 서비스가 되었고, 팀 버너스 리가 창안했다.</p>
<h2 id="9-초창기-웹-서비스의-구조">9. 초창기 웹 서비스의 구조</h2>
<p>**웹 클라이언트 (브라우저)**는 인터넷을 통해서 <strong>웹 서버</strong>와 연결된다.</p>
<p>이때 연결은 HTTP라는 TCP/IP 기반으로 된다.</p>
<ul>
<li>HTTP는 Stateless하다.</li>
</ul>
<p>웹 클라이언트의 IP 주소가 있고 웹 서버에도 IP 주소가 있다.</p>
<p>→ 이 주소 URL을 알고 리소스(HTML 문서)에 대한 <strong>요청</strong>을 하면 연결이 되고, <strong>응답</strong>을 준다.</p>
<p>→ 응답을 받은 클라이언트는 HTML <strong>구문 분석</strong>을 하고, 내용을 <strong>렌더링</strong> 한다.</p>
<p>즉, 이 당시 브라우저는 원격 문서 뷰어 역할(단방향 작용)을 했다.</p>
<h2 id="10-웹-서비스-3대-요소">10. 웹 서비스 3대 요소</h2>
<p>위 구조에는 문제가 있었다.</p>
<ol>
<li>
<p><strong>문서의 내용과는 별개로 UI를 개선하고 싶었다.</strong></p>
<p>→ HTML에 기능을 추가하니 유지보수가 불편하다.</p>
<p>→ CSS와 이미지가 나왔다.</p>
<p>→ 요청하면 HTML + CSS + IMAGE(서버에 저장되어 있다.)가 순서대로 응답된다.</p>
</li>
<li>
<p><strong>문서를 변경해야 했다.</strong></p>
<p>→ 문서를 변경하기 위해 처리를 담당하는 서버가 생겼다.</p>
<p>→ 단방향 작용이 양방향 상호 작용이 되면서 상태를 처리해야 했다.</p>
<p>→ DB를 이용해서 처리하게 되었다.</p>
</li>
<li>
<p><strong>문서가 변경되고, 처리가 되니 문서가 복잡해졌다.</strong></p>
<p>→ 기능에 따라 동적인 움직임을 주는 것이 필요해졌다.</p>
<p>→ 브라우저에서 렌더링 후에 <strong>연산</strong>하는 기능을 가지게 되었다. (Javascript)</p>
</li>
</ol>
<p>즉, 웹 서비스 3대 요소는 다음과 같다.</p>
<ul>
<li>HTML 구문 분석</li>
<li>렌더링</li>
<li>연산</li>
</ul>
<h2 id="11-lan-vs-wan">11. LAN vs WAN</h2>
<ul>
<li>주의) 이 내용은 명확한 구분은 아니다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- HTTP
</span></span><span style="display:flex;"><span>-
</span></span><span style="display:flex;"><span>- SSL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode <span style="color:#f92672">(</span>Logical <span style="color:#f92672">==</span> virtual<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP, UDP
</span></span><span style="display:flex;"><span>- IP<span style="color:#f92672">(</span>IP 주소<span style="color:#f92672">)</span> --&gt; <span style="color:#f92672">[</span>Internet<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> <span style="color:#f92672">[</span>virtual network<span style="color:#f92672">]</span> -&gt; *WAN
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W <span style="color:#f92672">(</span>Physical<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Ethernet<span style="color:#f92672">(</span>MAC 주소<span style="color:#f92672">)</span> --&gt; *LAN
</span></span><span style="display:flex;"><span>-
</span></span></code></pre></div><p>LAN과 WAN은 흔히 범위의 차이로 구분한다.</p>
<p>하지만 논리/물리적 구성요소로 구분하는 방법은 아래와 같다.</p>
<ul>
<li>시스템은 S/W와 H/W로 구분된다.</li>
<li>S/W(kernel mode 이상)은 IP(Internet Protocol) 를 이용해서 통신한다.
<ul>
<li>Internet은 virtual network이다.
→ WAN</li>
</ul>
</li>
<li>H/W는 MAC 주소를 이용한다. (이는 물리적인 주소이다.)
→ 하드웨어로 설명되는 네트워크
→ LAN</li>
</ul>
<h2 id="12-패킷의-생성-원리와-캡슐화">12. 패킷의 생성 원리와 캡슐화</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- HTTP
</span></span><span style="display:flex;"><span>-
</span></span><span style="display:flex;"><span>- SSL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP, UDP
</span></span><span style="display:flex;"><span>- IP
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Ethernet
</span></span><span style="display:flex;"><span>-
</span></span></code></pre></div><ol>
<li>user mode 영역은 socket에 데이터를 IO한다.
<ul>
<li>socket은 file을 추상화한 것이다. 때문에 데이터를 계속해서 쓰기할 수 있다.</li>
<li>이때 데이터의 단위는 Stream이다.</li>
</ul>
</li>
<li>user mode의 Stream이 Kernel mode에서 일정 단위로 나누어진다.
<ul>
<li>이때 데이터의 단위는 Segment이다.</li>
<li>이 Segment가 한 번 캡슐화되어 Packet이 된다.
<ul>
<li>Packet의 최대 크기: MTU(Maximum Transport Unit)
<ul>
<li>일반적으로 1500이다.</li>
</ul>
</li>
<li>Packet의 구조: Header, Payload</li>
<li>Header에는 IP(L3)와 TCP(L4) 데이터가 있다.
<ul>
<li>이때 크기는 일반적으로 각 20씩으로 총 40이다.</li>
</ul>
</li>
<li>MTU 크기 - Header 크기 = 1460이다.
<ul>
<li>이 크기가 MSS(Maximum Segment Size) 이다.</li>
<li>Stream을 1460 크기로 나눈 것이다.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>H/W영역에서 Packet이 한 번 더 캡슐화된다.
<ul>
<li>Frame이 된다.</li>
</ul>
</li>
</ol>
<h2 id="13-l2-스위치">13. L2 스위치</h2>
<p>L2 스위치는 MAC 주소(48bit)로 스위칭시킨다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>                <span style="color:#f92672">(</span>multilayer switch<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span> NIC  L2 Access   L2 Distribution    L2 Access    NIC
</span></span><span style="display:flex;"><span>         |  <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>        <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>         |---------------#---------------|
</span></span><span style="display:flex;"><span>PC1------|               |               |---------PC3
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>         |               |               |---------PC4
</span></span><span style="display:flex;"><span>PC2------|               |               |
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>                         |
</span></span><span style="display:flex;"><span>                         | <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                         |
</span></span><span style="display:flex;"><span>                     <span style="color:#f92672">(</span>gateway<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                         @
</span></span><span style="display:flex;"><span>                       라우터
</span></span><span style="display:flex;"><span>                         |
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">(</span>방화벽<span style="color:#f92672">)</span>
</span></span></code></pre></div><ul>
<li>L2 Access: End-Point가 네트워크에서 가장 처음 만나는 스위치</li>
<li>L2 Distribution: L2 Access와 L3 라우터를 연결해주는 스위치</li>
<li>Up-link: 상위 계층 스위치로 연결되는 케이블</li>
</ul>
<h2 id="14-ip-header">14. IP Header</h2>
<p><img loading="lazy" src="/images/notes/networkbasic/0.png" alt="0.png"  />
</p>
<p>위에서 언급한 것처럼 IP의 헤더는 20바이트이다. (+ @ Opitonal)</p>
<p>최상단 우측에 Total Length는 16비트인데, 이것은 패킷의 최대 크기를 나타낸다.</p>
<ul>
<li>따라서 패킷의 최대 크기는 2^16정도인 65536이다.</li>
</ul>
<p>Identification ~ Fragment Offset은 단편화에 관련된 부분이다.</p>
<ul>
<li>단편화는 큰 패킷을 작은 패킷으로 나눈 것을 말한다.</li>
<li>MTU가 1400인 곳에 1500짜리 패킷을 보내는 경우 단편화가 일어난다.</li>
</ul>
<p>TTL은 패킷이 라우터 하나를 지날때마다 1씩 감소하고 0이 되면 패킷이 사라진다.</p>
<ul>
<li>일반적으로 값은 256이다. (2^8)</li>
</ul>
<p>Protocol은 상위 계층 프로토콜이다.</p>
<ul>
<li>이 값을 보고 데이터가 TCP인지 UDP 인지 다른 값인지 확인할 수 있다.</li>
</ul>
<p>Header checksum은 전송간에 오류가 있는지 확인한다.</p>
<h2 id="15-proxy-구조와-원리">15. Proxy 구조와 원리</h2>
<p>Proxy는 대리자 역할을 한다.</p>
<p>&lt;Proxy 미적용&gt;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>										    HTTPS TCP/IP
</span></span><span style="display:flex;"><span>PC1 <span style="color:#f92672">(</span>1.1.1.1<span style="color:#f92672">)</span>--------------Internet--------------------SERVER<span style="color:#f92672">(</span>9.9.9.9<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>&lt;Proxy 적용&gt;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>PC1 <span style="color:#f92672">(</span>1.1.1.1<span style="color:#f92672">)</span>                                          SERVER<span style="color:#f92672">(</span>9.9.9.9<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  |                                                        |
</span></span><span style="display:flex;"><span>  |                                                        |
</span></span><span style="display:flex;"><span>Internet                                                   |
</span></span><span style="display:flex;"><span>  |                                                        |
</span></span><span style="display:flex;"><span>  | <span style="color:#f92672">(</span>Proxy<span style="color:#f92672">)</span>                                                |
</span></span><span style="display:flex;"><span>PC2 <span style="color:#f92672">(</span>2.2.2.2<span style="color:#f92672">)</span>---------------- Internet---------------------|
</span></span></code></pre></div><p>&lt;PC2의 역할&gt;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode    |          PC2
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- HTTP       |   Proxy 역할을 하는
</span></span><span style="display:flex;"><span>-            |       Process
</span></span><span style="display:flex;"><span>- SSL        |       <span style="color:#f92672">(</span>Stream<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>             |   socket1  socket2
</span></span><span style="display:flex;"><span>kernel mode  |
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP, UDP   |
</span></span><span style="display:flex;"><span>- IP         |
</span></span><span style="display:flex;"><span>             |
</span></span><span style="display:flex;"><span>H/W          |
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Ethernet   |
</span></span><span style="display:flex;"><span>-            |
</span></span></code></pre></div><ol>
<li>socket1은 외부에서 접속하길 대기하고 있다.</li>
<li>PC1이 접근</li>
<li>정보가 들어오면 socket2를 이용해서 9.9.9.9에 접근</li>
</ol>
<h2 id="16-proxy의-활용">16. Proxy의 활용</h2>
<h3 id="1-우회">1. 우회</h3>
<p>Proxy를 사용하면 SERVER 입장에서 PC2의 아이피를 확인한다.</p>
<p>그러나 PC2는 PC1의 모든 통신을 감청할 수 있다.</p>
<h3 id="2-분석">2. 분석</h3>
<p>웹 통신에 SSL을 적용하면 패킷 레벨에서 데이터가 암호화되어 있다.</p>
<p>때문에 와이어 샤크등 프로그램에서 복호화된 데이터를 확인할 수 없다.</p>
<p>이때 프록시를 아래와 같이 사용할 수 있다.</p>
<ul>
<li>Proxy를 127.0.0.1:8080으로 건다. (내 PC)</li>
<li>HTTP 요청을 보내면 8080번 포트의 소켓으로 데이터가 지나간다.</li>
<li>이 평문 데이터를 Stream 레벨에서 확인한다.</li>
</ul>
<h2 id="17-tcp-송신수신-원리">17. TCP 송신/수신 원리</h2>
<ol>
<li>Stream을 Segment로 나눈다.
<ul>
<li>이때 TCP Buffer(Window Size)에 데이터를 저장하고, 일정 크기가 되면 Segment로 나눈다.</li>
</ul>
</li>
<li>Segment를 Packet으로 캡슐화한다.</li>
<li>Packet을 Frame으로 캡슐화한다.</li>
<li>Frame을 전달한다.
<ul>
<li>전체를 보내는 것은 아니다. (n개 만큼 보낸다.)</li>
<li>일반적으로 Frame은 바뀔 수 있다. (Packet은 그대로 이지만)</li>
</ul>
</li>
<li>Frame을 전달받고 Segment로 만든다.</li>
<li>n개의 Segment를 받으면 TCP Buffer에 저장하고 ackn+1을 송신쪽에 전달한다.
<ul>
<li>ack에는 Window Size가 포함되어 있다.</li>
</ul>
</li>
<li>송신쪽은 ackn+1을 받고 Segment를 n+1번부터 다시 보낸다.
<ul>
<li>이 과정때문에 속도 지연이 발생한다. (UDP 보다 느리다.)</li>
<li>만약 ack로 받은 수신 측 Window Size가 작으면 Segment를 보내지 않는다.</li>
</ul>
</li>
</ol>
<h2 id="18-tcp-연결에-대해">18. TCP 연결에 대해</h2>
<p>TCP는 연결지향 프로토콜이다.</p>
<p>우선 아래 TCP 헤더를 보자</p>
<p><img loading="lazy" src="/images/notes/networkbasic/1.png" alt="1.png"  />
</p>
<ul>
<li>출발지/목적지 Port 번호가 가장위에 위치한다.</li>
<li>Sequence Number: 32bit → 4GB (2^32), Segment의 순서</li>
<li>TCP Flags: Ack, Sync
<ul>
<li>3-way handshake에 사용</li>
</ul>
</li>
</ul>
<p>3-way handshake</p>
<ul>
<li>Seq번호와 MSS를 교환하는 행위</li>
<li>혼잡 제어 정책 교환</li>
</ul>
<h2 id="19-unicast-broadcast-multicast">19. Unicast, Broadcast, Multicast</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span> NIC  L2 Access   L2 Distribution    L2 Access    NIC
</span></span><span style="display:flex;"><span>         |  <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>        <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>         |---------------#---------------|
</span></span><span style="display:flex;"><span>PC1------|               |               |---------PC3
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>         |               |               |---------PC4
</span></span><span style="display:flex;"><span>PC2------|               |               |
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>                         |
</span></span><span style="display:flex;"><span>                         | <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                         |
</span></span><span style="display:flex;"><span>                         @ 라우터 <span style="color:#f92672">(</span>gateway<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">(</span>방화벽<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Unicast</p>
<ul>
<li>L2 스위치 내부에서 연결이 끝나는 것 (라우터 이전)</li>
<li>한번에 한 지점에게만 신호를 보낸다.</li>
</ul>
<p>Broadcast</p>
<ul>
<li>어떤 지점에서 다수의 지점에 신호를 보내는 것</li>
<li>네트워크 효율을 떨어뜨린다.</li>
<li>2진수 IP의 끝자리가 모두 1이다. (210.153.0.255)</li>
</ul>
<p>Multicast</p>
<ul>
<li>Broadcast와 유사하나 관심이 없는 지점은 신호를 보내지 않음</li>
<li>Group을 등록해서 Group에 전달함</li>
</ul>
<h2 id="20-ip의-종류">20. IP의 종류</h2>
<p><strong>Global</strong></p>
<ul>
<li>인터넷(public, global network)에서 라우터가 라우팅 시켜주는 IP이다.</li>
</ul>
<p><strong>Private</strong></p>
<ul>
<li>작은 소규모 사설 인터넷을 구축할 때 사용한다.</li>
<li>공유기에서도 자주 사용한다.
<ul>
<li>공유기는 하나의 Global IP를 Private IP에 공유해주는 역할을 한다.</li>
</ul>
</li>
<li>4개의 클래스로 나뉜다.
<ul>
<li>A:
<ul>
<li>network id: 8bit</li>
<li>host id: 24bit</li>
<li>10.xxx.xxx.xxx</li>
</ul>
</li>
<li>B
<ul>
<li>network id: 12bit</li>
<li>host id: 20bit</li>
<li>172.16.xxx.xxx</li>
</ul>
</li>
<li>C
<ul>
<li>network id: 16bit</li>
<li>host id: 16bit</li>
<li>192.168.xxx.xxx</li>
</ul>
</li>
<li>D
<ul>
<li>multicast를 할 때 사용한다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Loopback</strong></p>
<ul>
<li>127.0.0.1</li>
<li>호스트 자신을 의미한다.</li>
<li>패킷이 만들어지지만 L2로 가지는 않는다.</li>
</ul>
<p><strong>Broadcast</strong></p>
<ul>
<li>다수의 지점에 신호를 보낼 때 사용한다.</li>
</ul>
<h2 id="21-dns">21. DNS</h2>
<p>Domain Name</p>
<ul>
<li>숫자로된 IP를 사람이 보기 편하도록 해준다.</li>
<li>naver.com</li>
<li>google.com</li>
</ul>
<p>DNS</p>
<ul>
<li>IP와 Domain Name을 연결하는 테이블 역할</li>
<li>DNS는 계층적 구조로 되어 있다. (분산형 DB 구조)
<ul>
<li>가장 상위 DNS인 root DNS는 전세계에 13대가 있다.</li>
</ul>
</li>
</ul>
<p>Domain Name으로 IP를 찾는 과정</p>
<ol>
<li>컴퓨터 캐시에서 검색</li>
<li>host file에서 검색</li>
<li>DNS에서 검색</li>
<li>root DNS에서 .com, co.kr 등을 관리하는 DNS 목록을 검색</li>
<li>DNS 목록에서 검색</li>
<li>…</li>
</ol>
<h2 id="22-tcpip-통신과-mac-주소">22. TCP/IP 통신과 MAC 주소</h2>
<p>TCP/IP 통신을 할 때의 MAC 주소의 변화</p>
<ol>
<li>패킷이 프레임으로 캡슐화된다.
<ul>
<li>프레임 헤더에도 시작/목적 지점이 있다.</li>
</ul>
</li>
<li>L2 구간(라우터)을 지나면 프레임 헤더가 새로 교체된다.
<ul>
<li>L2구간에 새로 접근할 때마다 프레임 헤더의 시작/목적 지점도 계속해서 변경된다.</li>
<li>MAC 주소만 고려하고, IP 주소는 고려하지 않는다.</li>
</ul>
</li>
</ol>
<h2 id="23-mtu와-packet-단편화">23. MTU와 Packet 단편화</h2>
<p><img loading="lazy" src="/images/notes/networkbasic/2.png" alt="2.png"  />
</p>
<ul>
<li>위 그림에서 2번째 줄(Identification, Fragment Offset)이 단편화 관련 부분이다.</li>
<li>MTU는 1500이 기본값인 경우가 많다.</li>
<li>MTU - 20(IP 헤더) - 20(TCP 헤더) = MSS이다.</li>
</ul>
<p>아래와 같은 경우에는 단편화가 어떻게 이루어 질까?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>MTU:1500     MTU:1500       MTU:1400       MTU:1500  MTU:1500
</span></span><span style="display:flex;"><span>PC1 ---|---#-----R1-------------R2-------------R3-----SERVER
</span></span></code></pre></div><ul>
<li>위 경우 R1 → R2에서 단편화가 이루어져야 한다.
<ol>
<li>1500짜리 패킷을 어느 지점에서 자른다. A와 B가 생긴다.</li>
<li>헤더와 A를 붙이고, 헤더와 B를 붙여서 2개의 패킷을 만든다.
<ul>
<li>이때 두 패킷 헤더의 Idenfication이 같은 값이 된다.</li>
<li>Fragment Offset 값은 A는 0, B는 A의 길이만큼이 된다.</li>
</ul>
</li>
<li>수신하는 쪽에서 단편화를 조립한다. (SERVER)</li>
</ol>
</li>
</ul>
<h2 id="24-서브넷팅">24. 서브넷팅</h2>
<p>ISP(Internet Service Provider)에게 어떤 회사가 100개의 사설 IP를 요청하면 어떻게 될까?</p>
<ul>
<li>C레벨(Net ID: 24, Host ID: 8)인 private IP를 할당한다.</li>
<li>그런데 C레벨 private IP를 할당하면 2^8 - 100 = 146개의 IP를 낭비하게 되는 것이다.</li>
<li>이런 경우 서브넷팅을 사용할 수 있다.</li>
</ul>
<p>서브넷팅은 Net ID에 몇 개의 비트를 더 할당하는 것이다.</p>
<ul>
<li>192.168.0.1/25라면 마지막 4번째 자리의 1의 가장 앞부분 비트를 Net ID로 할당 시킨다.
<ul>
<li>(192.168.0.0)0000001</li>
<li>(192.168.0.1)0000001</li>
</ul>
</li>
<li>하지만 Host ID가 0인 경우는 아무것도 가리키지 않고, 2진수에서 모두 1인 경우는 broadcast IP 이므로 서브넷 하나마다 2개의 IP를 손실보게 된다.
<ul>
<li>예를 들어 이 경우라면 192.168.0.1/25</li>
<li>192.168.0.00000000, 192.168.0.01111111</li>
<li>192.168.0.10000000, 192.168.0.11111111</li>
<li>위 4가지 IP를 손실보게 된다.</li>
</ul>
</li>
</ul>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=k1gyh9BlOT8&amp;list=PLXvgR_grOs1BFH-TuqFsfHqbh-gpMbFoy">https://www.youtube.com/watch?v=k1gyh9BlOT8&amp;list=PLXvgR_grOs1BFH-TuqFsfHqbh-gpMbFoy</a></li>
</ul>
]]></content:encoded></item><item><title>Avro schema</title><link>https://jo-minjun.github.io/notes/avro-schema/</link><pubDate>Sat, 02 Jul 2022 18:12:21 +0900</pubDate><guid>https://jo-minjun.github.io/notes/avro-schema/</guid><description>1. Avro 란? 아브로(Avro)는 아파치의 하둡 프로젝트에서 개발된 RPC 및 데이터 직렬화 프레임워크이다.
schema를 json으로 정의하여 바이너리 포맷으로 직렬화 한다.
2. 장점 데이터의 타입을 알 수 있다. 스키마가 직렬화되어 네트워크 통신에 자유롭다. 스키마에 설명이 포함되어 schema 구조를 이해하는데 도움을 준다. 다양한 language를 지원한다. (java, c, c++ 등) default 값을 정의할 수 있다. 3. Data Type 이름 태그 null no value boolean a binary value int 32bit signed integer long 62bit signed integer float single precision(단정밀도) 32bit floating-point number double double percision(배정밀도) 64bit floating-point number bytes sequence of 8-bit unsigned bytes string unicode character sequence Enums name, namespace, aliases, doc, symbols, default 등을 가진다.</description><content:encoded><![CDATA[<h2 id="1-avro-란">1. Avro 란?</h2>
<p>아브로(Avro)는 아파치의 하둡 프로젝트에서 개발된 RPC 및 데이터 직렬화 프레임워크이다.<br>
schema를 json으로 정의하여 바이너리 포맷으로 직렬화 한다.</p>
<h2 id="2-장점">2. 장점</h2>
<ol>
<li>데이터의 타입을 알 수 있다.</li>
<li>스키마가 직렬화되어 네트워크 통신에 자유롭다.</li>
<li>스키마에 설명이 포함되어 schema 구조를 이해하는데 도움을 준다.</li>
<li>다양한 language를 지원한다. (java, c, c++ 등)</li>
<li>default 값을 정의할 수 있다.</li>
</ol>
<h2 id="3-data-type">3. Data Type</h2>
<table>
<thead>
<tr>
<th>이름</th>
<th>태그</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>null</code></td>
<td>no value</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td>a binary value</td>
</tr>
<tr>
<td><code>int</code></td>
<td>32bit signed integer</td>
</tr>
<tr>
<td><code>long</code></td>
<td>62bit signed integer</td>
</tr>
<tr>
<td><code>float</code></td>
<td>single precision(단정밀도) 32bit floating-point number</td>
</tr>
<tr>
<td><code>double</code></td>
<td>double percision(배정밀도) 64bit floating-point number</td>
</tr>
<tr>
<td><code>bytes</code></td>
<td>sequence of 8-bit unsigned bytes</td>
</tr>
<tr>
<td><code>string</code></td>
<td>unicode character sequence</td>
</tr>
</tbody>
</table>
<h3 id="enums">Enums</h3>
<p>name, namespace, aliases, doc, symbols, default 등을 가진다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;enum&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Suit&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;symbols&#34;</span>: [<span style="color:#e6db74">&#34;SPADES&#34;</span>, <span style="color:#e6db74">&#34;HEARTS&#34;</span>, <span style="color:#e6db74">&#34;DIAMONDS&#34;</span>, <span style="color:#e6db74">&#34;CLUBS&#34;</span>]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="arrays">Arrays</h3>
<p>items를 가진다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;array&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;items&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;default&#34;</span>: []
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="maps">Maps</h3>
<p>values를 가진다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;map&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;values&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;default&#34;</span>: {}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="unions">Unions</h3>
<p>string, int, boolean 등과 같은 여러개의 서로 다른 타입을 가짐으로써 선택적인 값을 저장할 수 있도록 한다.</p>
<h2 id="4-schema-필드">4. Schema 필드</h2>
<table>
<thead>
<tr>
<th>이름</th>
<th>태그</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>json을 지원하는 스키마의 이름</td>
</tr>
<tr>
<td>namespace</td>
<td>name을 구별하는 패키지</td>
</tr>
<tr>
<td>doc</td>
<td>스키마를 설명하는 doc</td>
</tr>
<tr>
<td>aliases</td>
<td>name의 별칭</td>
</tr>
<tr>
<td>fields</td>
<td>name, doc, type, default, order, aliases 등을 가지는 json type object</td>
</tr>
</tbody>
</table>
<h2 id="5-avro-schema-예시">5. Avro Schema 예시</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;record&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;LongList&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;aliases&#34;</span>: [<span style="color:#e6db74">&#34;LinkedLongs&#34;</span>], <span style="color:#75715e">// old name for this
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">&#34;fields&#34;</span>: [
</span></span><span style="display:flex;"><span>    { <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;value&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span> }, <span style="color:#75715e">// each element has a long
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    { <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;next&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: [<span style="color:#e6db74">&#34;null&#34;</span>, <span style="color:#e6db74">&#34;LongList&#34;</span>] } <span style="color:#75715e">// optional next element
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;record&#34;</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#34;namespace&#34;</span> : <span style="color:#e6db74">&#34;tutorialspoint&#34;</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#34;name&#34;</span> : <span style="color:#e6db74">&#34;empdetails &#34;</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#34;fields&#34;</span> :
</span></span><span style="display:flex;"><span>   [
</span></span><span style="display:flex;"><span>      { <span style="color:#f92672">&#34;name&#34;</span> : <span style="color:#e6db74">&#34;experience&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: [<span style="color:#e6db74">&#34;int&#34;</span>, <span style="color:#e6db74">&#34;null&#34;</span>] },
</span></span><span style="display:flex;"><span>      { <span style="color:#f92672">&#34;name&#34;</span> : <span style="color:#e6db74">&#34;age&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;int&#34;</span> }
</span></span><span style="display:flex;"><span>      {<span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;additional&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: {<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;map&#34;</span>, <span style="color:#f92672">&#34;values&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>}}
</span></span><span style="display:flex;"><span>   ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content:encoded></item><item><title>Schema registry란?</title><link>https://jo-minjun.github.io/notes/schema-registry/</link><pubDate>Fri, 01 Jul 2022 21:42:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/schema-registry/</guid><description>1. Schema registry 란? 데이터 관리의 중요한 관점들 중 하나는 schema의 버전 관리이다. 응용프로그램의 시간이 지날수록 schema가 정의되기 시작한 시점부터 schema는 점점 바뀌어가고, producer와 consumer는 직접적인 관계가 끊어져있기 때문에 운영상에 발생하는 이슈가 있다.
producer는 consumer가 어떤 메세지를 소비할지 알 수 없다.
consumer는 producer가 어떤 메세지를 생산했는지 알 수 없다.
위와 같은 상황에서 producer가 갑자기 다른 schema를 이용해서 메세지를 생산할 경우, consumer는 이 메세지에 대해서 대처하지 못할 수 있다.
이는 구조적인 결합도는 낮지만, 메세지 schema에 대한 의존성이 높기 때문인데, schema registry는 이를 보완하기 위해 고안되었다.</description><content:encoded><![CDATA[<h2 id="1-schema-registry-란">1. Schema registry 란?</h2>
<p>데이터 관리의 중요한 관점들 중 하나는 schema의 버전 관리이다.
응용프로그램의 시간이 지날수록 schema가 정의되기 시작한 시점부터 schema는 점점 바뀌어가고,
producer와 consumer는 직접적인 관계가 끊어져있기 때문에 운영상에 발생하는 이슈가 있다.</p>
<blockquote>
<p>producer는 consumer가 어떤 메세지를 소비할지 알 수 없다.<br>
consumer는 producer가 어떤 메세지를 생산했는지 알 수 없다.</p>
</blockquote>
<p>위와 같은 상황에서 producer가 갑자기 다른 schema를 이용해서 메세지를 생산할 경우, consumer는 이 메세지에 대해서 대처하지 못할 수 있다.</p>
<p>이는 구조적인 결합도는 낮지만, 메세지 schema에 대한 의존성이 높기 때문인데,
schema registry는 이를 보완하기 위해 고안되었다.</p>
<p>Confluent Schema registry는 Avro, Json, Protobuf 등의 schema 정보의 history를 subjects를 통해 관리하며, REST API를 통해 <strong>compatibility settings</strong>을 결정하고 현재 버전과 이전 버전간의 호환성을 지원한다.</p>
<p><img loading="lazy" src="/images/notes/schema-registry/schema-registry-kafka.png" alt="schema-registry-kafka.png"  />
</p>
<p>Schema registry는 kafka boroker와 독립적으로 존재하며, producer와 consumer는 kafka broker와 읽고 쓰는 동안 Schema registry와 동작하며 데이터 모델을 확인할 수 있다.</p>
<h2 id="2-schemas-subjects-and-topics-란">2. Schemas, Subjects and Topics 란?</h2>
<p>topic은 kafka의 topic을, schema는 Avro, Json, Protobuf 등으로 정의된 데이터 포맷 구조를 의미한다.</p>
<p>Subject는 Schema registry에 schema가 등록된 이름이며, 여러 버전의 schema가 등록될 수 있다.</p>
<p>따라서 Subject를 통해 계속해서 Schema의 정보를 관리할 수 있고, 새로운 버전의 Schema ID와 버전을 확인할 수 있다.</p>
<p><img loading="lazy" src="/images/notes/schema-registry/schema-subject-topic.png" alt="schema registry.png"  />
</p>
<ul>
<li>kafka topic은 메세지가 포함되어 있으며, 각 메세지는 key - value 쌍으로 되어있으며
메세지의 key와 value는 Avro, Json, Protobuf 등으로 직렬화할 수 있다.</li>
<li>Schema는 데이터 포맷의 구조를 정의한다.</li>
<li>kafka의 topic 이름은 schema의 이름과 의존적이지 않다.</li>
<li>Schema의 ID는 전역적이다.</li>
</ul>
<h2 id="3-compatibility-settings-란">3. Compatibility settings 란?</h2>
<p>schema compatibility checking는 모든 schema를 버전화해서 schema registry compatibility type에 의해서 구현된다.</p>
<p>즉, 아래의 schema 전략에 의한 패턴으로 호환성을 유지하게 된다.</p>
<table>
<thead>
<tr>
<th>Compatibility type</th>
<th>허가되는 변경</th>
<th>비교하는 schema</th>
<th>upgrade 순서</th>
</tr>
</thead>
<tbody>
<tr>
<td>BACKWARD</td>
<td>- 필드 삭제<!-- raw HTML omitted -->- Optional 필드 추가</td>
<td>마지막 버전</td>
<td>Consumers</td>
</tr>
<tr>
<td>BACKWARD_TRANSITIVE</td>
<td>- 필드 삭제<!-- raw HTML omitted -->- Optional 필드 추가</td>
<td>모든 이전 버전</td>
<td>Consumers</td>
</tr>
<tr>
<td>FORWARD</td>
<td>- 필드 추가<!-- raw HTML omitted -->- Optional 필드 삭제</td>
<td>마지막 버전</td>
<td>Producers</td>
</tr>
<tr>
<td>FORWARD_TRANSITIVE</td>
<td>- 필드 추가<!-- raw HTML omitted -->- Optional 필드 삭제</td>
<td>모든 이전 버전</td>
<td>Producers</td>
</tr>
<tr>
<td>FULL</td>
<td>- Optional 필드 추가<!-- raw HTML omitted -->- Optional 필드 삭제</td>
<td>마지막 버전</td>
<td>Any order</td>
</tr>
<tr>
<td>FULL_TRANSITIVE</td>
<td>- Optional 필드 추가<!-- raw HTML omitted -->- Optional 필드 삭제</td>
<td>모든 이전 버전</td>
<td>Any order</td>
</tr>
<tr>
<td>NONE</td>
<td>모든 변경 허용</td>
<td>비교하지 않음</td>
<td>Depends</td>
</tr>
</tbody>
</table>
<ul>
<li><code>BACKWARD</code>: (<em>default</em>) consumer가 새로운 스키마를 사용하여 producer가 마지막 버전의 스키마로 생성한 메세지를 읽을 수 있다.
(새로운 스키마로 이전 스키마 메세지를 읽는다.)
(새로운 스키마 필드에 default value가 없으면 오류가 발생한다.)</li>
<li><code>BACKWARD_TRANSITIVE</code>: consumer가 새로운 스키마를 사용하여 producer가 모든 마지막 버전 스키마로 생성한 메세지를 읽을 수 있다.</li>
<li><code>FORWARD</code>: consumer가 마지막 버전의 스키마를 사용하여 producer가 새로운 스키마로 생성한 메세지를 읽을 수 있다.
(이전 스키마로 새로운 스키마 데이터를 읽는다.)
(새로운 스키마에서 필드가 삭제되면, 이전 스키마에 default value가 있어야 한다.)</li>
<li><code>FORWARD_TRANSITIVE</code>: consumer가 모든 마지막 버전의 스키마를 사용하여 producer가 새로운 스키마로 생성한 메세지를 읽을 수 있다.</li>
<li><code>FULL</code>: <code>BACKWARD</code> 와 <code>FORWARD</code> 를 모두 만족한다.</li>
<li><code>FULL_TRANSITIVE</code>: <code>BACKWARD_TRANSITIVE</code> 와 <code>FORWARD_TRANSITIVE</code> 를 모두 만족한다.</li>
<li><code>NONE</code>: schema compatibility checks are disabled</li>
</ul>
<h2 id="4-rest-api-interface-reference---schemas-subjects">4. Rest API Interface Reference - Schemas, Subjects</h2>
<p>Schema Registry REST API 서버는 사용된 API의 버전과 데이터의 직렬화 포맷을 표시하기 위해 요청과 응답에 content type을 사용한다.</p>
<p>현재는 직렬화 포맷은 JSON만을 지원하고 API의 버전은 v1만 사용할 수 있다.
하지만 나중 버전의 호환을 위해서 반드시 content type을 사용해야한다.</p>
<p>추천하는 content type은 <code>application/vnd.schemaregistry.v1+json</code>이다.
v1은 API의 버전이고, json은 직렬화 포맷이다.</p>
<p>모든 API endpoint는 다음과 같은 error message 포맷을 사용한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">422</span> Unprocessable Entity
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;error_code&#34;</span>: 422,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;schema may not be empty&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><blockquote>
<p>추가적으로 요청시 json은 string 형태로 전달해야 한다.</p>
</blockquote>
<h3 id="schemas-관련">Schemas 관련</h3>
<h4 id="getschemasidsintid"><code>GET /schemas/ids/{int: id}</code></h4>
<p>입력한 id를 이용하여 스키마 정보를 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
id (int) - 전역적으로 unique한 스키마 id</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
schema (string) - id로 구분한 schema string</p>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /schemas/ids/1 HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schema&#34;</span>: <span style="color:#e6db74">&#34;{\&#34;type\&#34;: \&#34;string\&#34;}&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="getschemastypes"><code>GET /schemas/types/</code></h4>
<p>Schema Registry에 저장된 스키마 타입을 요청한다.</p>
<blockquote>
<p><strong>Response JSON Object:</strong>
schema (string) - Schema Registry에서 현재 사용가능한 스키마 타입</p>
</blockquote>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /schemas/types HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;JSON&#34;</span>, <span style="color:#e6db74">&#34;PROTOBUF&#34;</span>, <span style="color:#e6db74">&#34;AVRO&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="getschemasidsintidversions"><code>GET /schemas/ids/{int: id}/versions</code></h4>
<p>Schema Registry에 저장된 스키마 타입을 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
id (int) - 전역적으로 unique한 스키마 id</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
subject - subject의 이름
version - return된 subject의 버전</p>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /schemas/ids/1/versions HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[{</span><span style="color:#e6db74">&#34;subject&#34;</span>:<span style="color:#e6db74">&#34;test-subject1&#34;</span>,<span style="color:#e6db74">&#34;version&#34;</span>:1<span style="color:#f92672">}]</span>
</span></span></code></pre></div><h3 id="subjects-관련">Subjects 관련</h3>
<blockquote>
<p>subject resource는 Schema Registry에 저장된 모든 subject 목록을 제공한다.<br>
subject는 스키마가 저장된 이름을 나타낸다.<br>
만약 Kafka에 Schema Registry를 사용하고 있다면, subject는 topic에 대한 key 또는 value 스키마를 등록하고 있는지에 따라 <code>&lt;topic&gt;-key</code> 또는 <code>&lt;topic&gt;-value</code>를 참조한다.</p>
</blockquote>
<h4 id="getsubjects"><code>GET /subjects</code></h4>
<p>Schema Registry에 저장된 subject의 목록을 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
deleted (boolean) - default는 false이다. <code>?deleted=true</code>로 요청하면 soft delete된 subject 목록을 함께 return 한다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
name (string) - subject</p>
<p><strong>Status Codes:</strong>
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /subjects HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#e6db74">&#34;subject1&#34;</span>, <span style="color:#e6db74">&#34;subject2&#34;</span><span style="color:#f92672">]</span>
</span></span></code></pre></div><h4 id="getsubjectsstring-subjectversions"><code>GET /subjects/(string: subject)/versions</code></h4>
<p>Schema Registry에 저장된 subject의 버전 목록을 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
version (int) - subject 아래에 저장된 스키마의 버전</p>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /subjects/test/versions HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>  1, 2, 3, <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">]</span>
</span></span></code></pre></div><h4 id="deletesubjectsstringsubject"><code>DELETE /subjects/(string: subject)</code></h4>
<p>등록된 특정 subject를 삭제한다.
이 API는 topic을 재사용하거나 개발 환경에서만 사용하는 것이 권장된다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
permanent (boolean) - <code>?permanent=true</code>를 추가하여 hard delete를 표시한다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
version (int) - subject 아래에 저장된 스키마의 버전</p>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>DELETE /subjects/test HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>  1, 2, 3, <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">]</span>
</span></span></code></pre></div><h4 id="getsubjectsstringsubjectversionsversionidversion"><code>GET /subjects/(string: subject)/versions/(versionId: version)</code></h4>
<p>등록된 특정 subject를 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
version (versionId) - return될 스키마의 버전이다. [1, 2^31 - 1] 또는 latest가 유효한 값이다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
subject (string) - subject의 이름
id (int) - 전역적으로 unique한 shema의 id
version (int) - subject 아래에 저장된 return될 스키마의 버전
schemaType (string) - schema의 format (default: AVRO)
schema (string) - schema의 내용</p>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
422 Unprocessable Entity - Invalid version
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /subjects/test/versions/1 HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;test&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;version&#34;</span>: 1,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schema&#34;</span>: <span style="color:#e6db74">&#34;{\&#34;type\&#34;: \&#34;string\&#34;}&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="getsubjectsstringsubjectversionsversionidversionschema"><code>GET /subjects/(string: subject)/versions/(versionId: version)/schema</code></h4>
<p>등록된 특정 subject를 요청한다. unescaped schema만 return 된다.?</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
version (versionId) - return될 스키마의 버전이다. [1, 2^31 - 1] 또는 latest가 유효한 값이다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
schema (string) - schema의 내용</p>
<p><strong>Status Codes:</strong>
404 Not Found - subject not found or version not found
422 Unprocessable Entity - Invalid version
500 Internal Server Error - Error in the backend datastore</p>
<blockquote>
</blockquote>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /subjects/test/versions/1/schema HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span><span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="postsubjectsstringsubjectversions"><code>POST /subjects/(string: subject)/versions</code></h4>
<p>등록된 특정 subject에 새로운 스키마를 등록한다.
만약 성공적으로 등록되면, unique한 스키마의 id가 return 된다.
동일한 스키마가 다른 subject에 등록되면 동일한 id가 return 된다. 그라나 스키마의 버전은 subject에 따라 다를 수 있다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
normalize (boolean) - <code>?normalize=true</code>를 추가하여 normalize 상태를 표시한다.?</p>
</blockquote>
<p><strong>Request JSON Object:</strong>
schema (string) - schema의 내용
schemaType - 스키마의 포맷 (default: AVRO)
references - 스키마의 이름 지정 (optional)</p>
<p><strong>Response JSON Object:</strong>
subject (string) - subject의 이름
id (int) - 전역적으로 unique한 스키마의 id
version (int) - return 되는 스키마의 버전
schema (string) - schema의 내용</p>
<p><strong>Status Codes:</strong>
409 Conflic - Incompatible schema
422 Unprocessable Entity - Invalid version
500 Internal Server Error - Error in the backend datastore or Operation timed out or Error while forwarding the request to the primary</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>POST /subjects/test/versions HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schema&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;type\&#34;: \&#34;record\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;name\&#34;: \&#34;test\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;fields\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;string\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;field1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;com.acme.Referenced\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;int\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">     }&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schemaType&#34;</span>: <span style="color:#e6db74">&#34;AVRO&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;references&#34;</span>: <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;com.acme.Referenced&#34;</span>,
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;subject&#34;</span>:  <span style="color:#e6db74">&#34;childSubject&#34;</span>,
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;version&#34;</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span><span style="color:#e6db74">&#34;id&#34;</span>:1<span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="postsubjectsstringsubject"><code>POST /subjects/(string: subject)</code></h4>
<p>특정 subject에 schema가 이미 등록됐는지 확인한다.
만약 존재하면 전역적으로 unique한 id와 schema를 return 한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
normalize (boolean) - <code>?normalize=true</code>를 추가하여 normalize 상태를 표시한다.</p>
</blockquote>
<p><strong>Request JSON Object:</strong>
schema (string) - schema의 내용
schemaType - 스키마의 포맷 (default: AVRO)
references - 스키마의 이름 지정 (optional)</p>
<p><strong>Response JSON Object:</strong>
subject (string) - subject의 이름
id (int) - 전역적으로 unique한 스키마의 id
version (int) - return 되는 스키마의 버전
schema (string) - schema의 내용</p>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found
500 Internal Server Error - Internal server error</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>POST /subjects/test HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;schema&#34;</span>:
</span></span><span style="display:flex;"><span>         <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;type\&#34;: \&#34;record\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;name\&#34;: \&#34;test\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;fields\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                  [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;type\&#34;: \&#34;string\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;name\&#34;: \&#34;field1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;type\&#34;: \&#34;int\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;name\&#34;: \&#34;field2\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                  ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              }&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;subject&#34;</span>: <span style="color:#e6db74">&#34;test&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;id&#34;</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;version&#34;</span>: <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;schema&#34;</span>:
</span></span><span style="display:flex;"><span>         <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;type\&#34;: \&#34;record\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;name\&#34;: \&#34;test\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;fields\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                  [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;type\&#34;: \&#34;string\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;name\&#34;: \&#34;field1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;type\&#34;: \&#34;int\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;name\&#34;: \&#34;field2\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                  ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              }&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="deletesubjectsstringsubjectversionsversionidversion"><code>DELETE /subjects/(string: subject)/versions/(versionId: version)</code></h4>
<p>특정 subject에 등록된 schema의 버전을 삭제한다.
이 API는 호환성 목적으로 이전에 등록한 스키마를 삭제하거나 이전에 등록한 스키마를 다시 등록해야 하는 개발 환경이나 극단적인 상황에서만 사용하는 것이 좋다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
version (versionId) - 삭제될 schema 버전을 표시한다. [1, 2^31 - 1] 또는 latest가 될 수 있다.<br>
permanent (boolean) - <code>?permanent=true</code>를 추가하여 hard delete를 표시한다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
int - 삭제된 schema의 버전</p>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found or Version not found
422 Unprocessable Entity - Invalid version
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>DELETE /subjects/test/versions/1 HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>
</span></span></code></pre></div><h4 id="getsubjectsstringsubjectversionsversionidversionreferencedby"><code>GET /subjects/(string: subject)/versions/{versionId: version}/referencedby</code></h4>
<p>주어진 subject와 버전에 대한 schema의 id의 목록을 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
version (versionId) - return 되는 schema 버전을 표시한다. [1, 2^31 - 1] 또는 latest가 될 수 있다.</p>
</blockquote>
<p><strong>Request JSON Array of Objects:</strong>
id (int) - 전역적으로 unique한 스키마의 id</p>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /subjects/test/versions/1/referencedby HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>  1, 2, 3, <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">]</span>
</span></span></code></pre></div><h2 id="5-rest-api-interface-reference---compatibility-config">5. REST API Interface Reference - Compatibility, Config</h2>
<h3 id="compatibility">Compatibility</h3>
<p>compatibility resource는 모든 버전 또는 특정 버전에 대해 사용자가 스키마의 호환성을 검사할 수 있도록 한다.</p>
<h4 id="postcompatibilitysubjectsstringsubjectversionsversionidversion"><code>POST /compatibility/subjects/(string: subject)/versions/(versionId: version)</code></h4>
<p>input 스키마에 대해서 특정 스키마의 버전에 대한 호환성을 검사한다.</p>
<blockquote>
<p><strong>Parameters:</strong>
subject (string) - 호환성을 테스트할 subject의 이름<br>
version (versionId) - 호환성을 테스트할 대상의 schema 버전을 표시한다. [1, 2^31 - 1] 또는 latest가 될 수 있다.<br>
verbose (boolean) - <code>?verbose=true</code>를 추가하여 호환성 테스트에 실패하는 이유를 출력한다.</p>
</blockquote>
<p><strong>Request JSON Object:</strong>
schema - 스키마의 내용
schemaType - 스키마의 포맷 (default: AVRO)
references - 참조된 스키마의 이름을 지정한다. (optional)</p>
<p><strong>Response JSON Object:</strong>
is_compatible (boolean) - 호환가능 여부</p>
<hr>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found or Version not found
422 Unprocessable Entity - Invalid schema or Invalid version
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>POST /compatibility/subjects/test/versions/latest HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schema&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;type\&#34;: \&#34;record\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;name\&#34;: \&#34;test\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;fields\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;string\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;field1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;int\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;field2\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">     }&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;is_compatible&#34;</span>: true
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="postcompatibilitysubjectsstringsubjectversions"><code>POST /compatibility/subjects/(string: subject)/versions</code></h4>
<p>호환성 전략에 따라 subject의 하나의 버전 또는 여러 버전의 호환성을 확인한다.</p>
<blockquote>
<p><strong>Parameters:</strong>
subject (string) - 호환성을 테스트할 subject의 이름
verbose (boolean) - **<code>?verbose=true</code>**를 추가하여 호환성 테스트에 실패하는 이유를 출력한다.</p>
</blockquote>
<p><strong>Request JSON Object:</strong>
schema - 스키마의 내용
schemaType - 스키마의 포맷 (default: AVRO)
references - 참조된 스키마의 이름을 지정한다. (optional)</p>
<p><strong>Response JSON Object:</strong>
is_compatible (boolean) - 호환가능 여부</p>
<hr>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found
422 Unprocessable Entity - Invalid schema
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>POST /compatibility/subjects/test/versions
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schema&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;type\&#34;: \&#34;record\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;name\&#34;: \&#34;test\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;fields\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;string\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;field1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;int\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;field2\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">     }&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;is_compatible&#34;</span>: true
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="config">Config</h3>
<h4 id="putconfig"><code>PUT /config</code></h4>
<p>전역적 호환성 전략을 변경한다.</p>
<blockquote>
<p><strong>Request JSON Object:</strong><br>
compatibility (string) - 새롭게 변경된 호환성 전략을 표시한다.</p>
</blockquote>
<hr>
<p><strong>Status Codes:</strong>
422 Unprocessable Entity - Invalid compatibility level
500 Internal Server Error - Error in the backend data store or Error while forwarding request to the primary</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>PUT /config HTTP/1.1
</span></span><span style="display:flex;"><span>Host: kafkaproxy.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;compatibility&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;compatibility&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="get-config"><code>**GET /config**</code></h4>
<p>전역적 호환성 전략을 요청한다.</p>
<blockquote>
<p><strong>Response JSON Object:</strong><br>
compatibility (string) - 현재 호환성 전략을 표시한다.</p>
</blockquote>
<hr>
<p><strong>Status Codes:</strong>
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /config HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;compatibilityLevel&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="putconfigstring-subject"><code>PUT /config/(string: subject)</code></h4>
<p>특정 subject에 대한 호환성 전략을 변경한다.</p>
<blockquote>
<p><strong>Parameters:</strong>
subject (string) - subject의 이름</p>
</blockquote>
<p><strong>Request JSON Object:</strong>
compatibility (string) - 새롭게 변경된 호환성 전략을 표시한다.</p>
<hr>
<p><strong>Status Codes:</strong>
422 Unprocessable Entity - Invalid compatibility level
500 Internal Server Error - Error in the backend data store or Error while forwarding request to the primary</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>PUT /config/test HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;compatibility&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;compatibility&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="get-configstring-subject"><code>GET /config/(string: subject)</code></h4>
<p>특정 subject에 대한 호환성 전략을 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
defaultToGlobal (boolean) - **<code>?defaultToBlobal=false</code>**를 추가하여 호환성을 표시한다.<br>
**<code>?defaultToBlobal=true</code>**를 추가하면 호환성 검사에 필요한 사항을 표시한다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
compatibility (string) - 현재 호환성 전략을 표시한다.</p>
<hr>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /config/test HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#34;compatibilityLevel&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="deleteconfigstringsubject"><code>DELETE /config/(string: subject)</code></h4>
<p>특정 subject에 대한 호환성 전략을 삭제하고, 전역적 호환성 전략을 사용한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름</p>
</blockquote>
<hr>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>DELETE /config/test HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#34;compatibility&#34;</span>: <span style="color:#e6db74">&#34;NONE&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="6-subject-name-strategy">6. Subject Name Strategy</h2>
<p>subject 이름을 만들어 내기 위한 subject naming strategy가 있다.</p>
<table>
<thead>
<tr>
<th>Strategy</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>TopicNameStrategy<!-- raw HTML omitted --> (default)</td>
<td>- topic 이름으로부터 subject의 이름을 만든다.<!-- raw HTML omitted -->- 항상 하나의 topic에 있는 메세지는 같은 schema를 가지는 것을 보장한다.</td>
</tr>
<tr>
<td>RecordNameStrategy</td>
<td>- record 이름으로부터 subject의 이름을 만들고, subject 아래에 서로 다른 schema를 가질 수 있는 논리적으로 관련된 그룹화를 제공한다.<!-- raw HTML omitted -->- 하나의 topic에 여러개의 schema를 가지는 것을 허용한다.<!-- raw HTML omitted -->- 이 전략은 메세지가 서로 다른 데이터 구조를 가질때 유용하게 사용할 수 있다.</td>
</tr>
<tr>
<td>TopicRecordNameStrategy</td>
<td>- topic과 record 이름으로부터 subject의 이름을 만들고, subject 아래에 서로 다른 schema를 가질 수 있는 논리적으로 관련된 그룹화를 제공한다.<!-- raw HTML omitted -->- 하나의 topic에 여러개의 schema를 가지는 것을 허용한다.<!-- raw HTML omitted -->- 이 전략은 메세지가 서로 다른 데이터 구조를 가질때 유용하게 사용할 수 있다.</td>
</tr>
</tbody>
</table>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#">https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#</a></li>
</ul>
]]></content:encoded></item><item><title>객체 지향 설계와 스프링</title><link>https://jo-minjun.github.io/notes/spring-core-basic/</link><pubDate>Fri, 01 Jul 2022 19:42:48 +0900</pubDate><guid>https://jo-minjun.github.io/notes/spring-core-basic/</guid><description>1. 스프링이란? 스프링의 생태계 필수: 스프링 프레임워크, 스프링 부트
선택: 스프링 데이터, 스프링 세션, 스프링 시큐리티, 스프링 Rest Docs, 스프링 배치, 스프링 클라우드
가장 중요한 것: 스프링 프레임워크 핵심 기술: 스프링 DI 컨테이너, AOP, 이벤트, 기타 웹 기술: 스프링 MVC, 스프링 webFlux 데이터 접근 기술: 트랜잭션, JDBC, ORM 지원, XML 지원 기술 통합: 캐시, 이메일, 원격접근, 스케줄링 테스트: 스프링 기반 테스트 지원 언어: 코틀린, 그루비 *최근에는 스프링 부트를 통해서 스프링 프레임워크의 기술들을 편리하게 사용한다.</description><content:encoded><![CDATA[<h2 id="1-스프링이란">1. 스프링이란?</h2>
<h3 id="스프링의-생태계">스프링의 생태계</h3>
<blockquote>
<p><strong>필수:</strong>
스프링 프레임워크, 스프링 부트</p>
</blockquote>
<p><strong>선택:</strong>
스프링 데이터, 스프링 세션, 스프링 시큐리티, 스프링 Rest Docs, 스프링 배치, 스프링 클라우드</p>
<blockquote>
</blockquote>
<h3 id="가장-중요한-것-스프링-프레임워크">가장 중요한 것: <strong>스프링 프레임워크</strong></h3>
<ul>
<li><strong>핵심 기술:</strong> 스프링 DI 컨테이너, AOP, 이벤트, 기타</li>
<li><strong>웹 기술:</strong> 스프링 MVC, 스프링 webFlux</li>
<li><strong>데이터 접근 기술:</strong> 트랜잭션, JDBC, ORM 지원, XML 지원</li>
<li><strong>기술 통합:</strong> 캐시, 이메일, 원격접근, 스케줄링</li>
<li><strong>테스트:</strong> 스프링 기반 테스트 지원</li>
<li><strong>언어:</strong> 코틀린, 그루비</li>
</ul>
<blockquote>
<p>*최근에는 <strong>스프링 부트</strong>를 통해서 스프링 프레임워크의 기술들을 편리하게 사용한다.</p>
</blockquote>
<p><strong>*스프링 부트:</strong></p>
<ul>
<li>스프링을 편리하게 사용할 수 있도록 지원, 최근에는 기본으로 사용</li>
<li>단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성</li>
<li>Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨</li>
<li>손쉬운 빌드 구성을 위한 starter 종속성 제공</li>
<li>스프링과 3rd party(외부) 라이브러리 자동 구성</li>
<li>메트릭, 상태 확인, 외부 구성 같은 프로덕션 준비 기능 제공</li>
<li>관례에 의한 간결한 설정</li>
<li>스프링 부트는 스프링 프레임워크를 기반으로 나머지 외부 라이브러리를 자동으로 구성해주는 기술이지, 자체적으로 사용할 수 있는 것이 아님</li>
</ul>
<h3 id="스프링의-의미">스프링의 의미</h3>
<ul>
<li>스프링이라는 단어는 문맥에 따라 다르게 사용된다.
<ol>
<li>스프링 DI 컨테이너 기술</li>
<li>스프링 프레임워크</li>
<li>스프링 부트, 스프링 프레임워크 등을 모두 포함한 스프링 생태계</li>
</ol>
</li>
</ul>
<h3 id="스프링의-핵심-개념">스프링의 핵심 개념</h3>
<ul>
<li>자바 언어 기반의 프레임워크</li>
<li>자바 언어의 가장 큰 특징 - <strong>객체 지향 언어</strong></li>
<li>스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크</li>
<li>스프링은 <strong>좋은 객체 지향</strong> 애플리케이션을 개발할 수 있게 도와주는 프레임워크</li>
<li><strong>객체 지향 프로그래밍</strong>은 스프링의 근원</li>
</ul>
<h2 id="2-좋은-객체-지향-프로그래밍이란">2. 좋은 객체 지향 프로그래밍이란?</h2>
<h3 id="객체-지향-프로그래밍이란">객체 지향 프로그래밍이란?</h3>
<ul>
<li>프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러개의 독립된 단위,
즉 “<strong>객체</strong>&ldquo;들의 <strong>모임</strong>으로 파악하고자 하는 것이다.
각각의 <strong>객체</strong>는 <strong>메세지</strong>를 주고받고 데이터를 처리한다. <strong>(협력)</strong></li>
<li>객체 지향 프로그래밍은 프로그램을 <strong>유연</strong>하고 <strong>변경이 용이</strong>하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다.</li>
</ul>
<blockquote>
<p><strong>유연하고 변경이 용이?</strong></p>
<ol>
<li>레고 블럭 조립하듯이</li>
<li>키보드, 마우스 갈아 끼우듯이</li>
<li>컴퓨터 부품 갈아 끼우듯이</li>
<li>컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법</li>
</ol>
</blockquote>
<h3 id="객체-지향의-특징">객체 지향의 특징</h3>
<ul>
<li>추상화</li>
<li>캡슐화</li>
<li>상속</li>
<li><strong>다형성</strong> → 유연하고 변경이 용이하도록 하는데에 크게 기여함</li>
</ul>
<h3 id="다형성의-실세계-비유">다형성의 실세계 비유</h3>
<ul>
<li>실세계와 객체 지향이 1:1로 매칭되지는 않음</li>
<li>그러나 실세계의 비유로 이해하기 편리함</li>
<li><strong>역할</strong>과 <strong>구현</strong>으로 세상을 구분</li>
</ul>
<p><strong>운전자 - 자동차 예시</strong></p>
<p><img loading="lazy" src="/images/notes/spring-core-basic/0.png" alt="운전자-자동차_예시.png"  />
</p>
<ul>
<li>자동차의 역할(인터페이스)을 3개의 자동차로 구현함</li>
<li>운전자는 K3를 타다가 아반떼로 차를 변경할 수 있음</li>
<li>차가 바뀌어도 운전자는 운전을 할 수 있음 → 유연하고 변경이 용이</li>
<li><strong>클라이언트에 영향을 주지 않고, 새로운 기능을 제공할 수 있음</strong> → 유연하고 변경이 용이</li>
</ul>
<blockquote>
<p><strong>이외의 예시</strong></p>
<p>공연에서 각 인물의 역할
키보드, 마우스, 세상의 표준 인터페이스들
정렬 알고리즘
할인 정책 예시</p>
</blockquote>
<h3 id="역할과-구현을-분리">역할과 구현을 분리</h3>
<ul>
<li><strong>역할과 구현</strong>으로 구분하면 세상이 단순해지고 유연해지며, 변경도 편리해진다.</li>
<li>장점
<ul>
<li>클라이언트는 대상의 <strong>역할(인터페이스)만 알면 된다.</strong></li>
<li>클라이언트는 구현 <strong>대상의 내부 구조를 몰라도 된다.</strong></li>
<li>클라이언트는 구현 <strong>대상의 내부 구조가 변경되어도 영향을 받지 않는다.</strong></li>
<li>클라이언트는 구현 <strong>대상 자체를 변경해도 영향을 받지 않는다.</strong></li>
</ul>
</li>
</ul>
<h3 id="자바-언어에서의-역할과-구현"><strong>자바 언어에서의 역할과 구현</strong></h3>
<ul>
<li>자바 언어의 다형성을 활용
<ul>
<li>역할: 인터페이스</li>
<li>구현: 인터페이스를 구현한 클래스, 구현 객체</li>
</ul>
</li>
<li>객체를 설계할 때 <strong>역할</strong>과 <strong>구현</strong>을 명확히 분리</li>
<li>객체 설계시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기
(구현보다 <strong>역할이 중요</strong>하다.)</li>
</ul>
<h3 id="객체의-협력이라는-관계부터-생각">객체의 협력이라는 관계부터 생각</h3>
<ul>
<li>혼자있는 객체는 없다.</li>
<li>클라이언트: 요청</li>
<li>서버: 응답</li>
<li>수 많은 객체 클라이언트와 객체 서버는 서로 협력 관계를 가진다.</li>
</ul>
<h3 id="자바-언어의-다형성">자바 언어의 다형성</h3>
<p><img loading="lazy" src="/images/notes/spring-core-basic/1.png" alt="오버라이딩.png"  />
</p>
<ul>
<li>오버라이딩을 떠올려보자</li>
<li>오버라이딩된 메서드가 실행</li>
<li>다형성으로 인터페이스를 구현한 객체를 실행 시점에 유연하게 변경할 수 있다.</li>
<li>물론 상속 관계도 다형성, 오버라이딩 적용 가능</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MemberService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> MemberRepository memberRepository1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MemoryMemberRepository<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> MemberRepository memberRepository2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> JdbcMemberRepository<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="다형성의-본질">다형성의 본질</h3>
<ul>
<li>인터페이스를 구현한 <strong>객체 인스턴스</strong>를 <strong>실행 시점에 유연하게</strong> 변경할 수 있다.</li>
<li>다형성의 본질을 이해하려면 <strong>협력</strong>이라는 객체 사이의 관계에서 시작해야함</li>
<li><strong>클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.</strong></li>
</ul>
<h3 id="역할과-구현을-분리---정리">역할과 구현을 분리 - 정리</h3>
<ul>
<li>실세계의 역할과 구현이라는 편리한 컨셉을 다형성을 통해 객체 세상으로 가져올 수 있음</li>
<li>유연하고, 변경이 용이</li>
<li>확장 가능한 설계</li>
<li>클라이언트에 영향을 주지 않는 변경 가능</li>
<li>인터페이스를 안정적으로 잘 설계하는 것이 중요</li>
</ul>
<h3 id="역할과-구현을-분리---한계">역할과 구현을 분리 - 한계</h3>
<ul>
<li>역할(인터페이스) 자체가 변하면 클라이언트, 서버 모두에 큰 변경이 발생한다.</li>
<li>자동차를 비행기로 변경해야 한다면?</li>
<li>대본 자체가 변경된다면?</li>
<li>USB 인터페이스 자체가 변경된다면?</li>
<li>인터페이스를 안정적으로 잘 설계하는 것이 중요</li>
</ul>
<h3 id="스프링과-객체-지향">스프링과 객체 지향</h3>
<ul>
<li>다형성이 가장 중요하다!</li>
<li>스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.</li>
<li>스프링에서 이야기하는 제어의 역전(IoC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다.</li>
<li>스프링을 사용하면 마치 레고 블럭 조립하듯이, 공연 무대의 배우를 선택하듯이, 구현을 편리하게 변경할 수 있다.</li>
<li>그리고 또 중요한 것 - <strong>SOLID</strong></li>
</ul>
<h2 id="3-좋은-객체-지향-설계의-5가지-원칙-solid">3. 좋은 객체 지향 설계의 5가지 원칙 (SOLID)</h2>
<h3 id="solid">SOLID</h3>
<p>클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리</p>
<ul>
<li><strong>SRP:</strong> 단일 책임 원칙 (Single Responsibility Principle)</li>
<li><strong>OCP:</strong> 개방 - 폐쇄 원칙 (Open - Closed Principle)</li>
<li><strong>LSP:</strong> 리스코프 치환 원칙 (Liskov Substitution Principle)</li>
<li><strong>ISP:</strong> 인터페이스 분리 원칙 (Interface Segregation Principle)</li>
<li><strong>DIP:</strong> 의존관계 역전 원칙 (Dependency Inversion Principle)</li>
</ul>
<h3 id="srp-단일-책임-원칙-single-responsibility-principle"><strong>SRP:</strong> 단일 책임 원칙 (Single Responsibility Principle)</h3>
<ul>
<li>한 클래스는 하나의 책임만 가져야 한다.</li>
<li>하나의 책임이라는 것은 모호하다.
<ul>
<li>클 수 있고, 작을 수 있다.</li>
<li>문맥과 상황에 따라 다르다.</li>
</ul>
</li>
<li>중요한 <strong>기준은 변경</strong>이다.
<ul>
<li>변경이 있을 때 파급효과가 적으면 단일 책임 원칙을 잘 따른 것</li>
<li>Ex) UI 변경, 객체의 생성과 사용을 분리</li>
</ul>
</li>
</ul>
<h3 id="ocp-개방---폐쇄-원칙-open---closed-principle"><strong>OCP:</strong> 개방 - 폐쇄 원칙 (Open - Closed Principle)</h3>
<ul>
<li>가장 중요한 원칙</li>
<li>소프트웨어 요소는 <strong>확장에는 열려</strong>있으나 <strong>변경에는 닫혀</strong>있어야 한다.</li>
<li>다형성을 활용
<ul>
<li>인터페이스를 구현한 클래스를 하나 만들어서 새로운 기능을 구현</li>
<li>지금까지 배운 역할과 구현의 분리를 생각해보자</li>
<li>Ex) 운전자 - 자동차
<ul>
<li>자동차가 바뀌어도 운전자는 똑같이 운전함 → 확장에 열림</li>
</ul>
</li>
</ul>
</li>
<li>문제점
<ul>
<li>MemberService 클라이언트가 구현 클래스를 직접 선택</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MemberService</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// 기존 코드
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// private MemberRepository memberRepository1 = new MemoryMemberRepository();
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// 변경 코드
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">private</span> MemberRepository memberRepository2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> JdbcMemberRepository<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li><strong>구현 객체를 변경하려면 클라이언트 코드를 변경해야 한다.</strong></li>
<li><strong>다형성을 사용했지만 OCP 원칙을 지킬 수 없다.</strong></li>
<li>객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다.
<ul>
<li>이 역할을 스프링 컨테이너가 해결해줌</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="lsp-리스코프-치환-원칙-liskov-substitution-principle"><strong>LSP:</strong> 리스코프 치환 원칙 (Liskov Substitution Principle)</h3>
<ul>
<li>프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스를 바꿀 수 있어야 한다.</li>
<li>다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것
<ul>
<li>다형성을 지원하기 위한 원칙</li>
<li>인터페이스를 구현한 구현체를 믿고 사용하려면 이 원칙이 필요하다.</li>
</ul>
</li>
<li>단순히 컴파일에 성공하는 것을 넘어서는 이야기</li>
<li>Ex) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능 → 뒤로가게 구현하면 리스코프 치환 원칙 위반</li>
</ul>
<h3 id="isp-인터페이스-분리-원칙-interface-segregation-principle"><strong>ISP:</strong> 인터페이스 분리 원칙 (Interface Segregation Principle)</h3>
<ul>
<li>특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.</li>
<li>자동차 인터페이스 → 운전 인터페이스, 정비 인터페이스로 분리</li>
<li>사용자 클라이언트 → 운전자 클라이언트, 정비사 클라이언트로 분리</li>
<li>분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음</li>
<li>인터페이스가 명확해지고, 대체 가능성이 높아진다.</li>
</ul>
<h3 id="dip-의존관계-역전-원칙-dependency-inversion-principle"><strong>DIP:</strong> 의존관계 역전 원칙 (Dependency Inversion Principle)</h3>
<ul>
<li>“추상화에 의존해야지, 구체화에 의존하면 안된다.”
<ul>
<li>이 원칙을 따르는 방법 중 하나다.</li>
</ul>
</li>
<li>쉽게 이야기 해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻</li>
<li>앞에서 이야기한 <strong>역할에 의존하게 해야 한다</strong>는 것과 같다.
<ul>
<li>객체 세상도 클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다.</li>
<li>구현체에 의존하게 되면 변경이 아주 어려워진다.</li>
</ul>
</li>
<li>Ex) 운전자 - 자동차
<ul>
<li>운전자는 운전 역할에 의존해야지, 자동차 종류에 의존할 경우 차량이 바뀌면 운전이 어려워짐</li>
</ul>
</li>
<li>그런데 개방 - 폐쇄 원칙에서 설명한 MemberService는 인터페이스에 의존하지만, 구현 클래스도 동시에 의존한다.
<ul>
<li>MemberService가 구현 클래스를 직접 선택 → <strong>DIP 위반</strong></li>
</ul>
</li>
</ul>
<h3 id="정리">정리</h3>
<ul>
<li>객체 지향의 핵심은 다형성</li>
<li>다형성만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다.</li>
<li>다형성만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다.</li>
<li><strong>다형성만으로는 개방 - 폐쇄 원칙, 의존관계 역전 원칙을 지킬 수 없다.</strong></li>
</ul>
<h2 id="4-객체-지향-설계와-스프링">4. 객체 지향 설계와 스프링</h2>
<h3 id="왜-스프링-이야기에-객체-지향이야기가-나오는가">왜 스프링 이야기에 객체 지향이야기가 나오는가?</h3>
<ul>
<li>스프링은 다음 기술로 다형성 + 개방 - 폐쇄 원칙, 의존관계 역전 원칙을 가능하게 지원한다.
<ul>
<li>DI (Dependency Injection): 의존관계, 의존성 주입</li>
<li>DI 컨테이너 제공</li>
</ul>
</li>
<li>클라이언트 코드의 변경 없이 기능 확장</li>
<li>쉽게 부품을 교체하듯이 개발</li>
</ul>
<h3 id="총-정리">총 정리</h3>
<ul>
<li>모든 설계에 역할과 구현을 분리하자</li>
<li>자동차, 공연의 예를 떠올려보자</li>
<li>애플리케이션 설계도 공연을 설계하듯이 배역만 만들어두고, 배우는 언제든지 <strong>유연하게 변경</strong>할 수 있도록 만드는 것이 좋은 객체 지향 설계이다.</li>
<li>이상적으로는 모든 설계에 인터페이스를 부여하자.</li>
</ul>
<h3 id="실무-고민">실무 고민</h3>
<ul>
<li>하지만 인터페이스를 도입하면 추상화라는 비용이 발생한다.
<ul>
<li>인터페이스도 만들고 구현체도 만들고</li>
<li>개발자가 구현된 코드가 안보여서 한 번더 열어봐야 됨</li>
</ul>
</li>
<li>기능을 확장할 가능성이 없다면 구체 클래스를 직접 사용하고, 향후에 꼭 필요할 때 리팩토링을 해서 인터페이스를 도입하는 것도 방법이다.</li>
</ul>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8">인프런 강의 스프링 핵심 원리(김영한)</a></li>
</ul>
]]></content:encoded></item><item><title>Kafka란?</title><link>https://jo-minjun.github.io/notes/kafka/</link><pubDate>Fri, 01 Jul 2022 12:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/kafka/</guid><description>1. kafka 란? apache kafka는 오픈 소스 분산 이벤트 스트리밍 플랫폼이다.
*데이터 파이프 라인 구성시, 주로 사용되는 오픈 소스로 대용량 실시간 로그 처리에 특화되어 많은 사람들이 사용하고 있다.
*데이터 파이프 라인: 데이터 처리 단계의 출력이 다음 단계의 입력으로 이어지는 형태로 연결된 구조를 가리킨다.
2. kafka의 특성 2.1. Publisher-Subscriber 모델 Publisher-Subscriber 모델은 중간에 데이터 큐를 두고 서로 간 독립적으로 데이터를 생산하고 소비한다.
이러한 구조를 통해, Publisher나 Subscriber에 장애가 생겨도, 독립적이기 때문에 안정적으로 데이터를 처리할 수 있다.</description><content:encoded><![CDATA[<h2 id="1-kafka-란"><strong>1. kafka 란?</strong></h2>
<p>apache kafka는 오픈 소스 분산 이벤트 스트리밍 플랫폼이다.</p>
<p><strong>*데이터 파이프 라인</strong> 구성시, 주로 사용되는 오픈 소스로 대용량 실시간 로그 처리에 특화되어 많은 사람들이 사용하고 있다.</p>
<blockquote>
<p><strong>*데이터 파이프 라인:</strong>
데이터 처리 단계의 출력이 다음 단계의 입력으로 이어지는 형태로 연결된 구조를 가리킨다.</p>
</blockquote>
<h2 id="2-kafka의-특성">2. kafka의 특성</h2>
<h3 id="21-publisher-subscriber-모델">2.1. Publisher-Subscriber 모델</h3>
<p>Publisher-Subscriber 모델은 중간에 데이터 큐를 두고 서로 간 독립적으로 데이터를 생산하고 소비한다.</p>
<p>이러한 구조를 통해, Publisher나 Subscriber에 장애가 생겨도, 독립적이기 때문에 안정적으로 데이터를 처리할 수 있다.</p>
<h3 id="22-고가용성-및-확장성-high-availablility-and-scalability">2.2. 고가용성 및 확장성 (High availablility and Scalability)</h3>
<p>kafka는 cluster 구조로 데이터를 분산하여 저장한다.</p>
<p>따라서 하나의 broker에 장애가 생겨도 가용성이 높다.</p>
<p>또한 클러스터를 수평적으로 늘려 안정성 및 성능을 향상시키는 Scale-out이 가능하다.</p>
<h3 id="23-디스크-순차-저장-및-처리">2.3. 디스크 순차 저장 및 처리</h3>
<p>메세지를 메모리 큐에 적재하는 기존 메세지 시스템과 달리 kafka는 메세지를 디스크에 순차적으로 저장한다.</p>
<p>따라서</p>
<p>서버에 장애가 나도 메세지가 디스크에 저장되어 안정성이 높고 순차적으로 저장되어 I/O작업이 줄어들어 성능이 좋아진다.</p>
<h3 id="24-분산-처리">2.4. 분산 처리</h3>
<p>kafka는 partition을 통해 여러개의 partition을 여러개의 서버에 분산시켜 나누어 처리할 수 있다.</p>
<h2 id="3-kafka의-구조">3. kafka의 구조</h2>
<h3 id="31-publisher-subscriber-모델">3.1. Publisher-Subscriber 모델</h3>
<p>Pub-Sub (발행-구독) 모델은 특정 시스템에 직접 메세지를 전달하는 시스템이 아니다.</p>
<p>publisher은 메세지를 <strong>*Topic</strong>을 통해서 분류하여 관리하고, receiver은 전달받기를 원하는 <strong>*Topic</strong>을 구독하여 메세지를 전달 받는다.</p>
<p>즉 <strong>*kafka cluster</strong>를 중심으로 producer가 push하고, consumer가 메세지를 pull하는 구조이다.</p>
<p><img loading="lazy" src="/images/notes/kafka/pub-sub.png" alt="pub-sub"  />
</p>
<blockquote>
<p><strong>*kafka cluster:</strong>
kafka 서버 (broker)로 이루어진 클러스터를 말한다.</p>
</blockquote>
<p><strong>broker:</strong>
메세지 중계 역할을 하는 kafka서버를 말한다.</p>
<p><strong>*topic:</strong>
kafka cluster에 메세지를 관리할 때, 기준이 되는 논리적 모델이다.
여러개를 생성할 수 있으며, 하나의 topic은 1개 이상의 partition으로 구성되어 있다.</p>
<p><strong>partition:</strong>
토픽에서 메세지를 분산 처리하는 단위이다.
토픽을 partition으로 나누어 나눈 만큼 분산 처리를 한다.
kafka option에서 지정한 replica (replication factor)의 수만큼 partition이 broker들에게 복제된다.</p>
<p><strong>leader &amp; follower:</strong>
kafka 에서는 복제된 partition들 중에서 하나의 leader가 선출된다.
leader는 read, write 연산을 담당하며, follower들은 leader의 메세지를 복사한다.
leader partition이 포함된 broker에서 장애가 발생하면
follower partition들 중 하나가 leader가 된다.</p>
<p><strong>*consumer group - 상세 설명:</strong>
consumer의 집합을 구성하는 단위이다.
kafka에서는 consumer group 단위로 메세지를 처리하고, consumer group의 consumer 수만큼 파티션의 데이터를 분산처리하게 된다.</p>
<p><strong>*offset - 상세 설명:</strong>
consumer group들은 partition의 offset을 기준으로 데이터를 순차적으로 처리한다.</p>
<blockquote>
</blockquote>
<p><strong>3.1.1. consumer group</strong></p>
<p>여러개의 producer 들이 메세지를 전달하는 속도가 consumer가 메세지를 처리하는 속도보다 빠르면 하나의 consumer 만으로는 전달되는 메세지를 모두 처리할 수 없다.</p>
<p>따라서 consumer group을 통해 메세지를 처리한다.</p>
<p>consumer group은 같은 토픽의 여러개의 partition을 분담하여 처리하게 된다.</p>
<p>가령 partition의 수가 4개이고, consumer group의 consumer가 2개라면
각 consumer는 2개씩의 partition을 분담하여 메세지를 처리한다.
또한, partition의 수가 consumer group의 consumer 수보다 적다면
partition을 분담하지 못한 consumer는 idle이 된다.</p>
<p><strong>3.1.2. offset</strong></p>
<p>producer는 메세지를 순차적으로 전달하고 디스크에 순차적으로 저장한다.
따라서 저장된 메세지 뒤에 세로운 메세지를 붙이는 append 방식으로 write를 진행한다.
이 때 partition 들은 각 메세지의 순차적인 위치인 offset으로 구성된다.</p>
<p>따라서 offset은 partition 내에서 메세지의 위치를 표시하는 유니크한 숫자이다.
consumer는 자신이 어디까지 메세지를 처리했는지 offset을 이용해서 관리한다.</p>
<p><img loading="lazy" src="/images/notes/kafka/offset.png" alt="offset"  />
</p>
<h2 id="4-zookeeper-란">4. zookeeper 란?</h2>
<p>zookeeper는 분산 애플리케이션이 안정적으로 서비스될 수 있도록 각 애플리케이션의 구성 정보를 중앙 집중시키고, 네이밍, 동기화 등의 서비스를 지원한다.</p>
<p><img loading="lazy" src="/images/notes/kafka/zookeeper.png" alt="zookeeper"  />
</p>
<blockquote>
<p>zookeeper 여러개를 하나의 클러스터로 구성하고, 각각의 zookeeper 서버는 클라이언트 애플리케이션과 커넥션을 유지하며, 상태 정보를 공유한다.</p>
</blockquote>
<p>상태 정보는 zookeeper의 데이터 레지스터의 공유 계층 name space에 저장된다. 그리고 이 공간을 znode라고 부른다.</p>
<p>znode는 key-value 형태이며, 자식 노드를 가지고 있는 계층형 구조로 구성되어 있다.</p>
<p><img loading="lazy" src="/images/notes/kafka/znode.png" alt="znode"  />
</p>
<p>zookeeper는 클러스터로 구성될 시 몇개의 서버가 다운되더라도 과반수 구조에 의해 서비스가 유지된다.</p>
<p>따라서 일반적으로 클러스터는 홀수개의 서버로 구성된다.</p>
<blockquote>
<p><strong>3대 구성 클러스터:</strong>
1대 down, 2대 up: 서비스가 유지된다.
2대 down, 1대 up: 서비스가 유지되지 않는다.</p>
</blockquote>
]]></content:encoded></item></channel></rss>