<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Kubernetes on minjun's blog</title><link>https://jo-minjun.github.io/tags/kubernetes/</link><description>Recent content in Kubernetes on minjun's blog</description><image><title>minjun's blog</title><url>https://jo-minjun.github.io/logo.png</url><link>https://jo-minjun.github.io/logo.png</link></image><generator>Hugo -- gohugo.io</generator><language>kr</language><lastBuildDate>Sat, 23 Sep 2023 02:15:52 +0900</lastBuildDate><atom:link href="https://jo-minjun.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes: 애플리케이션 설정을 체계적으로 관리하기</title><link>https://jo-minjun.github.io/notes/kubernetes-env/</link><pubDate>Sat, 23 Sep 2023 02:15:52 +0900</pubDate><guid>https://jo-minjun.github.io/notes/kubernetes-env/</guid><description>쿠버네티스 개발전략을 읽고 작성한 내용입니다.
https://product.kyobobook.co.kr/detail/S000200103262
쿠버네티스를 통해서 설정을 외부화하여 관리하는 방법을 알아보겠습니다. 여기서 설정은 데이터베이스 url, username, password, 얼마전에 작업한 뉴렐릭 라이센스 키 같은 값들을 말합니다. 이러한 설정값들은 변경되거나 추가 삭제되는 경우가 많기 때문에 애플리케이션 외부에서 관리하는 것이 유리합니다. 외부화된 설정: Externalized configuration 환경 변수와 실행 인자 실행 인자 우선 실행 인자와 환경 변수에 대해 알아보겠습니다
prod 프로필을 사용하려면 아래와 같이 실행 인자로 환경 정보를 넘겨줍니다.
$ java -Dspring.</description><content:encoded><![CDATA[<blockquote>
<p>쿠버네티스 개발전략을 읽고 작성한 내용입니다.<br>
<a href="https://product.kyobobook.co.kr/detail/S000200103262">https://product.kyobobook.co.kr/detail/S000200103262</a></p>
</blockquote>
<ul>
<li>쿠버네티스를 통해서 설정을 외부화하여 관리하는 방법을 알아보겠습니다.</li>
<li>여기서 설정은 데이터베이스 url, username, password, 얼마전에 작업한 뉴렐릭 라이센스 키 같은 값들을 말합니다. 이러한 설정값들은 변경되거나 추가 삭제되는 경우가 많기 때문에 애플리케이션 외부에서 관리하는 것이 유리합니다.
<ul>
<li>외부화된 설정: Externalized configuration</li>
</ul>
</li>
</ul>
<h2 id="환경-변수와-실행-인자">환경 변수와 실행 인자</h2>
<h3 id="실행-인자">실행 인자</h3>
<ul>
<li>
<p>우선 실행 인자와 환경 변수에 대해 알아보겠습니다</p>
</li>
<li>
<p>prod 프로필을 사용하려면 아래와 같이 실행 인자로 환경 정보를 넘겨줍니다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ java -Dspring.profiles.active<span style="color:#f92672">=</span>prod -jar my-app.jar
</span></span></code></pre></div><ul>
<li>위 스크립트에서 <code>-Dspring.profiles.active=prod</code>를 실행 인자라고 합니다. 이 실행 인자를 이용해서 애플리케이션에 환경 정보를 넘겨 줄 수 있습니다.</li>
<li><code>application-prod.yaml</code> 과 같이 미리 정의된 설정 파일을 선택하여 사용할 수 있습니다.</li>
</ul>
</li>
<li>
<p>그런데 위와 같은 방법은 애플리케이션을 직접 실행하는 환경에서 적합합니다. 쿠버네티스를 사용하는 환경에서는 적합하지 않은데요.</p>
</li>
<li>
<p>쿠버네티스 환경에서는 파드 명세서에 실행 인자를 정의하여 환경 정보를 넘겨줄 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-pod-prod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>	- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-container</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">image</span>: <span style="color:#ae81ff">alswns9288/my-app:1.0.0</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">name</span>: <span style="color:#ae81ff">web</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;-spring.profiles.active=prod&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ...</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="환경-변수">환경 변수</h3>
<ul>
<li>파드 명세서에 환경 변수를 정의하여 설정을 관리할 수 있습니다
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-pod-prod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>	- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-container</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">image</span>: <span style="color:#ae81ff">alswns9288/my-app:1.0.0</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">SPRING_PROFILES_ACTIVE</span>
</span></span><span style="display:flex;"><span>		  <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;prod&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ...</span>
</span></span></code></pre></div><ul>
<li>파드 명세서에 name, value 를 정의하여 환경 정보를 넘겨줄 수 있습니다.</li>
</ul>
</li>
</ul>
<h2 id="컨피그맵을-이용하여-여러-설정값-한번에-관리하기">컨피그맵을 이용하여 여러 설정값 한번에 관리하기</h2>
<ul>
<li>실행 인자와 환경 변수는 여러 파드가 동일한 설정값을 사용하는 경우에는 적합하지 않습니다. 이런 경우에는 컨피그맵을 사용하면 설정값을 편리하게 관리할 수 있습니다.</li>
<li>컨피그맵은 설정값을 key-value 형태로 쿠버네티스 클러스터에 저장하고 파드에서 사용할 수 있도록 도와주는 역할을 합니다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># 컨피그맵</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ConfigMap</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-config</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">APPLICATION_KEY</span>: <span style="color:#e6db74">&#34;configmap value&#34;</span>
</span></span></code></pre></div><h3 id="컨피그맵-사용"><strong>컨피그맵 사용</strong></h3>
<p><strong>&lt;컨피그맵 참조&gt;</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># 파드</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>	- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-container</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">image</span>: <span style="color:#ae81ff">alswns9288/my-app:1.0.0</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">name</span>: <span style="color:#ae81ff">web</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">APPLICATION_KEY</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">configMapKeyRef</span>:
</span></span><span style="display:flex;"><span>					<span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-config</span>
</span></span><span style="display:flex;"><span>					<span style="color:#f92672">key</span>: <span style="color:#ae81ff">APPLICATION_KEY</span>
</span></span></code></pre></div><p><strong>&lt;컨피그맵을 파일로 참조&gt;</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># 컨피그맵</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ConfigMap</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-config</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">my-property</span>: <span style="color:#ae81ff">|</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">APPLICATION_KEY</span>: <span style="color:#e6db74">&#34;configmap value&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># 파드</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>	- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-container</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">image</span>: <span style="color:#ae81ff">alswns9288/my-app:1.0.0</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">name</span>: <span style="color:#ae81ff">web</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">property</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/app/resources</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">property</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">configMap</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">items</span>:
</span></span><span style="display:flex;"><span>				- <span style="color:#f92672">key</span>: <span style="color:#ae81ff">my-properaty</span>
</span></span><span style="display:flex;"><span>					<span style="color:#f92672">path</span>: <span style="color:#ae81ff">application.yaml</span>
</span></span></code></pre></div><ul>
<li><strong>&lt;컨피그맵 참조&gt;</strong> 방법과 <strong>&lt;컨피그맵을 파일로 참조&gt;</strong> 방법의 차이는 무엇일까요?
<ul>
<li><strong>&lt;컨피그맵 참조&gt;</strong> 방법은 파드를 시작할 때 환경변수를 시스템에 설정하고 파드를 시작합니다. 따라서 컨피그맵을 변경해도 파드의 환경변수 값이 변경되지 않습니다.
<ul>
<li>변경된 컨피그맵을 적용하려면 파드를 재시작해야합니다.</li>
</ul>
</li>
<li>반면에 <strong>&lt;컨피그맵을 파일로 참조&gt;</strong> 방법은 파일을 마운트하는 방법입니다. 컨피그맵을 변경하면 마운트된 파일이 변경됩니다. 따라서 파드를 재시작하지 않아도 변경된 컨피그맵을 사용할 수 있습니다.</li>
</ul>
</li>
</ul>
<blockquote>
<p>파드 명세서에서 <code>env</code> 가 아닌 <code>envFrom</code> 을 사용할 수도 있습니다.<br>
이 방식은 <code>env</code> 처럼 컨피그맵의 특정 key를 참조하는 것이 아닌, 컨피그맵의 전체 키를 참조합니다.</p>
</blockquote>
<h2 id="시크릿을-이용해-민감한-설정값-관리하기">시크릿을 이용해 민감한 설정값 관리하기</h2>
<ul>
<li>컨피그맵으로 관리하기 민감한 값은 시크릿으로 관리할 수 있습니다</li>
<li>시크릿은 민감하게 관리해야 하는 설정값들을 별도로 관리할 수 있게 해줍니다.</li>
<li>시크릿을 생성하는 대표적인 2가지를 알아보겠습니다.</li>
</ul>
<h3 id="파일로-시크릿-생성">파일로 시크릿 생성</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat secretfile
</span></span><span style="display:flex;"><span>secret value
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ kubectl create secret generic my-secret --from-file<span style="color:#f92672">=</span>APPLICATION_KEY<span style="color:#f92672">=</span>./secretfile
</span></span></code></pre></div><h3 id="명세서로-시크릿-생성">명세서로 시크릿 생성</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># 시크릿</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Secret</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-secret-manifest</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">APPLICATION_KEY</span>: <span style="color:#ae81ff">c2VjcmV0IHZhbHVlCg==</span>
</span></span></code></pre></div><ul>
<li>명세서를 사용할때는 base64로 인코딩된 값을 사용해야합니다.</li>
</ul>
<h3 id="파드에서-시크릿-사용">파드에서 시크릿 사용</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 파드</span>
</span></span><span style="display:flex;"><span>apiVersion: v1
</span></span><span style="display:flex;"><span>kind: Pod
</span></span><span style="display:flex;"><span>metadata:
</span></span><span style="display:flex;"><span>  name: my-pod2
</span></span><span style="display:flex;"><span>spec:
</span></span><span style="display:flex;"><span>  containers:
</span></span><span style="display:flex;"><span>    - name: my-container
</span></span><span style="display:flex;"><span>      image: <span style="color:#e6db74">&#39;alswns9288/my-app:1.0.0&#39;</span>
</span></span><span style="display:flex;"><span>      ports:
</span></span><span style="display:flex;"><span>        - containerPort: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>          name: web
</span></span><span style="display:flex;"><span>          protocol: TCP
</span></span><span style="display:flex;"><span>      env:
</span></span><span style="display:flex;"><span>        - name: APPLICATION_KEY
</span></span><span style="display:flex;"><span>          valueFrom:
</span></span><span style="display:flex;"><span>            secretKeyRef:
</span></span><span style="display:flex;"><span>              name: my-secret
</span></span><span style="display:flex;"><span>              key: APPLICATION_KEY
</span></span></code></pre></div><h3 id="시크릿-조회">시크릿 조회</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ kubectl get secret my-secret -o yaml
</span></span><span style="display:flex;"><span>apiVersion: v1
</span></span><span style="display:flex;"><span>data:
</span></span><span style="display:flex;"><span>  APPLICATION_KEY: c2VjcmV0IHZhbHVlCg<span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span>kind: Secret
</span></span><span style="display:flex;"><span>metadata:
</span></span><span style="display:flex;"><span>  creationTimestamp: <span style="color:#e6db74">&#34;2023-09-19T16:12:05Z&#34;</span>
</span></span><span style="display:flex;"><span>  name: my-secret
</span></span><span style="display:flex;"><span>  namespace: default
</span></span><span style="display:flex;"><span>  resourceVersion: <span style="color:#e6db74">&#34;5320&#34;</span>
</span></span><span style="display:flex;"><span>  uid: ccf7e058-755d-4587-ba2b-0d98ff3c8a05
</span></span><span style="display:flex;"><span>type: Opaque
</span></span></code></pre></div><ul>
<li>위와 같이 시크릿을 조회하면 base64로 인코딩된 설정값을 조회할 수 있습니다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ echo c2VjcmV0IHZhbHVlCg<span style="color:#f92672">==</span> | base64 -D
</span></span><span style="display:flex;"><span>secret value
</span></span></code></pre></div><ul>
<li>이렇게 base64로 되어 있으면 어떻게 민감한 값을 관리할 수 있을까 의문이 들 수 있습니다.</li>
<li>쿠버네티스는 플러그인으로 암호화 설정을 하거나, 시크릿에 대한 권한 제한으로 처리하도록 가이드하고 있습니다.</li>
</ul>
]]></content:encoded></item><item><title>Kubernetes: pod와 service</title><link>https://jo-minjun.github.io/notes/kubernetes-pod-service/</link><pubDate>Wed, 11 Jan 2023 23:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/kubernetes-pod-service/</guid><description>Pod container Pod에는 container가 여러개 있을 수 있으며, localhost로 접근할 수 있다. Pod가 생성될 때는 IP가 할당되며, 이 IP를 통해 Pod에 접근할 수 있다. 쿠버네티스 클러스터 내에서만 IP로 접근 가능하다. Pod가 재생성되면 IP 주소가 바뀐다. apiVersion: v1 # 하나의 Pod kind: Pod metadata: name: pod-1 spec: # 여러 개의 container containers: - name: container1 image: image1 ports: - containerPort: 8000 - name: container2 image: image2 ports: - containerPort: 8080 label Pod 뿐만 아니라 다른 오브젝트에도 사용할 수 있지만, Pod에서 가장 많이 사용된다.</description><content:encoded><![CDATA[<h2 id="pod">Pod</h2>
<h3 id="container">container</h3>
<ul>
<li>Pod에는 container가 여러개 있을 수 있으며, localhost로 접근할 수 있다.</li>
<li>Pod가 생성될 때는 IP가 할당되며, 이 IP를 통해 Pod에 접근할 수 있다.
<ul>
<li>쿠버네티스 클러스터 내에서만 IP로 접근 가능하다.</li>
</ul>
</li>
<li>Pod가 재생성되면 IP 주소가 바뀐다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 하나의 Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">pod-1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 여러 개의 container</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">container1</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">image</span>: <span style="color:#ae81ff">image1</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8000</span>
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">container2</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">image</span>: <span style="color:#ae81ff">image2</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>
</span></span></code></pre></div><h3 id="label">label</h3>
<ul>
<li>Pod 뿐만 아니라 다른 오브젝트에도 사용할 수 있지만, Pod에서 가장 많이 사용된다.</li>
<li>목적에 따라 오브젝트를 분류하고 분류된 오브젝트만 연결하기 위해서 사용한다.</li>
<li>key:value</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Pod1                      Pod2                      Pod3
</span></span><span style="display:flex;"><span>type:web                  type:db                   type:server
</span></span><span style="display:flex;"><span>env:dev                   env:dev                   env:dev
</span></span><span style="display:flex;"><span><span style="color:#f92672">================================================================</span>
</span></span><span style="display:flex;"><span>Pod4                      Pod5                      Pod6
</span></span><span style="display:flex;"><span>type:web                  type:db                   type:server
</span></span><span style="display:flex;"><span>env:prod                  env:prod                  env:prod
</span></span></code></pre></div><ul>
<li>위와 같은 dev/prod 환경에서 web/db/server 종류가 있는 경우
<ul>
<li>웹 개발자가 web만 보고 싶다면 type:web label인 Pod만 서비스에 연결해서 확인하면 된다.</li>
<li>prod환경 운영자는 env:prod label인 Pod만 서비스에 연결해서 확인하면 된다.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># Pod 생성</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">pod-2</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">type</span>: <span style="color:#ae81ff">db</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">env</span>: <span style="color:#ae81ff">dev</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">container</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">image</span>: <span style="color:#ae81ff">image</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># Service 생성</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">svc-1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">type</span>: <span style="color:#ae81ff">web</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">-port</span>: <span style="color:#ae81ff">8080</span>
</span></span></code></pre></div><h3 id="node-scheduler">node scheduler</h3>
<ul>
<li>Pod는 Node들 중 하나에 올라가야 한다.</li>
<li>수동으로 지정하는 방법과 자동으로 지정되는 방법이 있다.</li>
<li>수동
<ul>
<li>Node를 생성할 때 label을 설정하고 Pod를 만들 때 Node를 선택한다.</li>
<li><strong>NodeSelector</strong>, NodeAffinity, Pod Affinity, Anti-Affinity, Toleration, Taint…</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">pod-3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">nodeSelector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">hostname</span>: <span style="color:#ae81ff">node1</span> <span style="color:#75715e"># node에 지정한 label의 key, value</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">container</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">image</span>: <span style="color:#ae81ff">image</span>
</span></span></code></pre></div></li>
<li>자동
<ul>
<li>Pod가 요구하는 리소스 할당량과 각 Node의 리소스 할당 가능량을 계산해서 scheduler가 선택한다.</li>
</ul>
</li>
</ul>
<h2 id="service">Service</h2>
<ul>
<li>Service는 자신의 IP를 가지고 있다.</li>
<li>Service를 Pod에 연결해 놓으면 Service의 IP를 가지고 Pod에 접근할 수 있다.
<ul>
<li>Pod의 IP를 가지고 접근할 수도 있지만, Pod의 IP는 변경될 수 있다.</li>
</ul>
</li>
</ul>
<h3 id="clusterip">ClusterIP</h3>
<ul>
<li>가장 기본적인 Service이다.</li>
<li>클러스터 내에서만 접근이 가능한 IP이다.
<ul>
<li>클러스터 내의 오브젝트에서는 접근 가능하지만 외부에서는 접근할 수 없다.</li>
</ul>
</li>
<li>하나의 Pod 뿐만아니라 여러개의 Pod를 연결할 수 있다.
<ul>
<li>요청이 오면 여러개의 Pod로 분산도 해준다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">svc-1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># label을 이용해서 Pod 연결</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">pod</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 9000번 포트로 요청이 들어오면 8080번 포트로 연결이도 된다.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">port</span>: <span style="color:#ae81ff">9000</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">type</span>: <span style="color:#ae81ff">ClusterIP</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">pod-1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">container</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">image</span>: <span style="color:#ae81ff">tmkube:app</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">-containerPort</span>: <span style="color:#ae81ff">8080</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="nodeport">NodePort</h3>
<ul>
<li>Service에 IP가 포함되어 있어 ClusterIP와 같은 기능이 포함되어 있다.</li>
<li>클러스터 내부 모든 Node에 포트를 할당하여 Node의 IP로 접근을 하면 Service로 트래픽이 전달된다.
<ul>
<li>Service는 다시 자신에게 연결된 Pod로 트래픽을 전달한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">svc-2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">pod</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">port</span>: <span style="color:#ae81ff">9000</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">nodePort</span>: <span style="color:#ae81ff">30000</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">type</span>: <span style="color:#ae81ff">NodePort</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 이 옵션을 사용하면 Service가 요청이 들어온 Node의 Pod로 트래픽을 전달한다.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">externalTrafficPolicy</span>: <span style="color:#ae81ff">local</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="load-balancer">Load Balancer</h3>
<ul>
<li>NodePort의 특징을 포함하고 있다.</li>
<li>Load Balancer라는 오브젝트가 생성되어 각 Node에 트래픽을 분산 시킨다.</li>
<li>외부에서 Load Balancer에 접근하기 위한 IP는 기본적으로 설정되어 있지 않다.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">svc-3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">pod</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>		- <span style="color:#f92672">port</span>: <span style="color:#ae81ff">9000</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">nodePort</span>: <span style="color:#ae81ff">30000</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">type</span>: <span style="color:#ae81ff">LoadBalancer</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="externalname">ExternalName</h3>
<ul>
<li>클러스터 외부 서비스에 접근하기 위해 사용하는 서비스이다.</li>
</ul>
]]></content:encoded></item><item><title>Introduce Kubernetes</title><link>https://jo-minjun.github.io/notes/introduce-kubernetes/</link><pubDate>Tue, 10 Jan 2023 21:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/introduce-kubernetes/</guid><description>What, Why Kubernetes? What 쿠버네티스는 컨테이너들을 운영, 관리하는 컨테이너 오케스트레이터이다. 컨테이너 오케스트레이터는 개별 컨테이너의 배포, 관리, 확장, 네트워킹을 자동화해준다. Why 물리 서버에서 동작하는 서비스는 리소스 관리를 효율적으로 할 수 없다. 3개의 서비스에 트래픽이 몰리는 시간대가 다르다. 각 서비스는 최소 트래픽 때 0.5대, 최대 트래픽 때 3개의 서버가 사용된다. 이 경우 총 9대의 서버가 사용된다. 배포시에도 비효율적이다. 중단이 가능한 경우 모든 서비스를 내린 후, 업데이트하여 다시 올린다. 중단이 불가능하면 서비스를 하나씩 내리고 하나씩 업데이트하여 다시 올린다.</description><content:encoded><![CDATA[<h2 id="what-why-kubernetes">What, Why Kubernetes?</h2>
<h3 id="what">What</h3>
<ul>
<li>쿠버네티스는 컨테이너들을 운영, 관리하는 <strong>컨테이너 오케스트레이터</strong>이다.</li>
<li>컨테이너 오케스트레이터는 개별 컨테이너의 배포, 관리, 확장, 네트워킹을 자동화해준다.</li>
</ul>
<h3 id="why">Why</h3>
<ul>
<li>물리 서버에서 동작하는 서비스는 리소스 관리를 효율적으로 할 수 없다.
<ul>
<li>3개의 서비스에 트래픽이 몰리는 시간대가 다르다.</li>
<li>각 서비스는 최소 트래픽 때 0.5대, 최대 트래픽 때 3개의 서버가 사용된다.</li>
<li>이 경우 총 9대의 서버가 사용된다.</li>
</ul>
</li>
<li>배포시에도 비효율적이다.
<ul>
<li>중단이 가능한 경우 모든 서비스를 내린 후, 업데이트하여 다시 올린다.</li>
<li>중단이 불가능하면 서비스를 하나씩 내리고 하나씩 업데이트하여 다시 올린다.</li>
</ul>
</li>
</ul>
<p>→ 쿠버네티스를 사용하면 리소스 관리를 효율적으로 할 수 있다.</p>
<ul>
<li>시간대 별로 평균 서버 필요량을 예측하여 다음과 같은 운용이 가능하다.
<ul>
<li>평균 4개의 서버</li>
<li>A서비스에 트래픽이 몰리는 경우 3개 서버에 A서비스 할당, 1개 서버에 B, C 서비스 할당</li>
</ul>
</li>
<li>서버에 장애가 발생한 경우에 유연하게 대처할 수 있다.
<ul>
<li>쿠버네티스에는 Auto Healing 기능이 있다.</li>
<li>여분의 서버 1개가 있는 경우 자동으로 여분 서버에 서비스를 옮긴다.</li>
</ul>
</li>
<li>배포할 때는 Deployment Object를 통해서 자동화 해준다.</li>
</ul>
<p>→ 서버가 효율적인 개수를 유지하고 자동화 됨으로써 유지보수 비용이 감소한다.</p>
<h2 id="overview">Overview</h2>
<p><img loading="lazy" src="/images/notes/introduce-kubernetes/1.png" alt="1"  />
</p>
<ul>
<li>서버 한대는 Master, 나머지 서버는 Node가 된다.</li>
</ul>
<p>→ 이것이 연결되어 하나의 쿠버네티스 클러스터가 된다.</p>
<ul>
<li>Master는 쿠버네티스의 기능을 컨트롤하고 Node는 리소스를 제공한다.
<ul>
<li>클러스터의 리소스를 늘리고 싶다면 Node를 추가하면 된다.</li>
</ul>
</li>
<li>namespace를 이용해서 쿠버네티스 오브젝트를 독립된 공간으로 분리시켜준다.</li>
<li>namespace에는 쿠버네티스 최소 배포 단위인 Pod가 있고, Pod에 IP를 할당되도록 연결되는 Service가 있다.
<ul>
<li>Service는 다른 namespace와는 연결될 수 없다.</li>
</ul>
</li>
<li>Pod에는 여러 Container가 있을 수 있다. 또한 Volume을 마운트해서 Pod의 데이터가 증발되지 않도록 한다.</li>
<li>namespace에는 ResourceQuota와 LimitRange를 설정해서 namespace의 리소스의 양을 제한시킬 수 있다.</li>
<li>ConfigMap과 Secret으로 Pod의 컨테이너에 환경변수를 설정할 수 있게 한다.</li>
<li>여러가지 컨트롤러는 Pod들을 관리한다.</li>
<li>Replication Controller, ReplicaSet은 Pod가 죽으면 다시 구동시키거나 스케일 인/아웃을 해준다.</li>
<li>Deployment는 배포 후에 Pod를 새 버전으로 업그레이드하고, 문제가 생기면 롤백 해준다.</li>
<li>DaemonSet은 한 Node에 하나의 Pod만 사용되도록 해준다.</li>
<li>CronJob은 특정 Job을 주기적으로 수행되도록 해준다.
<ul>
<li>Job은 특정 작업만 하고 종료되는 것이다.</li>
</ul>
</li>
</ul>
<h2 id="components">Components</h2>
<p><img loading="lazy" src="/images/notes/introduce-kubernetes/2.png" alt="2"  />
</p>
<ul>
<li>master 노드
<ul>
<li>kube-apiserver</li>
<li>etcd</li>
<li>kube-scheduler</li>
<li>kube-controller-manager</li>
</ul>
</li>
<li>worker 노드
<ul>
<li>kubelet</li>
<li>kube-proxy</li>
</ul>
</li>
</ul>
<h3 id="kube-apiserver">kube-apiserver</h3>
<ul>
<li>쿠버네티스 클러스터의 API를 사용할 수 있게 해준다.</li>
<li>kubectl과 같은 클라이언트로부터 요청 받아낸다.</li>
</ul>
<h3 id="etcd">etcd</h3>
<ul>
<li>key-value 형식의 데이터 저장소이다.</li>
</ul>
<h3 id="kube-scheduler">kube-scheduler</h3>
<ul>
<li>Node들의 리소스 상태와 kube-apiserver를 확인하면서, Pod에 Node 정보를 할당한다.</li>
</ul>
<h3 id="kube-controller-manager">kube-controller-manager</h3>
<ul>
<li>Controller들을 실행한다.</li>
</ul>
<h3 id="kubelet">kubelet</h3>
<ul>
<li>kube-apiserver를 확인하면서 Pod에 자신의 Node 정보가 할당된 것이 있으면 Pod를 생성한다.
<ul>
<li>컨테이너를 생성하고 kube-proxy에 네트워크 생성 요청을 한다.</li>
</ul>
</li>
</ul>
<h3 id="kube-proxy">kube-proxy</h3>
<ul>
<li>네트워크 규칙을 관리하고 컨테이너가 네트워크를 사용할 수 있도록 한다.</li>
</ul>
<h2 id="실습-환경-구축">실습 환경 구축</h2>
<ul>
<li>강의에서 소개된 환경이 아닌 minikube를 사용한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>minikube start <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --driver<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;docker&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --kubernetes-version<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;stable&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --nodes<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 실습을 위해 dashboard 사용</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 실제 업무에서는 secret 등의 값 노출을 막기위해 dashboard를 잘 사용하지 않는다.</span>
</span></span><span style="display:flex;"><span>minikube dashboard
</span></span></code></pre></div><ul>
<li>위와 같은 방법으로 master 1개, worker node 2개를 구축하고 dashboard를 사용할 수 있다.</li>
</ul>
]]></content:encoded></item><item><title>kubectl command</title><link>https://jo-minjun.github.io/notes/kubectl-command/</link><pubDate>Mon, 09 Jan 2023 23:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/kubectl-command/</guid><description>kubectl command 쿠버네티스 API를 사용하는 CLI 도구이다. kubectl [command] [TYPE] [NAME] [flags] [command] 하나 이상의 리소스에서 수행하는 동작을 지정한다. ex) create get describe delete [TYPE] 리소스 타입을 지정한다. 대소문자를 구분하지 않으며 단수형, 복수형, 약어를 지정할 수 있다. ex) pod pods po [NAME] 하나 이상의 리소스의 이름을 지정한다. 대소문자를 구분하며 리소스 이름을 지정하지 않으면 모든 리소스가 대상이 된다. 리소스가 모두 동일한 TYPE인 경우 ex) kubectl get pod name1 name2 리소스 타입을 개별로 지정하는 경우 ex) kubectl get pod/name1 replicaset/name2 [flags] 플래그를 지정한다.</description><content:encoded><![CDATA[<h2 id="kubectl-command">kubectl command</h2>
<ul>
<li>쿠버네티스 API를 사용하는 CLI 도구이다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl <span style="color:#f92672">[</span>command<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>TYPE<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>NAME<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>flags<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>[command]
<ul>
<li>하나 이상의 리소스에서 수행하는 동작을 지정한다.</li>
<li>ex) <code>create</code> <code>get</code> <code>describe</code> <code>delete</code></li>
</ul>
</li>
<li>[TYPE]
<ul>
<li>리소스 타입을 지정한다.</li>
<li>대소문자를 구분하지 않으며 단수형, 복수형, 약어를 지정할 수 있다.</li>
<li>ex) <code>pod</code> <code>pods</code> <code>po</code></li>
</ul>
</li>
<li>[NAME]
<ul>
<li>하나 이상의 리소스의 이름을 지정한다.</li>
<li>대소문자를 구분하며 리소스 이름을 지정하지 않으면 모든 리소스가 대상이 된다.</li>
<li>리소스가 모두 동일한 TYPE인 경우
<ul>
<li>ex) <code>kubectl get pod name1 name2</code></li>
</ul>
</li>
<li>리소스 타입을 개별로 지정하는 경우
<ul>
<li>ex) <code>kubectl get pod/name1 replicaset/name2</code></li>
</ul>
</li>
</ul>
</li>
<li>[flags]
<ul>
<li>플래그를 지정한다.</li>
<li>ex) <code>-A</code></li>
</ul>
</li>
</ul>
<h3 id="주요-명령어">주요 명령어</h3>
<table>
<thead>
<tr>
<th>command</th>
<th>description</th>
<th>example</th>
</tr>
</thead>
<tbody>
<tr>
<td>get</td>
<td>하나 이상의 리소스를 보여준다.</td>
<td>kubectl get pod</td>
</tr>
<tr>
<td>edit</td>
<td>서버의 리소스를 수정한다.</td>
<td>kubectl edit pod name1</td>
</tr>
<tr>
<td>delete</td>
<td>파일 또는 리소스를 삭제한다.</td>
<td>kubectl delete -f file.yaml kubectl delete pod name1</td>
</tr>
<tr>
<td>scale</td>
<td>deployment, replicaset 등의 scale을 조정한다.</td>
<td>kubectl scale replicaset name1 &ndash;replicas=3</td>
</tr>
<tr>
<td>top</td>
<td>CPU/memory 등 리소스 상태를 보여준다.</td>
<td>kubectl top pod kubectl top node</td>
</tr>
<tr>
<td>describe</td>
<td>리소스의 상세 정보를 보여준다.</td>
<td>kubectl describe -l key=value</td>
</tr>
<tr>
<td>logs</td>
<td>pod의 로그를 보여준다.</td>
<td>kubectl logs -f pod_name</td>
</tr>
<tr>
<td>exec</td>
<td>container에 커맨드를 실행시킨다.</td>
<td>kubectl exec -it pod_name &ndash; /bin/bash</td>
</tr>
<tr>
<td>port-forward</td>
<td>pod의 포트로 local 포트를 포워드한다.</td>
<td>kubectl port-forward pod_name 13231:80 kubectl replicaset/replicaset_name 13231:80 kubectl deployment/deployment_name 13231:80</td>
</tr>
<tr>
<td>cp</td>
<td>파일 또는 디렉터리를 복사한다. pod_name을 명시하지 않으면 local로 설정된다.</td>
<td>kubectl cp pod_name:path path</td>
</tr>
<tr>
<td>apply</td>
<td>리소스를 생성하거나 업데이트한다.</td>
<td>kubectl apply -f file.yaml</td>
</tr>
<tr>
<td>config</td>
<td>kubeconfig(~/.kube/config) 파일을 관리한다.</td>
<td>kubectl config view kubectl config use-context dev1</td>
</tr>
</tbody>
</table>
]]></content:encoded></item></channel></rss>