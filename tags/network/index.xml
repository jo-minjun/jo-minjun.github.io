<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Network on minjun's memory</title><link>https://jo-minjun.github.io/tags/network/</link><description>Recent content in Network on minjun's memory</description><image><title>minjun's memory</title><url>https://jo-minjun.github.io/47</url><link>https://jo-minjun.github.io/47</link></image><generator>Hugo -- gohugo.io</generator><language>kr</language><lastBuildDate>Wed, 17 Aug 2022 17:10:48 +0900</lastBuildDate><atom:link href="https://jo-minjun.github.io/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>네트워크 기초 지식</title><link>https://jo-minjun.github.io/notes/networkbasic/</link><pubDate>Wed, 17 Aug 2022 17:10:48 +0900</pubDate><guid>https://jo-minjun.github.io/notes/networkbasic/</guid><description>1. MAC, IP, Port 번호의 식별 MAC, IP, Port는 각 다음과 같은 레이어의 식별자이다. * DoD로 구분한 Layer * user mode ============================================ - Application kernel mode ============================================ - Transport: PORT - Network: IP H/W ============================================ - Access: MAC Transport
Port가 식별자가 된다. Network
Host에 대해서 IP가 식별자가 된다. Host: 네트워크에 연결된 컴퓨터, NIC 하나에 IP 주소를 여러 개 바인딩 할 수 있다.
→ Host에 IP가 여러개 존재한다. Access
Network Interface Card에 대해서 MAC이 식별자가 된다.</description><content:encoded><![CDATA[<h2 id="1-mac-ip-port-번호의-식별">1. MAC, IP, Port 번호의 식별</h2>
<h3 id="mac-ip-port는-각-다음과-같은-레이어의-식별자이다">MAC, IP, Port는 각 다음과 같은 레이어의 식별자이다.</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>* DoD로 구분한 Layer *
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Application
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Transport: PORT
</span></span><span style="display:flex;"><span>- Network: IP
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Access: MAC
</span></span></code></pre></div><p>Transport</p>
<ul>
<li>Port가 식별자가 된다.</li>
</ul>
<p>Network</p>
<ul>
<li>Host에 대해서 IP가 식별자가 된다.
<ul>
<li>Host: 네트워크에 연결된 컴퓨터, NIC 하나에 IP 주소를 여러 개 바인딩 할 수 있다.<br>
→ Host에 IP가 여러개 존재한다.</li>
</ul>
</li>
</ul>
<p>Access</p>
<ul>
<li>Network Interface Card에 대해서 MAC이 식별자가 된다.
<ul>
<li>하드웨어 식별자지만, MAC 변경이 가능하다.</li>
<li>Network Interface Card: 노트북은 유선/무선 랜카드가 2개
→ NIC가 2개</li>
</ul>
</li>
</ul>
<h2 id="2-host-switch-network의-관계">2. Host, Switch, Network의 관계</h2>
<p><strong>Host</strong>는 Network에 연결된 컴퓨터이다.</p>
<p>Network는 다음과 같이 두 가지로 나뉜다.</p>
<ul>
<li>Network 이용 주체
→ <strong>End-Point</strong>가 된다. (Peer, Server, Client 등)</li>
<li>Network 자체
→ 이 Computer를 <strong>Switch</strong>라 한다. (Firewall, Router 등)</li>
</ul>
<p><strong>Network</strong>는 <strong>Router(L3 Switch)와 DNS의 집합체</strong>이다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#f92672">(</span>스위칭 비용 증가<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>L7
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>L6
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>L5
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>L4
</span></span><span style="display:flex;"><span>- TCP
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>L3 <span style="color:#f92672">(</span>Router<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>- IP
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>L2
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>L1
</span></span><span style="display:flex;"><span>--------------------------------------------
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>스위칭 비용 감소<span style="color:#f92672">)</span>
</span></span></code></pre></div><h2 id="3-ipv4-주소-체계">3. IPv4 주소 체계</h2>
<h3 id="ip-주소">IP 주소</h3>
<p>Host에 대한 식별자</p>
<p>IP 주소는 다음과 같이 두가지 표현 방법이 있다.</p>
<ul>
<li>IPv4: 32bit</li>
<li>IPv6: 128bit</li>
</ul>
<p>IPv4의 32bit는 다음과 같이 이루어져 있다.</p>
<ul>
<li>32bit는 8bit씩 나누어 표기한다.
<ul>
<li>121.123.223.10</li>
</ul>
</li>
<li>크게 두 부분으로 나뉜다.
<ul>
<li>Net ID, Host ID</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>Net ID   Host ID
</span></span><span style="display:flex;"><span>----------- --
</span></span><span style="display:flex;"><span>121.123.223.10
</span></span></code></pre></div><ul>
<li>이때 Net ID의 길이를 구분하기 위해 서브넷 마스크를 사용한다.</li>
</ul>
</li>
</ul>
<h3 id="서브넷-마스크">서브넷 마스크</h3>
<p>서브넷 마스크도 32bit로, 8bit씩 나누어 표기한다.</p>
<p>서브넷 마스크와 IP 주소를 and 연산하면 Net ID를 확인할 수 있다.</p>
<p>하지만 일반적으로 다음과 같이 Net ID의 길이를 함께 표기한다.</p>
<ul>
<li>121.123.223.10/24</li>
</ul>
<p>→ 121.123.223.0은 Net ID, Host는 10이다.</p>
<ul>
<li>이 표기하는 것을 CIDR라 한다.</li>
</ul>
<h2 id="4-port-번호의-이해">4. Port 번호의 이해</h2>
<p>Port는 관점에 따라 여러 의미를 가진다.</p>
<ul>
<li>Process 식별자</li>
<li>Service 식별자</li>
<li>Interface 번호</li>
</ul>
<p>여기서는 개발자 관점에서 Process 식별자를 알아본다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Process
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP
</span></span><span style="display:flex;"><span>- IP
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- Driver
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- NIC
</span></span></code></pre></div><ul>
<li>kernel mode는 user mode가 접근이 가능하게 하기 위해 file이라는 인터페이스를 제공한다.</li>
<li>하지만 이를 프로토콜 관점에서 추상화하면 socket이 된다.</li>
<li>이때 socket에 attach되는 정보 중 하나가 Port 번호이다.</li>
</ul>
<p>Port는 다음과 같은 특징이 있다.</p>
<ul>
<li>socket에 attach되는 정보이다.</li>
<li>16bit 정보이다.</li>
</ul>
<p>→ 2^16</p>
<p>→ Port 번호의 범위는 0 ~ 61535 이다. (하지만 0과 61535는 사용할 수 없다.)</p>
<ul>
<li>패킷이 하위 레이어에서 상위 레이어로 올라갈 때 Port를 이용해서 프로세스를 식별한다.</li>
</ul>
<h2 id="5-switch-switching">5. Switch, Switching</h2>
<p><strong>Switching은 경로 또는 인터페이스를 선택</strong>하는 것이다.</p>
<p>이 때 <strong>선택지가 나오는 곳을 Switch</strong>라 한다.</p>
<p>Network는 라우터와 DNS의 집합이다.</p>
<ul>
<li>라우터는 L3 스위치이다.</li>
<li>라우터는 <strong>라우팅 테이블</strong>을 근거로 최적의 경로를 찾아낸다.</li>
</ul>
<h2 id="6-네트워크-데이터-단위">6. 네트워크 데이터 단위</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Application <span style="color:#f92672">(</span>Socket 수준<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP
</span></span><span style="display:flex;"><span>- IP
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>-
</span></span></code></pre></div><ul>
<li>위에서 설명한 user와 kernel 모드 사이의 file(socket)은 <strong>Stream</strong>이다.
<ul>
<li>기본적으로 file은 사용자가 계속 데이터를 입력하면 계속해서 데이터가 커진다.</li>
</ul>
</li>
<li>TCP에서 다루는 데이터 단위: <strong>Segment</strong></li>
<li>IP에서 다루는 데이터 단위: <strong>Packet</strong></li>
<li>IP 아래 단계에서 다루는 데이터 단위: <strong>Frame</strong></li>
</ul>
<p>이 데이터 단위의 흐름은 다음과 같다.</p>
<ul>
<li>Stream이 Segment로 넘어갈 때 일정한 길이로 데이터를 분해한다.
<ul>
<li>이때 **Segment의 최대 크기를 Maximum Segment Size(MSS)**라 한다.</li>
</ul>
</li>
<li>MSS는 Packet의 최대 크기으로 결정하게 되는데, <strong>Packet의 최대 크기를 (Maximum Transport Unit)MTU</strong>라 한다.</li>
<li>이 Packet을 Frame 데이터로 캡슐화하여 전달한다.</li>
</ul>
<h2 id="7-네트워크-인터페이스-선택-원리와-기준">7. 네트워크 인터페이스 선택 원리와 기준</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- HTTP <span style="color:#f92672">(</span>L7<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>-
</span></span><span style="display:flex;"><span>- SSL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP, UDP <span style="color:#f92672">(</span>L4<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>- IP <span style="color:#f92672">(</span>L3<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Ethernet
</span></span><span style="display:flex;"><span>-
</span></span></code></pre></div><p>아래와 같은 상황에서 인터페이스는 어떻게 선택될까?</p>
<ul>
<li>사용자가 브라우저를 켰다. (Socket이 열리고, TCP와 IP가 바인딩 되어야 한다.)</li>
<li>KT 유선 인터넷과 SKT 무선 인터넷을 두 개 연결했다. (일반적으로 IP 주소는 2개가 된다.)</li>
</ul>
<p>→ 메트릭(쉽게 말해 비용) 값으로 결정한다.</p>
<p>→ 따라서 위 경우에는 KT 유선과 SKT 무선 중 메트랙 값이 적은 쪽으로 바인딩 된다.</p>
<h2 id="8-웹-서비스를-만드신-분에-대해">8. 웹 서비스를 만드신 분에 대해</h2>
<h3 id="웹-탄생-배경">웹 탄생 배경</h3>
<ol>
<li>영국 물리학 연구원 <strong>팀 버너스 리</strong></li>
<li>연구원은 논문을 많이 읽는다.</li>
<li>논문에는 항상 참고문헌이 많았다.</li>
<li>하지만 당시 링크 개념이 존재하지 않았고 문서는 모두 Text 파일이었다.</li>
</ol>
<p>→ 문서(Text) + Link 를 이용해서 <strong>HTML</strong>이라는 문서 형식을 만들었다.</p>
<p>→ <strong>HTML</strong>의 인터넷 전달 방법을 위해서 <strong>HTTP</strong>라는 프로토콜을 만들었다.</p>
<p>→ 여러 문서들이 계속해서 연결되니, Web이 형성되었다.</p>
<p>→ 이는 웹 서비스가 되었고, 팀 버너스 리가 창안했다.</p>
<h2 id="9-초창기-웹-서비스의-구조">9. 초창기 웹 서비스의 구조</h2>
<p>**웹 클라이언트 (브라우저)**는 인터넷을 통해서 <strong>웹 서버</strong>와 연결된다.</p>
<p>이때 연결은 HTTP라는 TCP/IP 기반으로 된다.</p>
<ul>
<li>HTTP는 Stateless하다.</li>
</ul>
<p>웹 클라이언트의 IP 주소가 있고 웹 서버에도 IP 주소가 있다.</p>
<p>→ 이 주소 URL을 알고 리소스(HTML 문서)에 대한 <strong>요청</strong>을 하면 연결이 되고, <strong>응답</strong>을 준다.</p>
<p>→ 응답을 받은 클라이언트는 HTML <strong>구문 분석</strong>을 하고, 내용을 <strong>렌더링</strong> 한다.</p>
<p>즉, 이 당시 브라우저는 원격 문서 뷰어 역할(단방향 작용)을 했다.</p>
<h2 id="10-웹-서비스-3대-요소">10. 웹 서비스 3대 요소</h2>
<p>위 구조에는 문제가 있었다.</p>
<ol>
<li>
<p><strong>문서의 내용과는 별개로 UI를 개선하고 싶었다.</strong></p>
<p>→ HTML에 기능을 추가하니 유지보수가 불편하다.</p>
<p>→ CSS와 이미지가 나왔다.</p>
<p>→ 요청하면 HTML + CSS + IMAGE(서버에 저장되어 있다.)가 순서대로 응답된다.</p>
</li>
<li>
<p><strong>문서를 변경해야 했다.</strong></p>
<p>→ 문서를 변경하기 위해 처리를 담당하는 서버가 생겼다.</p>
<p>→ 단방향 작용이 양방향 상호 작용이 되면서 상태를 처리해야 했다.</p>
<p>→ DB를 이용해서 처리하게 되었다.</p>
</li>
<li>
<p><strong>문서가 변경되고, 처리가 되니 문서가 복잡해졌다.</strong></p>
<p>→ 기능에 따라 동적인 움직임을 주는 것이 필요해졌다.</p>
<p>→ 브라우저에서 렌더링 후에 <strong>연산</strong>하는 기능을 가지게 되었다. (Javascript)</p>
</li>
</ol>
<p>즉, 웹 서비스 3대 요소는 다음과 같다.</p>
<ul>
<li>HTML 구문 분석</li>
<li>렌더링</li>
<li>연산</li>
</ul>
<h2 id="11-lan-vs-wan">11. LAN vs WAN</h2>
<ul>
<li>주의) 이 내용은 명확한 구분은 아니다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- HTTP
</span></span><span style="display:flex;"><span>-
</span></span><span style="display:flex;"><span>- SSL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode <span style="color:#f92672">(</span>Logical <span style="color:#f92672">==</span> virtual<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP, UDP
</span></span><span style="display:flex;"><span>- IP<span style="color:#f92672">(</span>IP 주소<span style="color:#f92672">)</span> --&gt; <span style="color:#f92672">[</span>Internet<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> <span style="color:#f92672">[</span>virtual network<span style="color:#f92672">]</span> -&gt; *WAN
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W <span style="color:#f92672">(</span>Physical<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Ethernet<span style="color:#f92672">(</span>MAC 주소<span style="color:#f92672">)</span> --&gt; *LAN
</span></span><span style="display:flex;"><span>-
</span></span></code></pre></div><p>LAN과 WAN은 흔히 범위의 차이로 구분한다.</p>
<p>하지만 논리/물리적 구성요소로 구분하는 방법은 아래와 같다.</p>
<ul>
<li>시스템은 S/W와 H/W로 구분된다.</li>
<li>S/W(kernel mode 이상)은 IP(Internet Protocol) 를 이용해서 통신한다.
<ul>
<li>Internet은 virtual network이다.
→ WAN</li>
</ul>
</li>
<li>H/W는 MAC 주소를 이용한다. (이는 물리적인 주소이다.)
→ 하드웨어로 설명되는 네트워크
→ LAN</li>
</ul>
<h2 id="12-패킷의-생성-원리와-캡슐화">12. 패킷의 생성 원리와 캡슐화</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- HTTP
</span></span><span style="display:flex;"><span>-
</span></span><span style="display:flex;"><span>- SSL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kernel mode
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP, UDP
</span></span><span style="display:flex;"><span>- IP
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>H/W
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Ethernet
</span></span><span style="display:flex;"><span>-
</span></span></code></pre></div><ol>
<li>user mode 영역은 socket에 데이터를 IO한다.
<ul>
<li>socket은 file을 추상화한 것이다. 때문에 데이터를 계속해서 쓰기할 수 있다.</li>
<li>이때 데이터의 단위는 Stream이다.</li>
</ul>
</li>
<li>user mode의 Stream이 Kernel mode에서 일정 단위로 나누어진다.
<ul>
<li>이때 데이터의 단위는 Segment이다.</li>
<li>이 Segment가 한 번 캡슐화되어 Packet이 된다.
<ul>
<li>Packet의 최대 크기: MTU(Maximum Transport Unit)
<ul>
<li>일반적으로 1500이다.</li>
</ul>
</li>
<li>Packet의 구조: Header, Payload</li>
<li>Header에는 IP(L3)와 TCP(L4) 데이터가 있다.
<ul>
<li>이때 크기는 일반적으로 각 20씩으로 총 40이다.</li>
</ul>
</li>
<li>MTU 크기 - Header 크기 = 1460이다.
<ul>
<li>이 크기가 MSS(Maximum Segment Size) 이다.</li>
<li>Stream을 1460 크기로 나눈 것이다.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>H/W영역에서 Packet이 한 번 더 캡슐화된다.
<ul>
<li>Frame이 된다.</li>
</ul>
</li>
</ol>
<h2 id="13-l2-스위치">13. L2 스위치</h2>
<p>L2 스위치는 MAC 주소(48bit)로 스위칭시킨다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>                <span style="color:#f92672">(</span>multilayer switch<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span> NIC  L2 Access   L2 Distribution    L2 Access    NIC
</span></span><span style="display:flex;"><span>         |  <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>        <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>         |---------------#---------------|
</span></span><span style="display:flex;"><span>PC1------|               |               |---------PC3
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>         |               |               |---------PC4
</span></span><span style="display:flex;"><span>PC2------|               |               |
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>                         |
</span></span><span style="display:flex;"><span>                         | <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                         |
</span></span><span style="display:flex;"><span>                     <span style="color:#f92672">(</span>gateway<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                         @
</span></span><span style="display:flex;"><span>                       라우터
</span></span><span style="display:flex;"><span>                         |
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">(</span>방화벽<span style="color:#f92672">)</span>
</span></span></code></pre></div><ul>
<li>L2 Access: End-Point가 네트워크에서 가장 처음 만나는 스위치</li>
<li>L2 Distribution: L2 Access와 L3 라우터를 연결해주는 스위치</li>
<li>Up-link: 상위 계층 스위치로 연결되는 케이블</li>
</ul>
<h2 id="14-ip-header">14. IP Header</h2>
<p><img loading="lazy" src="/images/notes/networkbasic/0.png" alt="0.png"  />
</p>
<p>위에서 언급한 것처럼 IP의 헤더는 20바이트이다. (+ @ Opitonal)</p>
<p>최상단 우측에 Total Length는 16비트인데, 이것은 패킷의 최대 크기를 나타낸다.</p>
<ul>
<li>따라서 패킷의 최대 크기는 2^16정도인 65536이다.</li>
</ul>
<p>Identification ~ Fragment Offset은 단편화에 관련된 부분이다.</p>
<ul>
<li>단편화는 큰 패킷을 작은 패킷으로 나눈 것을 말한다.</li>
<li>MTU가 1400인 곳에 1500짜리 패킷을 보내는 경우 단편화가 일어난다.</li>
</ul>
<p>TTL은 패킷이 라우터 하나를 지날때마다 1씩 감소하고 0이 되면 패킷이 사라진다.</p>
<ul>
<li>일반적으로 값은 256이다. (2^8)</li>
</ul>
<p>Protocol은 상위 계층 프로토콜이다.</p>
<ul>
<li>이 값을 보고 데이터가 TCP인지 UDP 인지 다른 값인지 확인할 수 있다.</li>
</ul>
<p>Header checksum은 전송간에 오류가 있는지 확인한다.</p>
<h2 id="15-proxy-구조와-원리">15. Proxy 구조와 원리</h2>
<p>Proxy는 대리자 역할을 한다.</p>
<p>&lt;Proxy 미적용&gt;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>										    HTTPS TCP/IP
</span></span><span style="display:flex;"><span>PC1 <span style="color:#f92672">(</span>1.1.1.1<span style="color:#f92672">)</span>--------------Internet--------------------SERVER<span style="color:#f92672">(</span>9.9.9.9<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>&lt;Proxy 적용&gt;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>PC1 <span style="color:#f92672">(</span>1.1.1.1<span style="color:#f92672">)</span>                                          SERVER<span style="color:#f92672">(</span>9.9.9.9<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  |                                                        |
</span></span><span style="display:flex;"><span>  |                                                        |
</span></span><span style="display:flex;"><span>Internet                                                   |
</span></span><span style="display:flex;"><span>  |                                                        |
</span></span><span style="display:flex;"><span>  | <span style="color:#f92672">(</span>Proxy<span style="color:#f92672">)</span>                                                |
</span></span><span style="display:flex;"><span>PC2 <span style="color:#f92672">(</span>2.2.2.2<span style="color:#f92672">)</span>---------------- Internet---------------------|
</span></span></code></pre></div><p>&lt;PC2의 역할&gt;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>user mode    |          PC2
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- HTTP       |   Proxy 역할을 하는
</span></span><span style="display:flex;"><span>-            |       Process
</span></span><span style="display:flex;"><span>- SSL        |       <span style="color:#f92672">(</span>Stream<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>             |   socket1  socket2
</span></span><span style="display:flex;"><span>kernel mode  |
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- TCP, UDP   |
</span></span><span style="display:flex;"><span>- IP         |
</span></span><span style="display:flex;"><span>             |
</span></span><span style="display:flex;"><span>H/W          |
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================</span>
</span></span><span style="display:flex;"><span>- Ethernet   |
</span></span><span style="display:flex;"><span>-            |
</span></span></code></pre></div><ol>
<li>socket1은 외부에서 접속하길 대기하고 있다.</li>
<li>PC1이 접근</li>
<li>정보가 들어오면 socket2를 이용해서 9.9.9.9에 접근</li>
</ol>
<h2 id="16-proxy의-활용">16. Proxy의 활용</h2>
<h3 id="1-우회">1. 우회</h3>
<p>Proxy를 사용하면 SERVER 입장에서 PC2의 아이피를 확인한다.</p>
<p>그러나 PC2는 PC1의 모든 통신을 감청할 수 있다.</p>
<h3 id="2-분석">2. 분석</h3>
<p>웹 통신에 SSL을 적용하면 패킷 레벨에서 데이터가 암호화되어 있다.</p>
<p>때문에 와이어 샤크등 프로그램에서 복호화된 데이터를 확인할 수 없다.</p>
<p>이때 프록시를 아래와 같이 사용할 수 있다.</p>
<ul>
<li>Proxy를 127.0.0.1:8080으로 건다. (내 PC)</li>
<li>HTTP 요청을 보내면 8080번 포트의 소켓으로 데이터가 지나간다.</li>
<li>이 평문 데이터를 Stream 레벨에서 확인한다.</li>
</ul>
<h2 id="17-tcp-송신수신-원리">17. TCP 송신/수신 원리</h2>
<ol>
<li>Stream을 Segment로 나눈다.
<ul>
<li>이때 TCP Buffer(Window Size)에 데이터를 저장하고, 일정 크기가 되면 Segment로 나눈다.</li>
</ul>
</li>
<li>Segment를 Packet으로 캡슐화한다.</li>
<li>Packet을 Frame으로 캡슐화한다.</li>
<li>Frame을 전달한다.
<ul>
<li>전체를 보내는 것은 아니다. (n개 만큼 보낸다.)</li>
<li>일반적으로 Frame은 바뀔 수 있다. (Packet은 그대로 이지만)</li>
</ul>
</li>
<li>Frame을 전달받고 Segment로 만든다.</li>
<li>n개의 Segment를 받으면 TCP Buffer에 저장하고 ackn+1을 송신쪽에 전달한다.
<ul>
<li>ack에는 Window Size가 포함되어 있다.</li>
</ul>
</li>
<li>송신쪽은 ackn+1을 받고 Segment를 n+1번부터 다시 보낸다.
<ul>
<li>이 과정때문에 속도 지연이 발생한다. (UDP 보다 느리다.)</li>
<li>만약 ack로 받은 수신 측 Window Size가 작으면 Segment를 보내지 않는다.</li>
</ul>
</li>
</ol>
<h2 id="18-tcp-연결에-대해">18. TCP 연결에 대해</h2>
<p>TCP는 연결지향 프로토콜이다.</p>
<p>우선 아래 TCP 헤더를 보자</p>
<p><img loading="lazy" src="/images/notes/networkbasic/1.png" alt="1.png"  />
</p>
<ul>
<li>출발지/목적지 Port 번호가 가장위에 위치한다.</li>
<li>Sequence Number: 32bit → 4GB (2^32), Segment의 순서</li>
<li>TCP Flags: Ack, Sync
<ul>
<li>3-way handshake에 사용</li>
</ul>
</li>
</ul>
<p>3-way handshake</p>
<ul>
<li>Seq번호와 MSS를 교환하는 행위</li>
<li>혼잡 제어 정책 교환</li>
</ul>
<h2 id="19-unicast-broadcast-multicast">19. Unicast, Broadcast, Multicast</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span> NIC  L2 Access   L2 Distribution    L2 Access    NIC
</span></span><span style="display:flex;"><span>         |  <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>        <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>         |---------------#---------------|
</span></span><span style="display:flex;"><span>PC1------|               |               |---------PC3
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>         |               |               |---------PC4
</span></span><span style="display:flex;"><span>PC2------|               |               |
</span></span><span style="display:flex;"><span>         |               |               |
</span></span><span style="display:flex;"><span>                         |
</span></span><span style="display:flex;"><span>                         | <span style="color:#f92672">(</span>Up-link<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                         |
</span></span><span style="display:flex;"><span>                         @ 라우터 <span style="color:#f92672">(</span>gateway<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">(</span>방화벽<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Unicast</p>
<ul>
<li>L2 스위치 내부에서 연결이 끝나는 것 (라우터 이전)</li>
<li>한번에 한 지점에게만 신호를 보낸다.</li>
</ul>
<p>Broadcast</p>
<ul>
<li>어떤 지점에서 다수의 지점에 신호를 보내는 것</li>
<li>네트워크 효율을 떨어뜨린다.</li>
<li>2진수 IP의 끝자리가 모두 1이다. (210.153.0.255)</li>
</ul>
<p>Multicast</p>
<ul>
<li>Broadcast와 유사하나 관심이 없는 지점은 신호를 보내지 않음</li>
<li>Group을 등록해서 Group에 전달함</li>
</ul>
<h2 id="20-ip의-종류">20. IP의 종류</h2>
<p><strong>Global</strong></p>
<ul>
<li>인터넷(public, global network)에서 라우터가 라우팅 시켜주는 IP이다.</li>
</ul>
<p><strong>Private</strong></p>
<ul>
<li>작은 소규모 사설 인터넷을 구축할 때 사용한다.</li>
<li>공유기에서도 자주 사용한다.
<ul>
<li>공유기는 하나의 Global IP를 Private IP에 공유해주는 역할을 한다.</li>
</ul>
</li>
<li>4개의 클래스로 나뉜다.
<ul>
<li>A:
<ul>
<li>network id: 8bit</li>
<li>host id: 24bit</li>
<li>10.xxx.xxx.xxx</li>
</ul>
</li>
<li>B
<ul>
<li>network id: 12bit</li>
<li>host id: 20bit</li>
<li>172.16.xxx.xxx</li>
</ul>
</li>
<li>C
<ul>
<li>network id: 16bit</li>
<li>host id: 16bit</li>
<li>192.168.xxx.xxx</li>
</ul>
</li>
<li>D
<ul>
<li>multicast를 할 때 사용한다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Loopback</strong></p>
<ul>
<li>127.0.0.1</li>
<li>호스트 자신을 의미한다.</li>
<li>패킷이 만들어지지만 L2로 가지는 않는다.</li>
</ul>
<p><strong>Broadcast</strong></p>
<ul>
<li>다수의 지점에 신호를 보낼 때 사용한다.</li>
</ul>
<h2 id="21-dns">21. DNS</h2>
<p>Domain Name</p>
<ul>
<li>숫자로된 IP를 사람이 보기 편하도록 해준다.</li>
<li>naver.com</li>
<li>google.com</li>
</ul>
<p>DNS</p>
<ul>
<li>IP와 Domain Name을 연결하는 테이블 역할</li>
<li>DNS는 계층적 구조로 되어 있다. (분산형 DB 구조)
<ul>
<li>가장 상위 DNS인 root DNS는 전세계에 13대가 있다.</li>
</ul>
</li>
</ul>
<p>Domain Name으로 IP를 찾는 과정</p>
<ol>
<li>컴퓨터 캐시에서 검색</li>
<li>host file에서 검색</li>
<li>DNS에서 검색</li>
<li>root DNS에서 .com, co.kr 등을 관리하는 DNS 목록을 검색</li>
<li>DNS 목록에서 검색</li>
<li>…</li>
</ol>
<h2 id="22-tcpip-통신과-mac-주소">22. TCP/IP 통신과 MAC 주소</h2>
<p>TCP/IP 통신을 할 때의 MAC 주소의 변화</p>
<ol>
<li>패킷이 프레임으로 캡슐화된다.
<ul>
<li>프레임 헤더에도 시작/목적 지점이 있다.</li>
</ul>
</li>
<li>L2 구간(라우터)을 지나면 프레임 헤더가 새로 교체된다.
<ul>
<li>L2구간에 새로 접근할 때마다 프레임 헤더의 시작/목적 지점도 계속해서 변경된다.</li>
<li>MAC 주소만 고려하고, IP 주소는 고려하지 않는다.</li>
</ul>
</li>
</ol>
<h2 id="23-mtu와-packet-단편화">23. MTU와 Packet 단편화</h2>
<p><img loading="lazy" src="/images/notes/networkbasic/2.png" alt="2.png"  />
</p>
<ul>
<li>위 그림에서 2번째 줄(Identification, Fragment Offset)이 단편화 관련 부분이다.</li>
<li>MTU는 1500이 기본값인 경우가 많다.</li>
<li>MTU - 20(IP 헤더) - 20(TCP 헤더) = MSS이다.</li>
</ul>
<p>아래와 같은 경우에는 단편화가 어떻게 이루어 질까?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>MTU:1500     MTU:1500       MTU:1400       MTU:1500  MTU:1500
</span></span><span style="display:flex;"><span>PC1 ---|---#-----R1-------------R2-------------R3-----SERVER
</span></span></code></pre></div><ul>
<li>위 경우 R1 → R2에서 단편화가 이루어져야 한다.
<ol>
<li>1500짜리 패킷을 어느 지점에서 자른다. A와 B가 생긴다.</li>
<li>헤더와 A를 붙이고, 헤더와 B를 붙여서 2개의 패킷을 만든다.
<ul>
<li>이때 두 패킷 헤더의 Idenfication이 같은 값이 된다.</li>
<li>Fragment Offset 값은 A는 0, B는 A의 길이만큼이 된다.</li>
</ul>
</li>
<li>수신하는 쪽에서 단편화를 조립한다. (SERVER)</li>
</ol>
</li>
</ul>
<h2 id="24-서브넷팅">24. 서브넷팅</h2>
<p>ISP(Internet Service Provider)에게 어떤 회사가 100개의 사설 IP를 요청하면 어떻게 될까?</p>
<ul>
<li>C레벨(Net ID: 24, Host ID: 8)인 private IP를 할당한다.</li>
<li>그런데 C레벨 private IP를 할당하면 2^8 - 100 = 146개의 IP를 낭비하게 되는 것이다.</li>
<li>이런 경우 서브넷팅을 사용할 수 있다.</li>
</ul>
<p>서브넷팅은 Net ID에 몇 개의 비트를 더 할당하는 것이다.</p>
<ul>
<li>192.168.0.1/25라면 마지막 4번째 자리의 1의 가장 앞부분 비트를 Net ID로 할당 시킨다.
<ul>
<li>(192.168.0.0)0000001</li>
<li>(192.168.0.1)0000001</li>
</ul>
</li>
<li>하지만 Host ID가 0인 경우는 아무것도 가리키지 않고, 2진수에서 모두 1인 경우는 broadcast IP 이므로 서브넷 하나마다 2개의 IP를 손실보게 된다.
<ul>
<li>예를 들어 이 경우라면 192.168.0.1/25</li>
<li>192.168.0.00000000, 192.168.0.01111111</li>
<li>192.168.0.10000000, 192.168.0.11111111</li>
<li>위 4가지 IP를 손실보게 된다.</li>
</ul>
</li>
</ul>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=k1gyh9BlOT8&amp;list=PLXvgR_grOs1BFH-TuqFsfHqbh-gpMbFoy">https://www.youtube.com/watch?v=k1gyh9BlOT8&amp;list=PLXvgR_grOs1BFH-TuqFsfHqbh-gpMbFoy</a></li>
</ul>
]]></content:encoded></item></channel></rss>