<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Docker on minjun's memory</title><link>https://jo-minjun.github.io/tags/docker/</link><description>Recent content in Docker on minjun's memory</description><image><title>minjun's memory</title><url>https://jo-minjun.github.io/47</url><link>https://jo-minjun.github.io/47</link></image><generator>Hugo -- gohugo.io</generator><language>kr</language><lastBuildDate>Wed, 04 Jan 2023 23:51:30 +0900</lastBuildDate><atom:link href="https://jo-minjun.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker 스터디</title><link>https://jo-minjun.github.io/notes/docker-study/</link><pubDate>Wed, 04 Jan 2023 23:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/docker-study/</guid><description>Docker Docker란 애플리케이션 개발, 실행, 공유를 위한 오픈 플랫폼이다. 호스트 시스템과 격리된 환경에서 애플리케이션을 패키징하고 실행할 수 있게 해준다. (컨테이너) 협업 시 각 로컬에 개발환경을 설치하지 않아도 된다. 서버 관리에 편리하다. https://docs.docker.com/get-started/overview/
도커 명령어 크게 4가지 종류의 명령어가 있다. Registry 관련 Image 관련 Container 관련 Compose 관련 명령어의 자세한 옵션과 설명은 아래 문서를 참조
docker
Registry 관련 login
docker login Registry에 로그인한다. logout
docker logout Registry에서 로그아웃한다. search
docker search [OPTIONS] &amp;lt;TERM&amp;gt; Registry에 있는 이미지를 검색한다.</description><content:encoded><![CDATA[<h1 id="docker">Docker</h1>
<h3 id="docker란">Docker란</h3>
<ul>
<li>애플리케이션 개발, 실행, 공유를 위한 오픈 플랫폼이다.</li>
<li>호스트 시스템과 격리된 환경에서 애플리케이션을 패키징하고 실행할 수 있게 해준다. (컨테이너)
<ul>
<li>협업 시 각 로컬에 개발환경을 설치하지 않아도 된다.</li>
<li>서버 관리에 편리하다.</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="/images/notes/docker-study/1.svg" alt="1"  />
</p>
<p><a href="https://docs.docker.com/get-started/overview/">https://docs.docker.com/get-started/overview/</a></p>
<h2 id="도커-명령어">도커 명령어</h2>
<ul>
<li>크게 4가지 종류의 명령어가 있다.
<ul>
<li>Registry 관련</li>
<li>Image 관련</li>
<li>Container 관련</li>
<li>Compose 관련</li>
</ul>
</li>
</ul>
<p>명령어의 자세한 옵션과 설명은 아래 문서를 참조</p>
<p><a href="https://docs.docker.com/engine/reference/commandline/docker/">docker</a></p>
<h3 id="registry-관련">Registry 관련</h3>
<p><strong>login</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker login
</span></span></code></pre></div><ul>
<li>Registry에 로그인한다.</li>
</ul>
<p><strong>logout</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker logout
</span></span></code></pre></div><ul>
<li>Registry에서 로그아웃한다.</li>
</ul>
<p><strong>search</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker search <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;TERM&gt;
</span></span></code></pre></div><ul>
<li>Registry에 있는 이미지를 검색한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;filter -f</td>
<td></td>
<td>key=value 포맷으로 검색을 필터링 한다.</td>
</tr>
</tbody>
</table>
<ul>
<li>stars: star의 개수 (int)</li>
<li>is-automated: 자동 빌드 여부 (boolean)</li>
<li>is-official: 공식 여부 (boolean) |
| &ndash;limit | 25 | 검색 결과의 최대 개수 |
| &ndash;no-trunc | | 검색 결과 텍스트를 생략하지 않고 전부 보여준다. |</li>
</ul>
<p><strong>pull</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker pull <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;IMAGE&gt;
</span></span></code></pre></div><ul>
<li>Registry에서 이미지를 내려 받는다.</li>
<li><!-- raw HTML omitted -->에 사용자 명을 지정하지 않으면 공식 이미지를 내려 받는다.</li>
</ul>
<p><strong>push</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker push <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;IMAGE&gt;
</span></span></code></pre></div><ul>
<li>이미지를 Registry에 업로드 한다.</li>
</ul>
<h3 id="image-관련">Image 관련</h3>
<p><strong>build</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker image build <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Dockerfile PATH | URL<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>Dockerfile을 이용해서 이미지를 빌드한다.</li>
</ul>
<p><strong>ls</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker image ls <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>이미지 목록를 보여준다.</li>
</ul>
<p><strong>rm</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker image rm <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> &lt;IMAGE&gt; <span style="color:#f92672">[</span>IMAGE...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>하나 또는 하나 이상의 이미지를 제거한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;force -f</td>
<td></td>
<td>이미지를 강제로 제거한다.</td>
</tr>
</tbody>
</table>
<p><strong>tag</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker image tag SOURCE_IMAGE TARGET_IMAGE
</span></span></code></pre></div><ul>
<li>이미지에 태그를 설정한다. (IMAGE_ID에 별칭을 부여한다.)</li>
<li>숫자 및 <code>_</code> <code>-</code> <code>.</code> 으로 이름을 시작할 수 없다.</li>
</ul>
<h3 id="container-관련">Container 관련</h3>
<p><strong>commit</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container commit <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CONTAINER
</span></span></code></pre></div><ul>
<li>컨테이너의 변경사항을 이미지로 생성한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;author -a</td>
<td></td>
<td>커밋한 사용자를 작성한다.</td>
</tr>
<tr>
<td>&ndash;message -m</td>
<td></td>
<td>커밋 메시지를 작성한다.</td>
</tr>
</tbody>
</table>
<p><strong>diff</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container diff CONTAINER
</span></span></code></pre></div><ul>
<li>컨테이너의 변경사항을 확인한다.</li>
<li>A: 추가, C: 변경, D: 삭제</li>
</ul>
<p><strong>exec</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container exec <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CONTAINER COMMAND <span style="color:#f92672">[</span>ARG...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li><code>docker exec</code> 명령어와 같다.</li>
<li>실행 중인 컨테이너에 명령어를 실행한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;detach -d</td>
<td></td>
<td>명령어를 백그라운드로 실행한다.</td>
</tr>
<tr>
<td>&ndash;interactive -i</td>
<td></td>
<td>표준입력을 유지한다.</td>
</tr>
<tr>
<td>&ndash;tty -t</td>
<td></td>
<td>터미널(pseudo-TTY)을 할당한다.</td>
</tr>
</tbody>
</table>
<p><strong>logs</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container logs CONTAINER
</span></span></code></pre></div><ul>
<li><code>docker logs</code> 명령어와 같다.</li>
<li>컨테이너의 로그를 보여준다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;follow -f</td>
<td></td>
<td>로그를 계속 추적하면서 출력한다.</td>
</tr>
<tr>
<td>&ndash;timestamps -t</td>
<td></td>
<td>시간 데이터를 보여준다.</td>
</tr>
</tbody>
</table>
<p><strong>ls</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container ls <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>컨테이너 목록을 보여준다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;all -a</td>
<td>running container</td>
<td>모든 컨테이너를 보여준다.</td>
</tr>
<tr>
<td>&ndash;size -s</td>
<td></td>
<td>사이즈를 같이 보여준다.</td>
</tr>
</tbody>
</table>
<p><strong>prune</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container prune
</span></span></code></pre></div><ul>
<li>stop 상태인 모든 컨테이너를 제거한다.</li>
</ul>
<p><strong>rename</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container rename CONTAINER NEW_NAME
</span></span></code></pre></div><ul>
<li>컨테이너 이름을 변경한다.</li>
</ul>
<p><strong>rm</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container rm <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CONTAINER <span style="color:#f92672">[</span>CONTAINER...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>하나 또는 하나 이상 컨테이너를 제거한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;force -f</td>
<td></td>
<td>동작 중인 컨테이너를 강제로 제거한다.</td>
</tr>
</tbody>
</table>
<p><strong>run</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container run <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> IMAGE <span style="color:#f92672">[</span>COMMAND<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>ARG...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>이미지를 컨테이너로 생성하고 실행한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>—detach -d</td>
<td></td>
<td>컨테이너의 ID를 출력하고 백그라운드로 실행한다.</td>
</tr>
<tr>
<td>&ndash;interactive -i</td>
<td></td>
<td>표준입력을 유지한다.</td>
</tr>
<tr>
<td>&ndash;tty -t</td>
<td></td>
<td>터미널(pseudo-TTY)을 할당한다.</td>
</tr>
<tr>
<td>&ndash;name</td>
<td>random</td>
<td>컨테이너에 이름을 지정한다.</td>
</tr>
<tr>
<td>&ndash;env -e</td>
<td></td>
<td>환경변수를 설정한다.</td>
</tr>
<tr>
<td>&ndash;publish -p</td>
<td></td>
<td>host(port):container(port) 포맷으로 publish와 bind를 설정한다.</td>
</tr>
<tr>
<td>&ndash;volume -v</td>
<td></td>
<td>볼륨을 마운트 시킨다.</td>
</tr>
<tr>
<td>&ndash;rm</td>
<td></td>
<td>종료되면 해당 컨테이너를 삭제한다.</td>
</tr>
</tbody>
</table>
<p><strong>start, restart</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container start <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CONTAINER <span style="color:#f92672">[</span>CONTAINER...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>하나 또는 하나 이상의 컨테이너를 시작한다.</li>
<li>이미 실행 중인 컨테이너를 다시 시작하려면 <code>restart</code>를 사용한다.</li>
</ul>
<p><strong>stop</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container stop <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CONTAINER <span style="color:#f92672">[</span>CONTAINER...<span style="color:#f92672">]</span>
</span></span></code></pre></div><ul>
<li>하나 또는 하나 이상의 컨테이너를 중지시킨다.</li>
</ul>
<h3 id="compose-관련">Compose 관련</h3>
<p><strong>up</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose up
</span></span></code></pre></div><ul>
<li>컴포즈 파일의 컨테이너들을 생성하고 시작한다.</li>
</ul>
<p><strong>down</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose down
</span></span></code></pre></div><ul>
<li>컨테이너를 중단하고 제거한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;rmi</td>
<td></td>
<td>서비스에 사용된 이미지를 제거한다.</td>
</tr>
<tr>
<td>&ndash;volumnes -v</td>
<td></td>
<td>이름이 지정된 volume을 제거한다.</td>
</tr>
</tbody>
</table>
<h2 id="dockerfile">Dockerfile</h2>
<ul>
<li>Dockerfile을 이용해서 Docker 이미지를 빌드할 수 있다.</li>
<li><code>docker image build</code> 명령어를 사용해서 Dockerfile에 명시된 command line을 수행하도록 할 수 있다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker image build <span style="color:#f92672">[</span>Dockerfile 경로<span style="color:#f92672">]</span>
</span></span></code></pre></div><p><strong>Format</strong></p>
<ul>
<li>Dockerfile 포맷은 다음과 같다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#75715e"># Comment</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>INSTRUCTION arguments<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>INSTRUCTION은 대/소문자를 구분하지 않지만, 대문자로 작성하는 것이 컨벤션이다.</li>
<li>Dockerfile은 반드시 <code>FROM</code> INSTRUCTION으로 시작해야 한다.</li>
</ul>
<p><strong>Environment replacement</strong></p>
<ul>
<li>환경변수는 <code>$variable_name</code> 또는 <code>${variable_name}</code> 방식으로 사용할 수 있다.</li>
<li><code>${variable_name}</code> 는 다음과 같은 연산자를 지원한다.
<ul>
<li><code>${variable_name:-word}</code> 는 <code>variable_name</code> 이 정의되어있지 않다면 <code>word</code> 로 대체된다.</li>
<li><code>${variable_name:+word}</code> 는 <code>variable_name</code> 이 정의되어 있다면 <code>word</code> 가 그 값으로 대체되고 정의되어있지 않다면 빈 문자열로 대체된다.</li>
</ul>
</li>
</ul>
<p><strong>FROM</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> [--platform=&lt;platform&gt;] &lt;IMAGE&gt; [AS &lt;name&gt;]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> [--platform=&lt;platform&gt;] &lt;IMAGE&gt;[:&lt;TAG&gt;] [AS &lt;name&gt;]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> [--platform=&lt;platform&gt;] &lt;IMAGE&gt;[@&lt;DIGEST&gt;] [AS &lt;name&gt;]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>생성할 이미지의 베이스 이미지를 설정한다.</li>
<li>멀티 플랫폼 이미지를 참조할 때 <code>--platform</code> 사용하여 플랫폼을 특정할 수 있다.
<ul>
<li>linux/amd64</li>
<li>linux/arm64</li>
<li>windows/amd64</li>
<li>…</li>
</ul>
</li>
<li><!-- raw HTML omitted --> 뒤에 <code>TAG</code>와 <code>DIGEST</code>는 선택적으로 사용한다. 둘 다 생략했다면 <code>TAG</code>로 latest가 사용된다.</li>
<li>AS를 사용해서 빌드 단계에 이름을 줄 수 있다.</li>
</ul>
<p><strong>RUN</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">RUN</span> &lt;command&gt; <span style="color:#75715e"># shell 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;executable&#34;</span>, <span style="color:#e6db74">&#34;param1&#34;</span>, <span style="color:#e6db74">&#34;param2&#34;</span><span style="color:#f92672">]</span> <span style="color:#75715e"># exec 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>현재 이미지의 새 레이어에서 실행되고 결과를 커밋되고, 커밋된 이미지는 Dockerfile의 다음 스텝에서 사용된다.</li>
<li>RUN 명령어는 두 가지 방식을 따른다.
<ul>
<li>shell 형식
<ul>
<li>내부적으로 shell 명령어를 호출하여 <!-- raw HTML omitted -->를 호출한다.</li>
</ul>
</li>
<li>exec 형식
<ul>
<li>사용자가 executable(<code>/bin/sh</code>, <code>/bin/bash</code>…) 을 명시하여 명령어를 실행할 수 있다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>CMD</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">CMD</span> &lt;command&gt; param1 param2 <span style="color:#75715e"># shell 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;executable&#34;</span>, <span style="color:#e6db74">&#34;param1&#34;</span>, <span style="color:#e6db74">&#34;param2&#34;</span>] <span style="color:#75715e"># exec 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>컨테이너가 실행될 때 수행될 default 명령어를 설정한다.</li>
<li>컨테이너 실행시 override가 가능하다.</li>
<li>CMD는 두 가지 방식을 따른다.
<ul>
<li>shell 형식
<ul>
<li>내부적으로 shell 명령어를 호출하여 <!-- raw HTML omitted -->를 호출한다.</li>
</ul>
</li>
<li>exec 형식
<ul>
<li>사용자가 executable(<code>/bin/sh</code>, <code>/bin/bash</code>…) 을 명시하여 명령어를 실행할 수 있다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>ENTIRYPOINT</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">ENTRYPOINT</span> command param1 param2 <span style="color:#75715e"># shell 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;executable&#34;</span>, <span style="color:#e6db74">&#34;param1&#34;</span>, <span style="color:#e6db74">&#34;param2&#34;</span>] <span style="color:#75715e">#exec 형식</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>컨테이너가 실행될 때 가장 먼저 수행되는 명령어를 지정한다.</li>
<li>ENTIRYPOINT 명령어는 두 가지 방식을 따른다.
<ul>
<li>shell 형식
<ul>
<li>내부적으로 shell 명령어를 호출하여 <!-- raw HTML omitted -->를 호출한다.</li>
</ul>
</li>
<li>exec 형식
<ul>
<li>사용자가 executable(<code>/bin/sh</code>, <code>/bin/bash</code>…) 을 명시하여 명령어를 실행할 수 있다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>LABEL</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">LABEL</span> &lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; &lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; &lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; ... <span style="color:#75715e"># 한 줄에 작성</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">LABEL</span> &lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; <span style="color:#ae81ff">\ </span><span style="color:#75715e"># 여러 줄에 작성</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>			&lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>			&lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>			...<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>키=밸류 방식으로 이미지에 메타데이터를 추가한다.</li>
<li>LABEL은 기본 또는 상위 이미지의 LABEL을 현재 이미지에 상속 받는다.</li>
<li>이미지의 라벨은 <code>docker image inspect</code> 명령어로 확인할 수 있다.</li>
</ul>
<p><strong>EXPOSE</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>Docker에게 컨테이너가 런타임에서 어떤 네트워크 포트를 사용할 지 알려준다.</li>
<li>TCP, UDP를 사용할 수 있고, 명시하지 않는다면 TCP가 사용된다.</li>
<li>실제로 포트를 공개하지는 않지만 <code>docker run -P</code> 명령어를 사용하면 호스트의 랜덤 포트가 컨테이너의 EXPOSE로 명시한 포트에 매핑된다.</li>
</ul>
<p><strong>ENV</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">ENV</span> &lt;key&gt; &lt;value&gt;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> &lt;key&gt;<span style="color:#f92672">=</span>&lt;value&gt; ...<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>환경변수 <!-- raw HTML omitted -->를 <!-- raw HTML omitted -->로 설정한다.</li>
<li>컨테이너 실행 시 <code>docker container run —env</code> 명령어로 변경할 수 있다.</li>
</ul>
<p><strong>ADD</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">ADD</span> <span style="color:#f92672">[</span>--chown<span style="color:#f92672">=</span>&lt;user&gt;;&lt;group&gt;<span style="color:#f92672">]</span> &lt;src&gt;... &lt;dest&gt;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> <span style="color:#f92672">[</span>--chown<span style="color:#f92672">=</span>&lt;user&gt;;&lt;group&gt;<span style="color:#f92672">]</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;&lt;src&gt;&#34;</span>,... <span style="color:#e6db74">&#34;&lt;dest&gt;&#34;</span><span style="color:#f92672">]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li><!-- raw HTML omitted -->의 파일, 디렉토리, 리모트 파일의 URL을 <!-- raw HTML omitted -->에 추가한다.</li>
<li><code>*</code>과 <code>?</code> 과 같은 패턴을 사용할 수도 있다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#75715e"># hom으로 시작하는 모든 파일 추가</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> home* /dir/<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># ?는 단일 문자 대체</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> hom?.txt /dir/<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p><strong>COPY</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">COPY</span> <span style="color:#f92672">[</span>--chown<span style="color:#f92672">=</span>&lt;user&gt;:&lt;group&gt;<span style="color:#f92672">]</span> &lt;src&gt;... &lt;dest&gt;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> <span style="color:#f92672">[</span>--chown<span style="color:#f92672">=</span>&lt;user&gt;:&lt;group&gt;<span style="color:#f92672">]</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;&lt;src&gt;&#34;</span>,... <span style="color:#e6db74">&#34;&lt;dest&gt;&#34;</span><span style="color:#f92672">]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>이미지에 호스트의 파일이나 디렉토리를 복사한다.</li>
<li><code>ADD</code>는 대상이 압축파일인 경우 해체하여 복사하는 등 기능을 제공하지만, COPY는 복사만 수행한다.</li>
</ul>
<p><strong>WORKDIR</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /path/to/workdir</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>Dockerfile에서 정의한 명령을 실행하기 위한 디렉토리를 지정하며, 경로가 존재하지 않으면 생성한다.</li>
</ul>
<p><strong>ARG</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#66d9ef">ARG</span> &lt;name&gt;<span style="color:#f92672">[=</span>&lt;default value&gt;<span style="color:#f92672">]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>Dockerfile에서 사용할 변수를 정의한다.</li>
<li><code>ENV</code>와 달리 Dockerfile 내부에서만 사용 가능하다.</li>
</ul>
<p><strong>HEALTHCHECK</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">HEALTHCHECK</span> <span style="color:#f92672">[</span>OPTIONS<span style="color:#f92672">]</span> CMD command <span style="color:#75715e"># 사용할 명령을 지정 (curl 등)</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">HEALTHCHECK</span> NONE <span style="color:#75715e">#기본 이미지에서 상속된 healthcheck 사용 안함</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ul>
<li>컨테이너가 잘 동작하는지 확인한다.</li>
<li>옵션은 다음과 같다.</li>
</ul>
<table>
<thead>
<tr>
<th>Option</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;interval=n</td>
<td>30s</td>
<td>헬스 체크 간격</td>
</tr>
<tr>
<td>&ndash;timeout=n</td>
<td>30s</td>
<td>헬스 체크 타임아웃 기준</td>
</tr>
<tr>
<td>&ndash;retries=n</td>
<td>3</td>
<td>타임아웃 횟수</td>
</tr>
<tr>
<td>&ndash;start_period=n</td>
<td>0s</td>
<td>컨테이너 실행 후 대기 시간</td>
</tr>
</tbody>
</table>
<h2 id="compose-file">Compose file</h2>
<p><a href="https://docs.docker.com/compose/compose-file/">Compose specification</a></p>
<h3 id="compose-file-versions">Compose file versions</h3>
<table>
<thead>
<tr>
<th>Reference file</th>
<th>What changed in this version</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a> (most current, and recommended)</td>
<td><a href="https://docs.docker.com/compose/compose-file/compose-versioning/#versioning">https://docs.docker.com/compose/compose-file/compose-versioning/#versioning</a></td>
</tr>
<tr>
<td><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></td>
<td><a href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-3">https://docs.docker.com/compose/compose-file/compose-versioning/#version-3</a></td>
</tr>
<tr>
<td><a href="https://docs.docker.com/compose/compose-file/compose-file-v2/">https://docs.docker.com/compose/compose-file/compose-file-v2/</a></td>
<td><a href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-2">https://docs.docker.com/compose/compose-file/compose-versioning/#version-2</a></td>
</tr>
<tr>
<td>Version 1 (Deprecated)</td>
<td><a href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-1-deprecated">https://docs.docker.com/compose/compose-file/compose-versioning/#version-1-deprecated</a></td>
</tr>
</tbody>
</table>
<h3 id="compose-specification">Compose specification</h3>
<ul>
<li>Compose specification은 도커가 다중 컨테이너 애플리케이션을 정의하기 위해 만든 <strong>새로운 표준 규격</strong>이다.</li>
<li>**YAML(YML)**을 이용해서 다음과 같은 항목을 정의한다.
<ul>
<li>service(필수), network, volume, config, secret</li>
</ul>
</li>
<li>Compose file의 이름은 compose.yaml 또는 docker-compose.yaml을 사용한다.</li>
<li>만약 둘 다 존재하는 경우 Compose spec의 컨벤션인 <strong>compose.yaml을 권장</strong>한다.</li>
</ul>
<h3 id="compose-애플리케이션-모델">Compose 애플리케이션 모델</h3>
<ul>
<li>Compose file은 플랫폼에 의존하지 않는 컨테이너 집합 기반 애플리케이션을 정의한다.</li>
<li><strong>서비스(service)</strong>
<ul>
<li>애플리케이션 컴포넌트를 구성한다.</li>
<li>컨테이너를 실행해서 플랫폼에 구현되는 추상 개념이다.</li>
<li>어떤 서비스는 런타임 또는 플랫폼에 의존적인 **설정(config)**을 필요로 한다.</li>
</ul>
</li>
<li><strong>네트워크(network)</strong>
<ul>
<li>서비스간 통신을 구성한다.</li>
<li>서로 연결된 서비스 컨테이너 간에 IP 라우팅을 위한 플랫폼 기능 추상체이다.</li>
</ul>
</li>
<li><strong>볼륨(volume)</strong>
<ul>
<li>서비스는 볼륨에 데이터를 저장하고 공유한다.</li>
</ul>
</li>
<li>config와 secret을 이용해서 컨테이너에 필요한 정책과 보안을 설정할 수 있다.</li>
</ul>
<h3 id="profile">Profile</h3>
<ul>
<li>프로필을 사용해서 환경에 맞게 Compose 애플리케이션 모델을 조정할 수 있다.</li>
<li><code>services</code>는 요소로 서비스 <code>name</code>을 제공하고 그 하위에 <code>profiles</code> 속성을 제공한다.
<ul>
<li>profiles 속성으로 프로필 목록을 정의한다.</li>
<li>profiles 속성이 설정되지 않은 서비스는 항상 활성화 된다.</li>
<li>특정 서비스를 실행하는 경우 지정한 프로필이 활성화 된다.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 모든 프로필에서 활성화 된다.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">foo</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">image</span>: <span style="color:#ae81ff">foo</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># test 프로필에서 활성화 된다.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">bar</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">image</span>: <span style="color:#ae81ff">bar</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">profiles</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#ae81ff">test</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># test 및 debug 프로필에서 활성화 된다.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">baz</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">image</span>: <span style="color:#ae81ff">baz</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#ae81ff">bar</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">profiles</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#ae81ff">test</span>
</span></span><span style="display:flex;"><span>			- <span style="color:#ae81ff">debug</span>
</span></span></code></pre></div><h3 id="service의-구성-요소">service의 구성 요소</h3>
<ul>
<li>service의 주요 하위 요소
<ul>
<li><code>build</code> <code>image</code> <code>command</code> <code>container_name</code> <code>depends_on</code> <code>environment</code> <code>expose</code> <code>ports</code> <code>healthcheck</code> <code>volumes</code></li>
</ul>
</li>
<li>다른 구성 요소는 문서를 참고</li>
</ul>
<p><strong>build</strong></p>
<ul>
<li>컨테이너 이미지를 생성하기 위한 빌드 구성을 지정한다.</li>
<li><code>build</code> 요소는 문자열 값을 가지거나 하위 요소를 가질 수 있다.</li>
<li>아래와 같이 build에 문자열 값을 가지면 Dockerfile의 context만 가질 수 있다.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">webapp</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">build</span>: <span style="color:#ae81ff">./dir</span>
</span></span></code></pre></div></li>
<li><code>build</code> 요소의 하위 요소는 다음과 같다.
<ul>
<li>context: Dockerfile의 context를 지정한다.</li>
<li>dockerfile: 사용할 Dockerfile의 이름을 지정한다.</li>
<li>args: Dockerfile ARG 값을 정의한다.</li>
<li>…</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">webapp</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">context</span>: <span style="color:#ae81ff">./dir</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">webapp.Dockerfile</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>				- <span style="color:#ae81ff">GIT_COMMIT=cdc3b19</span>
</span></span></code></pre></div></li>
</ul>
<p><strong>image</strong></p>
<ul>
<li>컨테이너를 시작할 이미지를 지정한다.</li>
<li><code>[&lt;registry&gt;/][&lt;project&gt;/]&lt;image&gt;[:&lt;tag&gt;|@&lt;digest&gt;]</code> 방식으로 기술해야 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">redis</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">redis:5</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">library/redis</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker.io/library/redis</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">my_private.registry:5000/redis</span>
</span></span></code></pre></div><p><strong>command</strong></p>
<ul>
<li>컨테이너 이미지(CMD)에 선언된 기본 명령을 재정의 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">webapp</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">command</span>: [<span style="color:#e6db74">&#34;bundle&#34;</span>, <span style="color:#e6db74">&#34;exec&#34;</span>, <span style="color:#e6db74">&#34;thin&#34;</span>, <span style="color:#e6db74">&#34;-p&#34;</span>, <span style="color:#e6db74">&#34;3000&#34;</span>] <span style="color:#75715e"># exec 형식</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">command</span>: <span style="color:#ae81ff">bundle exec thin -p 3000 </span> <span style="color:#75715e"># shell 형식</span>
</span></span></code></pre></div><p><strong>container_name</strong></p>
<ul>
<li>container_name은 컨테이너의 이름을 지정한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">webapp</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">my-web-container</span>
</span></span></code></pre></div><p>*<strong>*depends_on**</strong></p>
<ul>
<li>서비스 간의 시작 및 종료 종속성을 기술한다.</li>
<li>두 가지 방법으로 기술할 수 있다.</li>
<li>Short syntax
<ul>
<li>종속성 서비스 이름만 지정한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">web</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>: <span style="color:#ae81ff">.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">db</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">redis</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">redis</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">redis</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">postgres</span>
</span></span></code></pre></div><ul>
<li>위 예제는 아래와 같은 동작을 의미한다.
<ul>
<li><code>web</code> 보다 <code>db</code> 및 <code>redis</code>가 빨리 생성된다.</li>
<li><code>web</code> 이 <code>db</code> 및 <code>redis</code>보다 빨리 제거된다.</li>
</ul>
</li>
</ul>
</li>
<li>Long syntax
<ul>
<li>이 방법을 사용하면 추가 필드를 사용할 수 있다.</li>
<li><code>condition</code>: 종속성이 충족된 것으로 간주되는 조건
<ul>
<li><code>service_started</code>: (default) 의존하는 서비스가 먼저 시작됨</li>
<li><code>service_healthy</code>: 의존하는 서비스가 먼저 시작되고, healthy 상태임</li>
<li><code>service_completed_successfully</code>: 의존하는 서비스가 성공적으로 종료됨</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">web</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>: <span style="color:#ae81ff">.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">service_healthy</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">redis</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">service_started</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">redis</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">redis</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">postgres</span>
</span></span></code></pre></div><ul>
<li>위 예제는 아래와 같은 동작을 의미한다.
<ul>
<li><code>web</code> 이 실행되기 전에 <code>db</code> 가 healthy 상태이고 <code>redis</code>가 시작된 상태이다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>environment</strong></p>
<ul>
<li>컨테이너에 설정된 환경변수를 정의한다.</li>
<li>두 가지 방법으로 환경변수를 정의할 수 있다.</li>
<li>Map syntax
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">RACK_ENV</span>: <span style="color:#ae81ff">development</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">SHOW</span>: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">USER_INPUT</span>:
</span></span></code></pre></div></li>
<li>Array syntax
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">RACK_ENV=development</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">SHOW=true</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">USER_INPUT</span>
</span></span></code></pre></div></li>
</ul>
<p><strong>expose</strong></p>
<ul>
<li>컨테이너에서 노출해야 하는 포트를 정의한다.</li>
<li>호스트 내부의 다른 컨테이너들만 엑세스가 가능하다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">expose</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;3000&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;8000&#34;</span>
</span></span></code></pre></div><p><strong>ports</strong></p>
<ul>
<li>컨테이너 포트를 노출한다.</li>
<li><code>[HOST:]CONTAINER[/PROTOCOL]</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;3000&#34;</span> <span style="color:#75715e"># 호스트의 랜덤 포트, 컨테이너의 3000번 포트</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;3000-3005&#34;</span> <span style="color:#75715e"># 컨테이너의 포트 번호 범위내에서 할당</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;8000:8000&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;9090-9091:8080-8081&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;49100:22&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;127.0.0.1:8001:8001&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;127.0.0.1:5000-5010:5000-5010&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;6060:6060/udp&#34;</span>
</span></span></code></pre></div><pre tabindex="0"><code>expose vs ports
- ports는 호스트와 컨테이너의 포트를 바인딩 시킨다.
- ports는 호스트 포트와 컨테이너 포트를 모두 노출시키기 때문에
	호스트 내부 컨테이너 간에는 노출된 포트로 접근할 수 있지만,
	호스트 외부에서는 컨테이너와 바인딩된 포트로 접근해야 한다.

- expose는 호스트 포트를 공개하지 않고 컨테이너의 포트만 공개한다.
- 따라서 호스트 외부에서는 컨테이너에 접근할 수 없고 컨테이너 끼리만 접근이 가능하다.
</code></pre><p><strong>healthcheck</strong></p>
<ul>
<li>서비스 컨테이너가 healthy 상태인지 확인한다.</li>
<li>healthcheck의 하위 구성 요소는 아래와 같다.</li>
</ul>
<table>
<thead>
<tr>
<th>Element</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>disable</td>
<td>true 또는 false로 healthcheck 여부를 설정</td>
</tr>
<tr>
<td>test</td>
<td>컨테이너 상태를 확인하기 위한 명령 정의. exec 방식과 shell 방식 모두 사용 가능</td>
</tr>
<tr>
<td>interval</td>
<td>헬스 체크 간격</td>
</tr>
<tr>
<td>timeout</td>
<td>헬스 체크 타임아웃 기준</td>
</tr>
<tr>
<td>retries</td>
<td>타임아웃 횟수</td>
</tr>
<tr>
<td>start_period</td>
<td>컨테이너 시작 후 대기 시간</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">healthcheck</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">test</span>: [<span style="color:#e6db74">&#34;CMD&#34;</span>, <span style="color:#e6db74">&#34;curl&#34;</span>, <span style="color:#e6db74">&#34;-f&#34;</span>, <span style="color:#e6db74">&#34;http://localhost&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">interval</span>: <span style="color:#ae81ff">1m30s</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">timeout</span>: <span style="color:#ae81ff">10s</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">retries</span>: <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">start_period</span>: <span style="color:#ae81ff">40s</span>
</span></span></code></pre></div><p><strong>volumes</strong></p>
<ul>
<li>서비스 컨테이너에서 엑세스하는 마운트 호스트 경로 또는 정의한 볼륨을 기술한다.</li>
<li>마운트가 단일 서비스에서만 사용되는 경우 최상위 volumes 요소 대신 services 하위 요소로 선언할 수 있다.</li>
<li>여러 서비스가 볼륨을 재사용하려면 최상위 volumes 요소에서 정의된 볼륨을 기술해야 한다.</li>
<li><code>HOST_VOLUME:CONTAINER_PATH:[ACCESS_MODE]</code>
<ul>
<li><code>HOST_VOLUME</code>: 호스트 경로 또는 최상위 volumes 요소에서 정의한 볼륨 이름</li>
<li><code>CONTAINER_PATH</code>: 컨테이너의 경로</li>
<li><code>ACCESS_MODE</code>: 목록은 <code>,</code>으로 구분된다.
<ul>
<li><code>rw</code> : 읽기 및 쓰기(기본값)</li>
<li><code>ro</code> : 읽기 전용</li>
<li></li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">awesome/database</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">db-data:/etc/data</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backup</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">backup-service</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">db-data:/var/lib/backup/data</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">db-data</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">driver_opts</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">device</span>: <span style="color:#ae81ff">/host/path/to/volume</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">awesome/database</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/dir1:/etc/data</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backup</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">backup-service</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/dir2:/var/lib/backup/data:ro</span>
</span></span></code></pre></div>]]></content:encoded></item></channel></rss>