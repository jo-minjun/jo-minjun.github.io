<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>MSA on minjun's memory</title><link>https://jo-minjun.github.io/tags/msa/</link><description>Recent content in MSA on minjun's memory</description><image><title>minjun's memory</title><url>https://jo-minjun.github.io/47</url><link>https://jo-minjun.github.io/47</link></image><generator>Hugo -- gohugo.io</generator><language>kr</language><lastBuildDate>Fri, 24 Feb 2023 00:02:51 +0900</lastBuildDate><atom:link href="https://jo-minjun.github.io/tags/msa/index.xml" rel="self" type="application/rss+xml"/><item><title>12 factor app (15 factor app)</title><link>https://jo-minjun.github.io/notes/12-factor-app/</link><pubDate>Fri, 24 Feb 2023 00:02:51 +0900</pubDate><guid>https://jo-minjun.github.io/notes/12-factor-app/</guid><description>Introduction 12 factor app은 서비스형 소프트웨어를 구성하기 위한 방법론입니다.
개발 언어/프레임워크에 상관없는 이식성과 플랫폼 호환성 향상을 위한 디자인 원칙입니다. 애플리케이션의 수평적 확장이 용이하도록 합니다. 애플리케이션 확장 가능성 CI/CD에 용이성 플랫폼간 이식성 기본적인 기대치, 정책 설정 1. Codebase 형상관리 시스템에서 하나의 코드베이스를 관리하면서, 다수에 배포한다. 하나의 코드베이스에 여러개의 애플리케이션 코드가 있다면 12 factor app 위반입니다.
코드베이스는 모든 배포에 사용되지만 각 배포는 다른 버전이 사용될 수 있습니다.
2. Dependencies 의존성을 명시적으로 선언하고 분리한다.</description><content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>12 factor app은 서비스형 소프트웨어를 구성하기 위한 방법론입니다.</p>
<ul>
<li>개발 언어/프레임워크에 상관없는 이식성과 플랫폼 호환성 향상을 위한 디자인 원칙입니다.</li>
<li>애플리케이션의 수평적 확장이 용이하도록 합니다.</li>
</ul>
<blockquote>
<ul>
<li>애플리케이션 확장 가능성</li>
<li>CI/CD에 용이성</li>
<li>플랫폼간 이식성</li>
<li>기본적인 기대치, 정책 설정</li>
</ul>
</blockquote>
<h2 id="1-codebase">1. Codebase</h2>
<h3 id="형상관리-시스템에서-하나의-코드베이스를-관리하면서-다수에-배포한다">형상관리 시스템에서 하나의 코드베이스를 관리하면서, 다수에 배포한다.</h3>
<p>하나의 코드베이스에 여러개의 애플리케이션 코드가 있다면 12 factor app 위반입니다.</p>
<p>코드베이스는 모든 배포에 사용되지만 각 배포는 다른 버전이 사용될 수 있습니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/codebase.png" alt="codebase"  />
</p>
<h2 id="2-dependencies">2. Dependencies</h2>
<h3 id="의존성을-명시적으로-선언하고-분리한다">의존성을 명시적으로 선언하고 분리한다.</h3>
<p>의존성은 명시적으로 선언되어, 신규 개발자 또는 시스템 설정을 편리하게 해야합니다.</p>
<p>대부분의 프로그래밍 언어는 패키징 시스템을 제공하기 때문에 새로 설정을 해야할 때는 언어와 패키지 매니저만 설치하면 됩니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/dependencies.png" alt="dependencies"  />
</p>
<h2 id="3-config">3. Config</h2>
<h3 id="설정값을-환경에-저장한다">설정값을 환경에 저장한다.</h3>
<p>애플리케이션 설정값은 배포 환경에 따라 달라지는 값들입니다.</p>
<ul>
<li>데이터베이스 또는 Backing 서비스를 처리하는 리소스</li>
<li>Amazon S3 또는 트위터와 같은 외부 서비스에 대한 인증 정보</li>
<li>배포 환경 호스트 이름과 같은 값</li>
</ul>
<p><img loading="lazy" src="/images/notes/12-factor-app/config.png" alt="config"  />
</p>
<h2 id="4-backing-services">4. Backing services</h2>
<h3 id="backing-service">Backing service</h3>
<p>Backing 서비스는 데이터베이스와, 메시징, 메일 서비스 등 통해 연결된 모든 서비스입니다.</p>
<p>12 factor app은 Backing 서비스를 모두 리소스로 취급하고, 설정에서 값을 읽어서 처리하여 느슨하게 연결합니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/backing-service.png" alt="backing-service"  />
</p>
<h2 id="5-build-release-run">5. Build, release, run</h2>
<h3 id="빌드와-실행-단계를-엄격하게-구분한다">빌드와 실행 단계를 엄격하게 구분한다.</h3>
<p>코드베이스는 3단계를 거쳐 배포되고, 엄격하게 구분되어야 합니다.</p>
<ol>
<li>Build: 지정된 코드 버전을 사용하여 의존성을 가져오고 컴파일합니다.</li>
<li>Release: 컴파일된 결과물과 현재 배포 환경의 설정을 연결합니다. Release 단계의 결과물은 즉시 실행될 수 있습니다.</li>
<li>Run: 애플리케이션을 실행합니다.</li>
</ol>
<p>코드 변경은 반드시 빌드 단계에서만 이루어져야만 하며 만들어진 Release 결과는 변경될 수 없고, 이전 버전으로 롤백이 가능해야합니다.</p>
<h2 id="6-processes">6. Processes</h2>
<h3 id="애플리케이션을-하나-이상의-stateless-프로세스로-실행한다">애플리케이션을 하나 이상의 Stateless 프로세스로 실행한다.</h3>
<p>애플리케이션은 실행 환경에서 하나 이상의 프로세스로 실행됩니다.</p>
<p>상태는 데이터베이스와 같은 상태 저장 서비스에 저장해야 하며, 애플리케이션은 Stateless하게 유지해야 합니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/processes.png" alt="processes"  />
</p>
<h2 id="7-port-binding">7. Port binding</h2>
<h3 id="포트-바인딩을-통해-서비스-제공을-한다">포트 바인딩을 통해 서비스 제공을 한다.</h3>
<p>애플리케이션은 포트를 바인딩하여 서비스를 제공해야 합니다.</p>
<p>포트를 통해 서비스를 제공함으로써 다른 애플리케이션의 Backing 서비스가 될 수 있습니다.</p>
<h2 id="8-concurrency">8. Concurrency</h2>
<h3 id="프로세스-모델을-통해-수평적-확장을-한다">프로세스 모델을 통해 수평적 확장을 한다.</h3>
<p>애플리케이션은 리소스 추가를 통한 수직 확장 뿐만 아니라, 수를 늘리는 수평적 확장이 가능해야 합니다.</p>
<ol start="6">
<li>Processes를 준수함으로써 확장하거나 축소할 수 있습니다.</li>
</ol>
<h2 id="9-disposability">9. Disposability</h2>
<h3 id="빠른-시작과-그레이스풀-셧다운으로-안정성을-최대화한다">빠른 시작과 그레이스풀 셧다운으로 안정성을 최대화한다.</h3>
<p>배포와 수평 확장시 빠른 애플리케이션 구동을 위해 필요합니다.</p>
<p>종료 시그널을 받은 애플리케이션은 새로운 요청을 받지 않고, 기존 요청을 처리한 후 안정적으로 종료되어야 합니다.</p>
<h2 id="10-devprod-parity">10. Dev/prod parity</h2>
<h3 id="개발-스테이징-상용-환경을-최대한-비슷하게-유지한다">개발, 스테이징, 상용 환경을 최대한 비슷하게 유지한다.</h3>
<p>Local에서는 H2 database를 사용하고 상용에서는 MySQL을 사용하는 것과 같은 차이를 줄이는 것입니다.</p>
<p>12 factor app은 개발과 상용 환경 사이의 차이를 줄여 지속적인 배포가 가능하도록 해야합니다.</p>
<h2 id="11-logs">11. Logs</h2>
<h3 id="로그를-이벤트-스트림으로-처리한다">로그를 이벤트 스트림으로 처리한다.</h3>
<p>애플리케이션은 로그에 관여하면 안되며, 단순히 버퍼링없이 출력할 뿐입니다.</p>
<p>애플리케이션은 언제든지 생성되고 삭제될 수 있습니다. 따라서 이벤트는 별도 저장소에 보관되는 것이 좋습니다.</p>
<p><img loading="lazy" src="/images/notes/12-factor-app/logs.png" alt="logs"  />
</p>
<h2 id="12-admin-processes">12. Admin processes</h2>
<h3 id="어드민관리-작업을-일회성-프로세스로-실행해야-한다">어드민/관리 작업을 일회성 프로세스로 실행해야 한다.</h3>
<p>개발자는 종종 일회성으로 애플리케이션 관리 작업을 수행해야 하며, 작업을 스크립트화하여 한번에 실행할 수 있도록 해야합니다.</p>
<ul>
<li>데이터베이스 마이그레이션</li>
<li>일회성 스크립트 실행</li>
</ul>
<p>관리 스크립트는 애플리케이션과 같은 코드베이스에서 같은 설정 값을 사용해야 합니다.</p>
<hr>
<blockquote>
<p>케빈 허프만이 “Beyond the 12 factor app”을 통해 MSA 환경에 적합한 3가지 요소를 제시했다.</p>
</blockquote>
<h2 id="13-api-first">13. API first</h2>
<h3 id="api-스펙-정의를-우선으로-한다">API 스펙 정의를 우선으로 한다.</h3>
<p>API 스펙을 먼저 정의하여 어떤 스키마로 통신할지 결정해야 합니다.</p>
<p>API first를 통해 클라이언트와 서버가 동시에 작업을 진행할 수 있습니다.</p>
<h2 id="14-telemetry">14. Telemetry</h2>
<h3 id="애플리케이션-및-리소스를-모니터링한다">애플리케이션 및 리소스를 모니터링한다.</h3>
<p>애플리케이션 및 CPU, RAM등 리소스를 모니터링하여 성능, 이벤트 및 헬스 체크 등을 확인할 수 있습니다.</p>
<p>서비스 관리 및 경고 알람 트리거 설정에 도움을 줍니다.</p>
<h2 id="15-security">15. Security</h2>
<h3 id="보안-정책이-적절한지-확인한다">보안 정책이 적절한지 확인한다.</h3>
<p>API, DB 등 보안 정책이 적절한지 확인해야 합니다.</p>
<p>API는 OAuth 등으로 보호되어야 하며 HTTPS를 이용해서 노출시켜야 합니다.</p>
]]></content:encoded></item><item><title>MSA 개발 스택 빠르게 훑어보기</title><link>https://jo-minjun.github.io/notes/msa-stack-quick-peek/</link><pubDate>Wed, 28 Dec 2022 17:10:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/msa-stack-quick-peek/</guid><description>1. 요구사항 아주 간단한 웹 기반 ITunes 주요 데이터는 다음과 같다. 가수 (Singer) 이름 정보를 가진다. 앨범 (Album) 발매 날짜, 앨범 제목 정보를 가진다. 노래 (Song) 노래 제목과 재생 시간 정보를 가진다. 공통 데이터 생성 시간 업데이트 시간 생성한 사람 업데이트한 사람 주요 기능 가수를 등록할 수 있다. 앨범을 등록할 수 있다. 노래를 등록할 수 있다. 노래 목록들을 조회할 수 있다. 노래를 조회할 수 있다. 노래를 업데이트 할 수 있다. 노래를 삭제할 수 있다.</description><content:encoded><![CDATA[<h2 id="1-요구사항">1. 요구사항</h2>
<ul>
<li>아주 간단한 웹 기반 ITunes</li>
<li>주요 데이터는 다음과 같다.
<ul>
<li>가수 (Singer)
<ul>
<li>이름 정보를 가진다.</li>
</ul>
</li>
<li>앨범 (Album)
<ul>
<li>발매 날짜, 앨범 제목 정보를 가진다.</li>
</ul>
</li>
<li>노래 (Song)
<ul>
<li>노래 제목과 재생 시간 정보를 가진다.</li>
</ul>
</li>
<li>공통 데이터
<ul>
<li>생성 시간</li>
<li>업데이트 시간</li>
<li>생성한 사람</li>
<li>업데이트한 사람</li>
</ul>
</li>
</ul>
</li>
<li>주요 기능
<ul>
<li>가수를 등록할 수 있다.</li>
<li>앨범을 등록할 수 있다.</li>
<li>노래를 등록할 수 있다.</li>
<li>노래 목록들을 조회할 수 있다.</li>
<li>노래를 조회할 수 있다.</li>
<li>노래를 업데이트 할 수 있다.</li>
<li>노래를 삭제할 수 있다.</li>
</ul>
</li>
</ul>
<h3 id="엔티티-class">엔티티 Class</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/1.png" alt="1"  />
</p>
<h2 id="2-프로젝트-scaffolding">2. 프로젝트 scaffolding</h2>
<h3 id="섀시-패턴">섀시 패턴</h3>
<ul>
<li>아래와 같은 프로젝트들의 공통 관심사를 편리하게 설정할 수 있다.
<ul>
<li>health check 패턴: actuator</li>
<li>개발 생산성 확보: spring-configuration-processor, lombok, mapstruct:</li>
<li>로깅 패턴: logback, request - response 로깅</li>
<li>추적 패턴: B3 Propagation(Sleuth), Sentry 적용</li>
<li>로컬 개발 환경: docker-compose를 이용한 local cluster 구성 (UAA + MySQL + Kafka + …)</li>
<li>Persistence: QueryDSL, JPA Specification integration</li>
<li>API-First: OpenApi Generator 및 Zalando problem details 연동</li>
<li>Scheduler: ShedLock 연동</li>
<li>Security: UAA 및 리소스 서버 통합</li>
<li>CI / CD: 도커 이미지 빌드, 젠킨스 연동</li>
</ul>
</li>
</ul>
<h3 id="msa-bootcamp-프로젝트-세팅-meshkorea">msa-bootcamp 프로젝트 세팅 (Meshkorea)</h3>
<ol>
<li>
<p><code>git clone https://github.com/meshkorea/msa-starter.git</code></p>
<ul>
<li>starter project를 clone한다.</li>
</ul>
</li>
<li>
<p><code>cd msa-starter &amp;&amp; ./gradlew generate</code></p>
<ul>
<li>위 명령어를 수행하면 아래와 같은 세팅 메세지가 나온다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Starting a Gradle Daemon <span style="color:#f92672">(</span>subsequent builds will be faster<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt; Task :getBuildInfo
</span></span><span style="display:flex;"><span>&gt; WebMVC/JPA 프로젝트인가요<span style="color:#f92672">(</span>m<span style="color:#f92672">)</span>? WebFlux/R2DBC 프로젝트인가요<span style="color:#f92672">(</span>f<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>default: m<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>17s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 부릉 프로젝트입니까<span style="color:#f92672">(</span>y/n, default: n<span style="color:#f92672">)</span>?:
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>27s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 사용하려는 자바 버전은 무엇입니까<span style="color:#f92672">(</span>1.8/11, default: 11<span style="color:#f92672">)</span>?:
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>31s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span>
</span></span><span style="display:flex;"><span>&gt; 프로젝트 이름은 무엇입니까<span style="color:#f92672">(</span>default: example<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>35s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 그룹 이름은 무엇입니까<span style="color:#f92672">(</span>default: com.vroong<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>38s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 웹 서버 포트는 무엇입니까<span style="color:#f92672">(</span>default: 8080<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>42s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; 웹 요청 및 응답에 사용할 미디어 타입은 무엇입니까<span style="color:#f92672">(</span>default: application/vnd.vroong.private.v1+json<span style="color:#f92672">)</span>?
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>47s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>진행할까요<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;n&#39;</span> to quit<span style="color:#f92672">)</span>? <span style="color:#f92672">[</span>osArch:intel, projectType:v, projectName:example, groupName:com.vroong, packageName:com.vroong.example, portNumber:8080, mediaType:application/vnd.vroong.private.v1+json, javaVersion:11, dockerImage:amazoncorretto:11-alpine-jdk, skipTokens:<span style="color:#f92672">[</span>.DS_Store<span style="color:#f92672">]]</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">====</span>---------&gt; 33% EXECUTING <span style="color:#f92672">[</span>50s<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt; Task :generate
</span></span></code></pre></div></li>
<li>
<p><code>cp -r build {path-to-your-project}</code></p>
</li>
<li>
<p><code>cd {path-to-your-project} &amp;&amp; ./gradlew clean build</code></p>
</li>
<li>
<p><code>git init</code></p>
</li>
</ol>
<h3 id="로컬-개발-환경-구동-방법">로컬 개발 환경 구동 방법</h3>
<ol>
<li>JDK 설치
<ul>
<li>corretto11</li>
</ul>
</li>
<li>jhipster-uaa 세팅
<ol>
<li>msa-starter 디렉토리의 jhipster-uaa.zip을 해제한다.</li>
<li><code>cd jhipster-uaa &amp;&amp; ./gradlew jibDockerBuild -Djib.to.image=jhipster-uaa -Djib.to.tags=latest</code></li>
<li>로컬에서는 jhipster-uaa를 사용하지만, EKS에 올렸을 때는 이미 구동중인 vroong-uaa를 사용한다.</li>
</ol>
</li>
<li>도커 구동
<ul>
<li><code>./gradlew clusterUp</code></li>
<li>MySQL (3306)</li>
<li>Kafka (9092)</li>
<li>jhipster-uaa (9999)</li>
</ul>
</li>
<li>애플리케이션 구동</li>
</ol>
<h2 id="3-api-first-개발-방법론">3. API-First 개발 방법론</h2>
<h3 id="api-first-개발-방법론">API-First 개발 방법론</h3>
<ul>
<li>API를 중심으로 제품을 설계하는 방법이다.</li>
<li>API는 중요한 비즈니스 요소이며, 개발 조직에 API를 제공하는 것이 높은 우선순위를 가진다고 인식하는 것이다.</li>
</ul>
<h3 id="api-first-장점">API-First 장점</h3>
<ul>
<li><strong>일관성 제공</strong>
<ul>
<li>API-First 도구를 사용하여 일관성 있는 설계 및 문서화를 통해 일관된 개발자 경험을 제공할 수 있도록 해준다.</li>
</ul>
</li>
<li><strong>병렬 개발 편의성</strong>
<ul>
<li>API를 먼저 설계하고 결과물로 나온 API Spec을 이용해서 서버 스켈레톤과 클라이언트 SDK(API 문서 + 클라이언트 라이브러리 Stub)를 생성할 수 있고 클라이언트와 서버가 생성된 코드를 이용해서 빠르게 개발을 시작할 수 있다.</li>
</ul>
</li>
<li><strong>개발 속도 향상</strong>
<ul>
<li>API-First 도구는 클라이언트 SDK를 생성해주고, 이를 사내 Repository에 공유할 수 있다.</li>
<li>개발자들은 Mock API를 사용함으로써, API가 완성되기 전에 클라이언트를 구축할 수 있다.</li>
</ul>
</li>
<li><strong>빠른 피드백 제공</strong>
<ul>
<li>클라이언트 개발자는 서버 개발자가 개발 완료 후 API를 제공할 때까지 기다리지 않고, API 문서와 Mock API를 이용하여 설계를 검토하고 검증해볼 수 있다.</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/2.png" alt="2"  />
</p>
<h3 id="api-first-도구---oas-openapi-specification">API-First 도구 - OAS (OpenApi Specification)</h3>
<ul>
<li>OAS는 REST API를 위한 IDL(Interface Defintion Language) 이다.
<ul>
<li>API 스펙 및 기능, 설명을 기술한다.</li>
</ul>
</li>
<li>OAS 파일은 YAML 또는 JSON으로 작성할 수 있다.</li>
<li>OAS 파일은 아래 내용을 포함한 내용을 기술할 수 있다.
<ul>
<li>API endpoint와 HTTP method (GET /users, POST /users 등)</li>
<li>각 API의 요청과 응답의 파라미터</li>
<li>인증 method</li>
<li>이용 방법, 라이센스, 연락처 등과 기타 정보</li>
</ul>
</li>
<li>Swagger Editor/IDE plugin를 사용하면 OpenApi Specification의 문법 오류와 UI를 확인 할 수 있다.</li>
</ul>
<h3 id="openapi-generator의-특징">OpenApi Generator의 특징</h3>
<ul>
<li>OpenApi Generator를 사용하면 서버의 코드 스켈레톤과 클라이언트의 SDK를 자동으로 생성해준다.
<ul>
<li>서버 스켈레톤은 각 API에 대한 기술없이, 구현만 해주면 된다.</li>
<li>JAVA 뿐만 아니라 PHP, GO, C++, C#, Python, Ruby, Typescript 등 대부분의 언어를 지원한다.</li>
<li>API Interface 뿐만 아니라 model도 구현해주고, 정규 표현식 또는 다른 제한을 validation 까지 해준다.</li>
</ul>
</li>
<li>브라우저에서 사용자가 직접 호출해볼 수 있는 interactive API 문서를 만들어 준다.
<ul>
<li>Ex) Swagger Editor</li>
</ul>
</li>
</ul>
<h3 id="oas-문법">OAS 문법</h3>
<ul>
<li>
<p><a href="https://swagger.io/docs/specification/basic-structure/">https://swagger.io/docs/specification/basic-structure/</a></p>
</li>
<li>
<p>간단한 OAS 예시</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">openapi</span>: <span style="color:#e6db74">&#34;3.0.1&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">info</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">title</span>: <span style="color:#e6db74">&#34;msa-bootcamp&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">1.0.0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">servers</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://localhost:8080</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Local server</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">/api/singers</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">post</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">description</span>: <span style="color:#ae81ff">create an singer</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">operationId</span>: <span style="color:#ae81ff">createSinger</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">Singer</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">requestBody</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">description</span>: <span style="color:#ae81ff">singer model</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">content</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">application/vnd.vroong.private.v1+json</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">schema</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/CreateSingerRequest&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">responses</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;201&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/Created&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;400&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/BadRequest&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;401&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/Unauthorized&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;403&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/Forbidden&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;500&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/responses/ServerError&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">components</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">schemas</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">CommonProperties</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">createdAt</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/DateTime&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">updatedAt</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/DateTime&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">createdBy</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/UUID&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">updatedBy</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/UUID&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Page</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">size</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int32</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">default</span>: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">totalElements</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int64</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">totalPages</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int32</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">number</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">format</span>: <span style="color:#ae81ff">int32</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">default</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">example</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">CreateSingerRequest</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">required</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">name</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Singer</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">allOf</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/CommonProperties&#34;</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">singerId</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#34;#/components/schemas/LongId&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="서버-코드-스켈레톤-생성-및-클라이언트-sdk-생성">서버 코드 스켈레톤 생성 및 클라이언트 SDK 생성</h3>
<ul>
<li>
<p>OpenApi Generator를 사용한다.</p>
<ul>
<li><a href="https://openapi-generator.tech/docs/installation">https://openapi-generator.tech/docs/installation</a></li>
</ul>
</li>
<li>
<p>서버 코드 스켈레톤 생성</p>
<ul>
<li>아래와 같이 gradle이 정의되어 있어야 한다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>plugin <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	id <span style="color:#e6db74">&#39;org.openapi.generator&#39;</span> version <span style="color:#e6db74">&#39;4.3.1&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>openApiGenerate <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    generatorName <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;spring&#39;</span>
</span></span><span style="display:flex;"><span>    inputSpec <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span>$rootDir<span style="color:#e6db74">/src/main/resources/swagger/api.yml&#34;</span>.toString<span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    outputDir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span>$buildDir<span style="color:#e6db74">/openapi&#34;</span>.toString<span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    apiPackage <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;com.vroong.msabootcamp.api&#39;</span>
</span></span><span style="display:flex;"><span>    modelPackage <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;com.vroong.msabootcamp.api.model&#39;</span>
</span></span><span style="display:flex;"><span>    modelNameSuffix <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Dto&#34;</span>
</span></span><span style="display:flex;"><span>    apiFilesConstrainedTo <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    modelFilesConstrainedTo <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    supportingFilesConstrainedTo <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;ApiUtil.java&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    configOptions <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>            delegatePattern: <span style="color:#e6db74">&#34;true&#34;</span>,
</span></span><span style="display:flex;"><span>            title: <span style="color:#e6db74">&#34;msabootcamp&#34;</span>,
</span></span><span style="display:flex;"><span>            useTags: <span style="color:#e6db74">&#34;true&#34;</span>,
</span></span><span style="display:flex;"><span>            dateLibrary: <span style="color:#e6db74">&#34;java8&#34;</span>,
</span></span><span style="display:flex;"><span>            java8: <span style="color:#e6db74">&#34;true&#34;</span>,
</span></span><span style="display:flex;"><span>            hideGenerationTimestamp: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    validateSpec <span style="color:#f92672">=</span> true
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sourceSets <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    main <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        java <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            srcDir file<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>project.buildDir.path<span style="color:#e6db74">}</span><span style="color:#e6db74">/openapi/src/main/java&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./gradlew openApiGenerate
</span></span></code></pre></div><ul>
<li>Stub을 생성하면 아래의 파일이 생성된다.
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/3.png" alt="3"  />

<ul>
<li>model에는 OAS에서 정의한 schema를 가진 DTO가 있다.</li>
</ul>
</li>
</ul>
</li>
<li>
<p>클라이언트 SDK 빌드 및 배포</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./gradlew :clients:clean :clients:publish -Dorg.gradle.internal.publish.checksums.insecure<span style="color:#f92672">=</span>true
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 배포 결과는 https://nexus.mm.meshkorea.net/ 에서 확인할 수 있습니다.</span>
</span></span></code></pre></div><h2 id="4-controller-작성">4. Controller 작성</h2>
<ul>
<li>
<p>서버 코드 스켈레톤을 이용해서 controller를 구현한다.
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/4.png" alt="4"  />
</p>
</li>
<li>
<p>SingerApi</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * https://openapi-generator.tech
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Do not edit the class manually.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@javax.annotation.Generated</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;org.openapitools.codegen.languages.SpringCodegen&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Validated</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Api</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Singer&#34;</span><span style="color:#f92672">,</span> description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;the Singer API&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">SingerApi</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> SingerApiDelegate <span style="color:#a6e22e">getDelegate</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SingerApiDelegate<span style="color:#f92672">()</span> <span style="color:#f92672">{};</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * POST /api/singers
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * create an singer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param createSingerRequestDto singer model (optional)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @return Created (status code 201)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Bad Request (status code 400)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Unauthorized (status code 401)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Forbidden (status code 403)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Internal Server Error (status code 500)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@ApiOperation</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">,</span> nickname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;createSinger&#34;</span><span style="color:#f92672">,</span> notes <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;create an singer&#34;</span><span style="color:#f92672">,</span> authorizations <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@Authorization</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;jhipster-uaa&#34;</span><span style="color:#f92672">,</span> scopes <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">}),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@Authorization</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;jhipster-uaa&#34;</span><span style="color:#f92672">,</span> scopes <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">},</span> tags<span style="color:#f92672">={</span> <span style="color:#e6db74">&#34;Singer&#34;</span><span style="color:#f92672">,</span> <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@ApiResponses</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">201</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Created&#34;</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">400</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Bad Request&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">401</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Unauthorized&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">403</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Forbidden&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@ApiResponse</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span><span style="color:#f92672">,</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Internal Server Error&#34;</span><span style="color:#f92672">,</span> response <span style="color:#f92672">=</span> ProblemDetailsDto<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span> <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@RequestMapping</span><span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>        method <span style="color:#f92672">=</span> RequestMethod<span style="color:#f92672">.</span><span style="color:#a6e22e">POST</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>        value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/api/singers&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>        produces <span style="color:#f92672">=</span> <span style="color:#f92672">{</span> <span style="color:#e6db74">&#34;application/problem+json&#34;</span> <span style="color:#f92672">},</span>
</span></span><span style="display:flex;"><span>        consumes <span style="color:#f92672">=</span> <span style="color:#f92672">{</span> <span style="color:#e6db74">&#34;application/vnd.vroong.private.v1+json&#34;</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> ResponseEntity<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@ApiParam</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;singer model&#34;</span><span style="color:#f92672">)</span> <span style="color:#a6e22e">@Valid</span> <span style="color:#a6e22e">@RequestBody</span><span style="color:#f92672">(</span>required <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span> CreateSingerRequestDto createSingerRequestDto<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> getDelegate<span style="color:#f92672">().</span><span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>createSingerRequestDto<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>SingerApiController</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@javax.annotation.Generated</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;org.openapitools.codegen.languages.SpringCodegen&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Controller</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@RequestMapping</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;${openapi.msabootcamp.base-path:}&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SingerApiController</span> <span style="color:#66d9ef">implements</span> SingerApi <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> SingerApiDelegate delegate<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">SingerApiController</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@org.springframework.beans.factory.annotation.Autowired</span><span style="color:#f92672">(</span>required <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span> SingerApiDelegate delegate<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">delegate</span> <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">ofNullable</span><span style="color:#f92672">(</span>delegate<span style="color:#f92672">).</span><span style="color:#a6e22e">orElse</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> SingerApiDelegate<span style="color:#f92672">()</span> <span style="color:#f92672">{});</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> SingerApiDelegate <span style="color:#a6e22e">getDelegate</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> delegate<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>SingerApiDelegate</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * A delegate to be called by the {@link SingerApiController}}.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Implement this interface with a {@link org.springframework.stereotype.Service} annotated class.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@javax.annotation.Generated</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;org.openapitools.codegen.languages.SpringCodegen&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">SingerApiDelegate</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> Optional<span style="color:#f92672">&lt;</span>NativeWebRequest<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getRequest</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * POST /api/singers
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * create an singer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param createSingerRequestDto singer model (optional)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @return Created (status code 201)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Bad Request (status code 400)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Unauthorized (status code 401)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Forbidden (status code 403)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         or Internal Server Error (status code 500)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @see SingerApi#createSinger
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span> ResponseEntity<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>CreateSingerRequestDto createSingerRequestDto<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> ResponseEntity<span style="color:#f92672">&lt;&gt;(</span>HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">NOT_IMPLEMENTED</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>SingerApiDeleateImpl</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@RequiredArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SingerApiDelegateImpl</span> <span style="color:#66d9ef">implements</span> SingerApiDelegate <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> SingerService singerService<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> ResponseEntity<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>CreateSingerRequestDto createSingerRequestDto<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    SingerDto singerDto <span style="color:#f92672">=</span> singerService<span style="color:#f92672">.</span><span style="color:#a6e22e">createSinger</span><span style="color:#f92672">(</span>createSingerRequestDto<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ResponseEntity
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">created</span><span style="color:#f92672">(</span>HeaderUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">uri</span><span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>singerDto<span style="color:#f92672">.</span><span style="color:#a6e22e">getSingerId</span><span style="color:#f92672">())))</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="5-messaging">5. Messaging</h2>
<ul>
<li>이벤트 메세지 또는 커맨드 메세지를 이용하여 상호간에 통신하는 방식</li>
</ul>
<h3 id="이벤트">이벤트</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/5.png" alt="5"  />
</p>
<ul>
<li>이미 일어난 정보에 대한 메세지이다.</li>
<li>immutable 하다.</li>
<li>producer는 이벤트의 comsumer가 누구인지, 무엇을 하는지 모른다.</li>
<li>ex)
<ul>
<li>신규 물품이 입고되었을 때 필요한 시스템만 이벤트를 구독한다.</li>
<li>신규 물품이 입고된 것은 이미 일어난 사건이다.</li>
</ul>
</li>
</ul>
<h3 id="커맨드">커맨드</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/6.png" alt="6"  />
</p>
<ul>
<li>수행할 작업에 대한 하나의 시스템에서 다른 시스템으로의 메세지</li>
<li>미래에 발생할 사건의 트리거가 된다.</li>
</ul>
<h3 id="메시징을-사용하는-이유">메시징을 사용하는 이유</h3>
<ul>
<li>REST API는 클라이언트가 요청하는 시점에 서버가 항상 가용해야 하는 문제가 있다.</li>
<li>REST와 같은 동기 IPC (Inter Process Communication) 문제점을 해결하고자 비동기 메시징을 사용한다.</li>
<li>메시지 브로커가 가용하다면 consumer의 장애 시점에도 producer가 발행한 메시지는 메시지 브로커에 적재되며, consumer가 장애에서 복구되면 메시지를 소비할 수 있다.</li>
</ul>
<h3 id="transactional-outbox-pattern">Transactional Outbox Pattern</h3>
<ul>
<li>메시징을 통해 데이터를 처리할 때 데이터의 일관성을 처리하기 위해 사용한다.</li>
<li>producer 역할을 하는 서비스에서 발생한 도메인 이벤트/메시지는 적어도 한번(at least once) 발행해야 한다.</li>
<li>방법
<ol>
<li>producer 역할을 하는 서비스에 OUTBOX 테이블을 생성하고, 도메인 이벤트/메시지를 트랜잭션 범위안에서 OUTBOX 테이블에 insert한다.</li>
<li>별도의 MessageRelay가 주기적으로 OUTBOX 테이블에 있는 메세지를 발행한다.
<ul>
<li>MessageRelay는 polling publisher로 구현할 수 있다.
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/7.png" alt="transactional-outbox-pattern.png"  />
</li>
</ul>
</li>
</ol>
</li>
<li>데이터베이스 트랜잭션이 커밋된 경우에만 MessageRelay를 통해서 메시지를 발행한다.</li>
<li>MessageRelay를 통하기 때문에 메세지 발행에 시차는 생기지만, Eventual Consistency를 유지한다.</li>
</ul>
<h3 id="멱등-수신자-idempotent-receiver">멱등 수신자 (Idempotent Receiver)</h3>
<ul>
<li>consumer 역할을 하는 서비스는 동일한 메시지를 중복으로 여러번 수신할 수 있으므로, 중복 메시지로 인한 사이드 이펙트가 발생하지 않도록 멱등 수신자를 구현해야 한다.</li>
<li>방법
<ol>
<li>PROCESSED_MESSAGE 테이블을 추가한다.</li>
<li>메세지를 수신하면 식별자를 이용해서 테이블에서 조회한다.</li>
<li>테이블에서 조회된다면 메세지를 무시한다.</li>
<li>조회되지 않는 메세지면 PROCESSED_MESSAGE에 저장하고 처리한다.</li>
</ol>
<ul>
<li>(메세지 식별자에 unique 제약조건을 걸어서 구분할 수도 있다.)
<img loading="lazy" src="/images/notes/msa-stack-quick-peek/8.png" alt="idempotent-receiver.png"  />
</li>
</ul>
</li>
</ul>
<h3 id="kafka-코드">Kafka 코드</h3>
<ul>
<li>
<p>application.yml</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">spring</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">cloud</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">stream</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kafka</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">binder</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">headers</span>:
</span></span><span style="display:flex;"><span>            [<span style="color:#e6db74">&#34;messageId&#34;</span>, <span style="color:#e6db74">&#34;messageType&#34;</span>, <span style="color:#e6db74">&#34;messageVersion&#34;</span>, <span style="color:#e6db74">&#34;messageSource&#34;</span>]
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">auto-create-topics</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># Kafka - SASL_SSL설정과 SCRAM-SHA-512 를 이용한 ID Password 설정</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># @see https://wiki.mm.meshkorea.net/pages/viewpage.action?pageId=95856174</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">configuration</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">sasl</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">jaas</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">config</span>: <span style="color:#e6db74">&#39;org.apache.kafka.common.security.plain.PlainLoginModule required username=&#34;alice&#34; password=&#34;alice-secret&#34;;&#39;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">mechanism</span>: <span style="color:#ae81ff">PLAIN</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">security</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">SASL_PLAINTEXT</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bindings</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">messageChannel</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">binder</span>: <span style="color:#ae81ff">kafka</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">destination</span>: <span style="color:#ae81ff">local-msabootcamp-output</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">producer</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># @see https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/3.0.10.RELEASE/reference/html/spring-cloud-stream-binder-kafka.html#kafka-producer-properties</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">header-mode</span>: <span style="color:#ae81ff">headers</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">partition-key-expression</span>: <span style="color:#ae81ff">headers[&#39;partitionKey&#39;]</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">partition-count</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">subscribableChannel</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">binder</span>: <span style="color:#ae81ff">kafka</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">destination</span>: <span style="color:#ae81ff">local-msabootcamp-output</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">content-type</span>: <span style="color:#ae81ff">application/json</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">consumer</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">header-mode</span>: <span style="color:#ae81ff">embeddedHeaders</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">checkpointMode</span>: <span style="color:#ae81ff">record</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">default-binder</span>: <span style="color:#ae81ff">kafka</span>
</span></span></code></pre></div><ul>
<li><code>spring.cloud.stream.kafka.binder</code> 를 이용해서 <code>KafkaBinderConfigurationProperties.class</code> 의 값을 세팅</li>
</ul>
</li>
<li>
<p>PersistentEventCreator.class</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersistentEventCreator</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> PersistentEventRepository repository<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> ObjectMapper objectMapper<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Transactional</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">create</span><span style="color:#f92672">(</span>String eventType<span style="color:#f92672">,</span> Object source<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    String body <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      body <span style="color:#f92672">=</span> objectMapper<span style="color:#f92672">.</span><span style="color:#a6e22e">writeValueAsString</span><span style="color:#f92672">(</span>source<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>IOException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      log<span style="color:#f92672">.</span><span style="color:#a6e22e">error</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Serialization failed&#34;</span><span style="color:#f92672">,</span> e<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">final</span> PersistentEvent entity <span style="color:#f92672">=</span> PersistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">newInstance</span><span style="color:#f92672">(</span>eventType<span style="color:#f92672">,</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">(),</span> body<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    repository<span style="color:#f92672">.</span><span style="color:#a6e22e">save</span><span style="color:#f92672">(</span>entity<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>PersistentEventPublisher.class - publish()</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Transactional</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Scheduled</span><span style="color:#f92672">(</span>fixedDelayString <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;PT50S&#34;</span><span style="color:#f92672">,</span> initialDelayString <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;PT10S&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SchedulerLock</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;PersistentEventPublisher&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Async</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">publish</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> Instant timeScope <span style="color:#f92672">=</span> Instant<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">(</span>Clock<span style="color:#f92672">.</span><span style="color:#a6e22e">system</span><span style="color:#f92672">(</span>ZONE_ID<span style="color:#f92672">)).</span><span style="color:#a6e22e">minus</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> ChronoUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">MINUTES</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  List<span style="color:#f92672">&lt;</span>PersistentEvent<span style="color:#f92672">&gt;</span> candidates <span style="color:#f92672">=</span> repository<span style="color:#f92672">.</span><span style="color:#a6e22e">findUnproducedByTimeScope</span><span style="color:#f92672">(</span>timeScope<span style="color:#f92672">);</span> <span style="color:#75715e">// OUTBOX 조회
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>candidates<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  writeLog<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;started&#34;</span><span style="color:#f92672">,</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;total&#34;</span><span style="color:#f92672">,</span> candidates<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> success <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>PersistentEvent candidate <span style="color:#f92672">:</span> candidates<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">boolean</span> produced <span style="color:#f92672">=</span> producer<span style="color:#f92672">.</span><span style="color:#a6e22e">produce</span><span style="color:#f92672">(</span>candidate<span style="color:#f92672">);</span> <span style="color:#75715e">// produce
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>produced<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">markProduced</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        success<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>        writeLog<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;handling&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>            kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;persistentEventId&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">()),</span>
</span></span><span style="display:flex;"><span>            kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;eventType&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventType</span><span style="color:#f92672">()),</span>
</span></span><span style="display:flex;"><span>            kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;eventId&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventId</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RuntimeException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Message was not produced&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">markFailed</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>      reportError<span style="color:#f92672">(</span>e<span style="color:#f92672">,</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;persistentEventId&#34;</span><span style="color:#f92672">,</span> candidate<span style="color:#f92672">.</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  writeLog<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;success&#34;</span><span style="color:#f92672">,</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;success&#34;</span><span style="color:#f92672">,</span> success<span style="color:#f92672">),</span> kv<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;total&#34;</span><span style="color:#f92672">,</span> candidates<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>MessageProducer.class</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MessageProducer</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> MessageChannel messageChannel<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">produce</span><span style="color:#f92672">(</span>PersistentEvent persistentEvent<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">final</span> String body <span style="color:#f92672">=</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBody</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    Message<span style="color:#f92672">&lt;?&gt;</span> message <span style="color:#f92672">=</span> MessageBuilder
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">withPayload</span><span style="color:#f92672">(</span>body<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">ID</span><span style="color:#f92672">,</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventId</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">TYPE</span><span style="color:#f92672">,</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getEventType</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">VERSION</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">SOURCE</span><span style="color:#f92672">,</span> PROJECT_NAME<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">RESOURCE</span><span style="color:#f92672">,</span> body<span style="color:#f92672">.</span><span style="color:#a6e22e">getClass</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getSimpleName</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>MessageKey<span style="color:#f92672">.</span><span style="color:#a6e22e">PARTITION_KEY</span><span style="color:#f92672">,</span> persistentEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">getPartitionKey</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Event publish: {}&#34;</span><span style="color:#f92672">,</span> message<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> messageChannel<span style="color:#f92672">.</span><span style="color:#a6e22e">send</span><span style="color:#f92672">(</span>message<span style="color:#f92672">,</span> MessagePolicy<span style="color:#f92672">.</span><span style="color:#a6e22e">DEFAULT_TIMEOUT</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>MessageSubscriber.class</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MessageSubscriber</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> ReceivedEventRepository receivedEventRepository<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@StreamListener</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> ConsumerChannel<span style="color:#f92672">.</span><span style="color:#a6e22e">CHANNEL</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">subscribe</span><span style="color:#f92672">(</span>Message<span style="color:#f92672">&lt;</span>Album<span style="color:#f92672">&gt;</span> event<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    UUID messageId <span style="color:#f92672">=</span> event<span style="color:#f92672">.</span><span style="color:#a6e22e">getHeaders</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    Optional<span style="color:#f92672">&lt;</span>ReceivedEvent<span style="color:#f92672">&gt;</span> receivedEvent <span style="color:#f92672">=</span> receivedEventRepository<span style="color:#f92672">.</span><span style="color:#a6e22e">findByMessageId</span><span style="color:#f92672">(</span>messageId<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>receivedEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">isPresent</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Duplicated event: {}&#34;</span><span style="color:#f92672">,</span> receivedEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getMessageId</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    receivedEventRepository<span style="color:#f92672">.</span><span style="color:#a6e22e">save</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> ReceivedEvent<span style="color:#f92672">(</span>event<span style="color:#f92672">.</span><span style="color:#a6e22e">getHeaders</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Event received: {}&#34;</span><span style="color:#f92672">,</span> event<span style="color:#f92672">.</span><span style="color:#a6e22e">getPayload</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="전체-흐름">전체 흐름</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/9.png" alt="messaging-sequence.png"  />
</p>
<h2 id="6-cicd">6. CI/CD</h2>
<h3 id="cicd란">CI/CD란</h3>
<ul>
<li>CI (Continuous Integration): 애플리케이션의 소스 변경 사항이 지속적으로 빌드 및 테스트되어 공유 리포지토리에 통합되는 것이다.</li>
<li>CD (Continuous Delivery/Deployment): 변경 사항을 테스트 또는 프로덕션 환경에 지속적으로 배포하는 것이다.</li>
</ul>
<h3 id="jenkinsfile">Jenkinsfile</h3>
<ul>
<li>
<p>jenkins는 CI 도구이다.</p>
<ul>
<li>빌드 → 테스트 → 코드 분석 → 도커 이미지 빌드 → helm chart 빌드</li>
<li>위 과정을 파이프라인으로 자동화 해준다.</li>
</ul>
</li>
<li>
<p>파이프라인은 Job들을 순차적 또는 병렬적으로 실행시키거나 작성한 스크립드로 이벤트를 연속적으로 실행시키는 것이다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>@<span style="color:#ae81ff">Library(&#39;meshkorea&#39;) _</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">vroongNeoMsaJavaPipeline(</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">team</span>: <span style="color:#e6db74">&#39;&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ecrRepoName</span>: <span style="color:#e6db74">&#39;vroong/msabootcamp&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">argoAppName</span>: <span style="color:#e6db74">&#39;vroong-msabootcamp&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">gradleBuildArguments</span>: <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">)</span>
</span></span></code></pre></div><ul>
<li>team: 슬랙 {team}-build-alerts 채널에 관련 alert를 발생시킨다.</li>
<li>ecrRepoName: Jenkins에서 도커 빌드 후 push할 ECR 이름</li>
<li>argoAppName: argoCD 앱 이름</li>
<li>gradleBuildArguments: jar 파일 빌드시 뒤에 추가할 argument</li>
</ul>
</li>
<li>
<p>Jenkins 파이프라인 적용 방법</p>
<ul>
<li>리포지토리 root에 Jenkinsfile이 있어야만 파이프라인이 실행된다.</li>
<li>github push, PR, merge 와 같은 이벤트 발생시 파이프라인이 구동된다.</li>
<li>도커 이미지 tag는 파이프라인에 도커 빌드 과정에서 {tag}-{commit hash} 형태로 빌드 후 ECR에 push된다.
<ul>
<li>tag가 example이고, commit hash가 2d48cj3a인 경우 도커 이미지 tag는 example-2d48cj3a이다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="helm-values">Helm values</h3>
<ul>
<li>Helm은 K8S 패키지 관리를 도와주는 패키지 매니저이다.
<ul>
<li>ex) dev와 qa, prod 환경의 DB 주소가 다르다면 이를 관리해 주는 것이다.</li>
</ul>
</li>
<li>vroong-{appname}-helm-values 리포지토리 에 필요한 환경 변수 추가
<ul>
<li>위 리포지토리를 보면 다음과 같은 구조가 있다.
<ul>
<li>dev1</li>
<li>prod</li>
<li>qa1 ~ 4</li>
<li>values.yaml</li>
</ul>
</li>
<li>argoCD에서 helm values를 배포하면 K8S 서비스, deployment(replica set, pod), 서비스 account, config map 등의 리소스를 만들어준다.</li>
</ul>
</li>
<li>values.yaml
<ul>
<li>모든 환경에 동일하게 적용되어야 하는 내용이 선언되어 있다.</li>
<li>각 환경 별로 values.yaml 파일이 또 있다.
<ul>
<li>각 환경 별로 바인딩 되어야 하는 환경 변수를 선언한다.</li>
<li>override하고 싶은 내용을 선언한다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="빌드-및-배포-과정">빌드 및 배포 과정</h3>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/10.png" alt="10"  />
</p>
<ol>
<li>Start</li>
<li>Init
<ul>
<li>저장소 checkout 후, commit hash를 구한다.</li>
<li>슬랙에 파이프라인 구동 메세지를 보낸다.</li>
<li>Jenkinsfile에 작성한 값을 읽어낸다.</li>
</ul>
</li>
<li>Check the docker image
<ul>
<li>ECR에 같은 tag를 가진 이미지가 있는지 확인한다.</li>
</ul>
</li>
<li>Gradle build
<ul>
<li>nexus에 접근하기 위한 계정 정보를 복사한다.</li>
<li>jar 파일을 빌드한다.</li>
</ul>
</li>
<li>code review / unit test
<ul>
<li>sonarqube로 코드 리뷰를 하고 unit 테스트를 수행한다.</li>
</ul>
</li>
<li>Docker / ECR login
<ul>
<li>도커 이미지를 빌드하고 tag를 붙인다.</li>
<li>ECR에 login한다.</li>
</ul>
</li>
<li>ECR push
<ul>
<li>ECR에 도커 이미지를 push한다.</li>
</ul>
</li>
<li>ArgoCD trigger
<ul>
<li>argoCD에 login한다.</li>
<li>슬랙에 빌드 완료 메세지를 보낸다.</li>
</ul>
</li>
<li>End</li>
</ol>
<p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/11.png" alt="11"  />
</p>
<ol>
<li>
<p>Jenkins 과정을 거친 후 APP DIFF 버튼을 눌러, helm values 변경 사항을 확인한다.</p>
</li>
<li>
<p>변경 사항에 이상이 없으면 SYNC 버튼을 누른다.</p>
</li>
<li>
<p>pod가 잘 교체 되는지 확인한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>k9s
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/<span style="color:#f92672">{</span>서비스 이름으로 검색<span style="color:#f92672">}</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/notes/msa-stack-quick-peek/12.png" alt="12"  />
</p>
<ul>
<li>상단 Context에서 현재 환경을 확인할 수 있다.</li>
<li>새로운 pod가 실행된 후 완료되면 기존 pod를 교체한다.</li>
</ul>
</li>
<li>
<p>모니터링한다.</p>
</li>
</ol>
<h2 id="7-uaa">7. UAA</h2>
<ul>
<li>
<p>User Account and Authentication</p>
</li>
<li>
<p>MSA Resource 서버를 보호하기 위한 Authorization Server</p>
</li>
<li>
<p>OAuth2 (Open Authorization) 방식</p>
<ul>
<li>Authorization Code Grant Type</li>
<li>Resource Owner Password Grant type</li>
<li>Client Credentials Grant Type</li>
</ul>
</li>
<li>
<p>Client Credentials Grant Type Flow
<a href="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAGn3b%2FbtqVyURyeZN%2F77J24Xr2Y3aAIZyLUsQZg1%2Fimg.png">https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAGn3b%2FbtqVyURyeZN%2F77J24Xr2Y3aAIZyLUsQZg1%2Fimg.png</a></p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">security</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">oauth2</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">client</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">access-token-uri</span>: <span style="color:#ae81ff">http://localhost:9999/oauth/token</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">user-authorization-uri</span>: <span style="color:#ae81ff">http://localhost:9999/oauth/token</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">client-id</span>: <span style="color:#ae81ff">internal</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">client-secret</span>: <span style="color:#ae81ff">internal</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">scope</span>: <span style="color:#ae81ff">web-app</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">grant-type</span>: <span style="color:#ae81ff">client_credentials</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">authorized-grant-type</span>: <span style="color:#ae81ff">password, client_credentials, refresh_token</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resource</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">jwt.key-uri</span>: <span style="color:#ae81ff">http://localhost:9999/oauth/token_key</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>Avro schema</title><link>https://jo-minjun.github.io/notes/avro-schema/</link><pubDate>Sat, 02 Jul 2022 18:12:21 +0900</pubDate><guid>https://jo-minjun.github.io/notes/avro-schema/</guid><description>1. Avro 란? 아브로(Avro)는 아파치의 하둡 프로젝트에서 개발된 RPC 및 데이터 직렬화 프레임워크이다.
schema를 json으로 정의하여 바이너리 포맷으로 직렬화 한다.
2. 장점 데이터의 타입을 알 수 있다. 스키마가 직렬화되어 네트워크 통신에 자유롭다. 스키마에 설명이 포함되어 schema 구조를 이해하는데 도움을 준다. 다양한 language를 지원한다. (java, c, c++ 등) default 값을 정의할 수 있다. 3. Data Type 이름 태그 null no value boolean a binary value int 32bit signed integer long 62bit signed integer float single precision(단정밀도) 32bit floating-point number double double percision(배정밀도) 64bit floating-point number bytes sequence of 8-bit unsigned bytes string unicode character sequence Enums name, namespace, aliases, doc, symbols, default 등을 가진다.</description><content:encoded><![CDATA[<h2 id="1-avro-란">1. Avro 란?</h2>
<p>아브로(Avro)는 아파치의 하둡 프로젝트에서 개발된 RPC 및 데이터 직렬화 프레임워크이다.<br>
schema를 json으로 정의하여 바이너리 포맷으로 직렬화 한다.</p>
<h2 id="2-장점">2. 장점</h2>
<ol>
<li>데이터의 타입을 알 수 있다.</li>
<li>스키마가 직렬화되어 네트워크 통신에 자유롭다.</li>
<li>스키마에 설명이 포함되어 schema 구조를 이해하는데 도움을 준다.</li>
<li>다양한 language를 지원한다. (java, c, c++ 등)</li>
<li>default 값을 정의할 수 있다.</li>
</ol>
<h2 id="3-data-type">3. Data Type</h2>
<table>
<thead>
<tr>
<th>이름</th>
<th>태그</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>null</code></td>
<td>no value</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td>a binary value</td>
</tr>
<tr>
<td><code>int</code></td>
<td>32bit signed integer</td>
</tr>
<tr>
<td><code>long</code></td>
<td>62bit signed integer</td>
</tr>
<tr>
<td><code>float</code></td>
<td>single precision(단정밀도) 32bit floating-point number</td>
</tr>
<tr>
<td><code>double</code></td>
<td>double percision(배정밀도) 64bit floating-point number</td>
</tr>
<tr>
<td><code>bytes</code></td>
<td>sequence of 8-bit unsigned bytes</td>
</tr>
<tr>
<td><code>string</code></td>
<td>unicode character sequence</td>
</tr>
</tbody>
</table>
<h3 id="enums">Enums</h3>
<p>name, namespace, aliases, doc, symbols, default 등을 가진다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;enum&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Suit&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;symbols&#34;</span>: [<span style="color:#e6db74">&#34;SPADES&#34;</span>, <span style="color:#e6db74">&#34;HEARTS&#34;</span>, <span style="color:#e6db74">&#34;DIAMONDS&#34;</span>, <span style="color:#e6db74">&#34;CLUBS&#34;</span>]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="arrays">Arrays</h3>
<p>items를 가진다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;array&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;items&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;default&#34;</span>: []
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="maps">Maps</h3>
<p>values를 가진다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;map&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;values&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;default&#34;</span>: {}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="unions">Unions</h3>
<p>string, int, boolean 등과 같은 여러개의 서로 다른 타입을 가짐으로써 선택적인 값을 저장할 수 있도록 한다.</p>
<h2 id="4-schema-필드">4. Schema 필드</h2>
<table>
<thead>
<tr>
<th>이름</th>
<th>태그</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>json을 지원하는 스키마의 이름</td>
</tr>
<tr>
<td>namespace</td>
<td>name을 구별하는 패키지</td>
</tr>
<tr>
<td>doc</td>
<td>스키마를 설명하는 doc</td>
</tr>
<tr>
<td>aliases</td>
<td>name의 별칭</td>
</tr>
<tr>
<td>fields</td>
<td>name, doc, type, default, order, aliases 등을 가지는 json type object</td>
</tr>
</tbody>
</table>
<h2 id="5-avro-schema-예시">5. Avro Schema 예시</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;record&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;LongList&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;aliases&#34;</span>: [<span style="color:#e6db74">&#34;LinkedLongs&#34;</span>], <span style="color:#75715e">// old name for this
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">&#34;fields&#34;</span>: [
</span></span><span style="display:flex;"><span>    { <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;value&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span> }, <span style="color:#75715e">// each element has a long
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    { <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;next&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: [<span style="color:#e6db74">&#34;null&#34;</span>, <span style="color:#e6db74">&#34;LongList&#34;</span>] } <span style="color:#75715e">// optional next element
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;record&#34;</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#34;namespace&#34;</span> : <span style="color:#e6db74">&#34;tutorialspoint&#34;</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#34;name&#34;</span> : <span style="color:#e6db74">&#34;empdetails &#34;</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#34;fields&#34;</span> :
</span></span><span style="display:flex;"><span>   [
</span></span><span style="display:flex;"><span>      { <span style="color:#f92672">&#34;name&#34;</span> : <span style="color:#e6db74">&#34;experience&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: [<span style="color:#e6db74">&#34;int&#34;</span>, <span style="color:#e6db74">&#34;null&#34;</span>] },
</span></span><span style="display:flex;"><span>      { <span style="color:#f92672">&#34;name&#34;</span> : <span style="color:#e6db74">&#34;age&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;int&#34;</span> }
</span></span><span style="display:flex;"><span>      {<span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;additional&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: {<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;map&#34;</span>, <span style="color:#f92672">&#34;values&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>}}
</span></span><span style="display:flex;"><span>   ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content:encoded></item><item><title>Schema registry란?</title><link>https://jo-minjun.github.io/notes/schema-registry/</link><pubDate>Fri, 01 Jul 2022 21:42:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/schema-registry/</guid><description>1. Schema registry 란? 데이터 관리의 중요한 관점들 중 하나는 schema의 버전 관리이다. 응용프로그램의 시간이 지날수록 schema가 정의되기 시작한 시점부터 schema는 점점 바뀌어가고, producer와 consumer는 직접적인 관계가 끊어져있기 때문에 운영상에 발생하는 이슈가 있다.
producer는 consumer가 어떤 메세지를 소비할지 알 수 없다.
consumer는 producer가 어떤 메세지를 생산했는지 알 수 없다.
위와 같은 상황에서 producer가 갑자기 다른 schema를 이용해서 메세지를 생산할 경우, consumer는 이 메세지에 대해서 대처하지 못할 수 있다.
이는 구조적인 결합도는 낮지만, 메세지 schema에 대한 의존성이 높기 때문인데, schema registry는 이를 보완하기 위해 고안되었다.</description><content:encoded><![CDATA[<h2 id="1-schema-registry-란">1. Schema registry 란?</h2>
<p>데이터 관리의 중요한 관점들 중 하나는 schema의 버전 관리이다.
응용프로그램의 시간이 지날수록 schema가 정의되기 시작한 시점부터 schema는 점점 바뀌어가고,
producer와 consumer는 직접적인 관계가 끊어져있기 때문에 운영상에 발생하는 이슈가 있다.</p>
<blockquote>
<p>producer는 consumer가 어떤 메세지를 소비할지 알 수 없다.<br>
consumer는 producer가 어떤 메세지를 생산했는지 알 수 없다.</p>
</blockquote>
<p>위와 같은 상황에서 producer가 갑자기 다른 schema를 이용해서 메세지를 생산할 경우, consumer는 이 메세지에 대해서 대처하지 못할 수 있다.</p>
<p>이는 구조적인 결합도는 낮지만, 메세지 schema에 대한 의존성이 높기 때문인데,
schema registry는 이를 보완하기 위해 고안되었다.</p>
<p>Confluent Schema registry는 Avro, Json, Protobuf 등의 schema 정보의 history를 subjects를 통해 관리하며, REST API를 통해 <strong>compatibility settings</strong>을 결정하고 현재 버전과 이전 버전간의 호환성을 지원한다.</p>
<p><img loading="lazy" src="/images/notes/schema-registry/schema-registry-kafka.png" alt="schema-registry-kafka.png"  />
</p>
<p>Schema registry는 kafka boroker와 독립적으로 존재하며, producer와 consumer는 kafka broker와 읽고 쓰는 동안 Schema registry와 동작하며 데이터 모델을 확인할 수 있다.</p>
<h2 id="2-schemas-subjects-and-topics-란">2. Schemas, Subjects and Topics 란?</h2>
<p>topic은 kafka의 topic을, schema는 Avro, Json, Protobuf 등으로 정의된 데이터 포맷 구조를 의미한다.</p>
<p>Subject는 Schema registry에 schema가 등록된 이름이며, 여러 버전의 schema가 등록될 수 있다.</p>
<p>따라서 Subject를 통해 계속해서 Schema의 정보를 관리할 수 있고, 새로운 버전의 Schema ID와 버전을 확인할 수 있다.</p>
<p><img loading="lazy" src="/images/notes/schema-registry/schema-subject-topic.png" alt="schema registry.png"  />
</p>
<ul>
<li>kafka topic은 메세지가 포함되어 있으며, 각 메세지는 key - value 쌍으로 되어있으며
메세지의 key와 value는 Avro, Json, Protobuf 등으로 직렬화할 수 있다.</li>
<li>Schema는 데이터 포맷의 구조를 정의한다.</li>
<li>kafka의 topic 이름은 schema의 이름과 의존적이지 않다.</li>
<li>Schema의 ID는 전역적이다.</li>
</ul>
<h2 id="3-compatibility-settings-란">3. Compatibility settings 란?</h2>
<p>schema compatibility checking는 모든 schema를 버전화해서 schema registry compatibility type에 의해서 구현된다.</p>
<p>즉, 아래의 schema 전략에 의한 패턴으로 호환성을 유지하게 된다.</p>
<table>
<thead>
<tr>
<th>Compatibility type</th>
<th>허가되는 변경</th>
<th>비교하는 schema</th>
<th>upgrade 순서</th>
</tr>
</thead>
<tbody>
<tr>
<td>BACKWARD</td>
<td>- 필드 삭제<!-- raw HTML omitted -->- Optional 필드 추가</td>
<td>마지막 버전</td>
<td>Consumers</td>
</tr>
<tr>
<td>BACKWARD_TRANSITIVE</td>
<td>- 필드 삭제<!-- raw HTML omitted -->- Optional 필드 추가</td>
<td>모든 이전 버전</td>
<td>Consumers</td>
</tr>
<tr>
<td>FORWARD</td>
<td>- 필드 추가<!-- raw HTML omitted -->- Optional 필드 삭제</td>
<td>마지막 버전</td>
<td>Producers</td>
</tr>
<tr>
<td>FORWARD_TRANSITIVE</td>
<td>- 필드 추가<!-- raw HTML omitted -->- Optional 필드 삭제</td>
<td>모든 이전 버전</td>
<td>Producers</td>
</tr>
<tr>
<td>FULL</td>
<td>- Optional 필드 추가<!-- raw HTML omitted -->- Optional 필드 삭제</td>
<td>마지막 버전</td>
<td>Any order</td>
</tr>
<tr>
<td>FULL_TRANSITIVE</td>
<td>- Optional 필드 추가<!-- raw HTML omitted -->- Optional 필드 삭제</td>
<td>모든 이전 버전</td>
<td>Any order</td>
</tr>
<tr>
<td>NONE</td>
<td>모든 변경 허용</td>
<td>비교하지 않음</td>
<td>Depends</td>
</tr>
</tbody>
</table>
<ul>
<li><code>BACKWARD</code>: (<em>default</em>) consumer가 새로운 스키마를 사용하여 producer가 마지막 버전의 스키마로 생성한 메세지를 읽을 수 있다.
(새로운 스키마로 이전 스키마 메세지를 읽는다.)
(새로운 스키마 필드에 default value가 없으면 오류가 발생한다.)</li>
<li><code>BACKWARD_TRANSITIVE</code>: consumer가 새로운 스키마를 사용하여 producer가 모든 마지막 버전 스키마로 생성한 메세지를 읽을 수 있다.</li>
<li><code>FORWARD</code>: consumer가 마지막 버전의 스키마를 사용하여 producer가 새로운 스키마로 생성한 메세지를 읽을 수 있다.
(이전 스키마로 새로운 스키마 데이터를 읽는다.)
(새로운 스키마에서 필드가 삭제되면, 이전 스키마에 default value가 있어야 한다.)</li>
<li><code>FORWARD_TRANSITIVE</code>: consumer가 모든 마지막 버전의 스키마를 사용하여 producer가 새로운 스키마로 생성한 메세지를 읽을 수 있다.</li>
<li><code>FULL</code>: <code>BACKWARD</code> 와 <code>FORWARD</code> 를 모두 만족한다.</li>
<li><code>FULL_TRANSITIVE</code>: <code>BACKWARD_TRANSITIVE</code> 와 <code>FORWARD_TRANSITIVE</code> 를 모두 만족한다.</li>
<li><code>NONE</code>: schema compatibility checks are disabled</li>
</ul>
<h2 id="4-rest-api-interface-reference---schemas-subjects">4. Rest API Interface Reference - Schemas, Subjects</h2>
<p>Schema Registry REST API 서버는 사용된 API의 버전과 데이터의 직렬화 포맷을 표시하기 위해 요청과 응답에 content type을 사용한다.</p>
<p>현재는 직렬화 포맷은 JSON만을 지원하고 API의 버전은 v1만 사용할 수 있다.
하지만 나중 버전의 호환을 위해서 반드시 content type을 사용해야한다.</p>
<p>추천하는 content type은 <code>application/vnd.schemaregistry.v1+json</code>이다.
v1은 API의 버전이고, json은 직렬화 포맷이다.</p>
<p>모든 API endpoint는 다음과 같은 error message 포맷을 사용한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">422</span> Unprocessable Entity
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;error_code&#34;</span>: 422,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;schema may not be empty&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><blockquote>
<p>추가적으로 요청시 json은 string 형태로 전달해야 한다.</p>
</blockquote>
<h3 id="schemas-관련">Schemas 관련</h3>
<h4 id="getschemasidsintid"><code>GET /schemas/ids/{int: id}</code></h4>
<p>입력한 id를 이용하여 스키마 정보를 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
id (int) - 전역적으로 unique한 스키마 id</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
schema (string) - id로 구분한 schema string</p>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /schemas/ids/1 HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schema&#34;</span>: <span style="color:#e6db74">&#34;{\&#34;type\&#34;: \&#34;string\&#34;}&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="getschemastypes"><code>GET /schemas/types/</code></h4>
<p>Schema Registry에 저장된 스키마 타입을 요청한다.</p>
<blockquote>
<p><strong>Response JSON Object:</strong>
schema (string) - Schema Registry에서 현재 사용가능한 스키마 타입</p>
</blockquote>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /schemas/types HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;JSON&#34;</span>, <span style="color:#e6db74">&#34;PROTOBUF&#34;</span>, <span style="color:#e6db74">&#34;AVRO&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="getschemasidsintidversions"><code>GET /schemas/ids/{int: id}/versions</code></h4>
<p>Schema Registry에 저장된 스키마 타입을 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
id (int) - 전역적으로 unique한 스키마 id</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
subject - subject의 이름
version - return된 subject의 버전</p>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /schemas/ids/1/versions HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[{</span><span style="color:#e6db74">&#34;subject&#34;</span>:<span style="color:#e6db74">&#34;test-subject1&#34;</span>,<span style="color:#e6db74">&#34;version&#34;</span>:1<span style="color:#f92672">}]</span>
</span></span></code></pre></div><h3 id="subjects-관련">Subjects 관련</h3>
<blockquote>
<p>subject resource는 Schema Registry에 저장된 모든 subject 목록을 제공한다.<br>
subject는 스키마가 저장된 이름을 나타낸다.<br>
만약 Kafka에 Schema Registry를 사용하고 있다면, subject는 topic에 대한 key 또는 value 스키마를 등록하고 있는지에 따라 <code>&lt;topic&gt;-key</code> 또는 <code>&lt;topic&gt;-value</code>를 참조한다.</p>
</blockquote>
<h4 id="getsubjects"><code>GET /subjects</code></h4>
<p>Schema Registry에 저장된 subject의 목록을 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
deleted (boolean) - default는 false이다. <code>?deleted=true</code>로 요청하면 soft delete된 subject 목록을 함께 return 한다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
name (string) - subject</p>
<p><strong>Status Codes:</strong>
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /subjects HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#e6db74">&#34;subject1&#34;</span>, <span style="color:#e6db74">&#34;subject2&#34;</span><span style="color:#f92672">]</span>
</span></span></code></pre></div><h4 id="getsubjectsstring-subjectversions"><code>GET /subjects/(string: subject)/versions</code></h4>
<p>Schema Registry에 저장된 subject의 버전 목록을 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
version (int) - subject 아래에 저장된 스키마의 버전</p>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /subjects/test/versions HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>  1, 2, 3, <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">]</span>
</span></span></code></pre></div><h4 id="deletesubjectsstringsubject"><code>DELETE /subjects/(string: subject)</code></h4>
<p>등록된 특정 subject를 삭제한다.
이 API는 topic을 재사용하거나 개발 환경에서만 사용하는 것이 권장된다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
permanent (boolean) - <code>?permanent=true</code>를 추가하여 hard delete를 표시한다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
version (int) - subject 아래에 저장된 스키마의 버전</p>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>DELETE /subjects/test HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>  1, 2, 3, <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">]</span>
</span></span></code></pre></div><h4 id="getsubjectsstringsubjectversionsversionidversion"><code>GET /subjects/(string: subject)/versions/(versionId: version)</code></h4>
<p>등록된 특정 subject를 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
version (versionId) - return될 스키마의 버전이다. [1, 2^31 - 1] 또는 latest가 유효한 값이다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
subject (string) - subject의 이름
id (int) - 전역적으로 unique한 shema의 id
version (int) - subject 아래에 저장된 return될 스키마의 버전
schemaType (string) - schema의 format (default: AVRO)
schema (string) - schema의 내용</p>
<p><strong>Status Codes:</strong>
404 Not Found - schema not found
422 Unprocessable Entity - Invalid version
500 Internal Server Error - Error in the backend datastore</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /subjects/test/versions/1 HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;test&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;version&#34;</span>: 1,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schema&#34;</span>: <span style="color:#e6db74">&#34;{\&#34;type\&#34;: \&#34;string\&#34;}&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="getsubjectsstringsubjectversionsversionidversionschema"><code>GET /subjects/(string: subject)/versions/(versionId: version)/schema</code></h4>
<p>등록된 특정 subject를 요청한다. unescaped schema만 return 된다.?</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
version (versionId) - return될 스키마의 버전이다. [1, 2^31 - 1] 또는 latest가 유효한 값이다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
schema (string) - schema의 내용</p>
<p><strong>Status Codes:</strong>
404 Not Found - subject not found or version not found
422 Unprocessable Entity - Invalid version
500 Internal Server Error - Error in the backend datastore</p>
<blockquote>
</blockquote>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /subjects/test/versions/1/schema HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span><span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="postsubjectsstringsubjectversions"><code>POST /subjects/(string: subject)/versions</code></h4>
<p>등록된 특정 subject에 새로운 스키마를 등록한다.
만약 성공적으로 등록되면, unique한 스키마의 id가 return 된다.
동일한 스키마가 다른 subject에 등록되면 동일한 id가 return 된다. 그라나 스키마의 버전은 subject에 따라 다를 수 있다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
normalize (boolean) - <code>?normalize=true</code>를 추가하여 normalize 상태를 표시한다.?</p>
</blockquote>
<p><strong>Request JSON Object:</strong>
schema (string) - schema의 내용
schemaType - 스키마의 포맷 (default: AVRO)
references - 스키마의 이름 지정 (optional)</p>
<p><strong>Response JSON Object:</strong>
subject (string) - subject의 이름
id (int) - 전역적으로 unique한 스키마의 id
version (int) - return 되는 스키마의 버전
schema (string) - schema의 내용</p>
<p><strong>Status Codes:</strong>
409 Conflic - Incompatible schema
422 Unprocessable Entity - Invalid version
500 Internal Server Error - Error in the backend datastore or Operation timed out or Error while forwarding the request to the primary</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>POST /subjects/test/versions HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schema&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;type\&#34;: \&#34;record\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;name\&#34;: \&#34;test\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;fields\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;string\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;field1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;com.acme.Referenced\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;int\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">     }&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schemaType&#34;</span>: <span style="color:#e6db74">&#34;AVRO&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;references&#34;</span>: <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;com.acme.Referenced&#34;</span>,
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;subject&#34;</span>:  <span style="color:#e6db74">&#34;childSubject&#34;</span>,
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;version&#34;</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span><span style="color:#e6db74">&#34;id&#34;</span>:1<span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="postsubjectsstringsubject"><code>POST /subjects/(string: subject)</code></h4>
<p>특정 subject에 schema가 이미 등록됐는지 확인한다.
만약 존재하면 전역적으로 unique한 id와 schema를 return 한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
normalize (boolean) - <code>?normalize=true</code>를 추가하여 normalize 상태를 표시한다.</p>
</blockquote>
<p><strong>Request JSON Object:</strong>
schema (string) - schema의 내용
schemaType - 스키마의 포맷 (default: AVRO)
references - 스키마의 이름 지정 (optional)</p>
<p><strong>Response JSON Object:</strong>
subject (string) - subject의 이름
id (int) - 전역적으로 unique한 스키마의 id
version (int) - return 되는 스키마의 버전
schema (string) - schema의 내용</p>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found
500 Internal Server Error - Internal server error</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>POST /subjects/test HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;schema&#34;</span>:
</span></span><span style="display:flex;"><span>         <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;type\&#34;: \&#34;record\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;name\&#34;: \&#34;test\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;fields\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                  [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;type\&#34;: \&#34;string\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;name\&#34;: \&#34;field1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;type\&#34;: \&#34;int\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;name\&#34;: \&#34;field2\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                  ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              }&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;subject&#34;</span>: <span style="color:#e6db74">&#34;test&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;id&#34;</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;version&#34;</span>: <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;schema&#34;</span>:
</span></span><span style="display:flex;"><span>         <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;type\&#34;: \&#34;record\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;name\&#34;: \&#34;test\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                \&#34;fields\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                  [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;type\&#34;: \&#34;string\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;name\&#34;: \&#34;field1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;type\&#34;: \&#34;int\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      \&#34;name\&#34;: \&#34;field2\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                  ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              }&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="deletesubjectsstringsubjectversionsversionidversion"><code>DELETE /subjects/(string: subject)/versions/(versionId: version)</code></h4>
<p>특정 subject에 등록된 schema의 버전을 삭제한다.
이 API는 호환성 목적으로 이전에 등록한 스키마를 삭제하거나 이전에 등록한 스키마를 다시 등록해야 하는 개발 환경이나 극단적인 상황에서만 사용하는 것이 좋다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
version (versionId) - 삭제될 schema 버전을 표시한다. [1, 2^31 - 1] 또는 latest가 될 수 있다.<br>
permanent (boolean) - <code>?permanent=true</code>를 추가하여 hard delete를 표시한다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
int - 삭제된 schema의 버전</p>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found or Version not found
422 Unprocessable Entity - Invalid version
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>DELETE /subjects/test/versions/1 HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>
</span></span></code></pre></div><h4 id="getsubjectsstringsubjectversionsversionidversionreferencedby"><code>GET /subjects/(string: subject)/versions/{versionId: version}/referencedby</code></h4>
<p>주어진 subject와 버전에 대한 schema의 id의 목록을 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
version (versionId) - return 되는 schema 버전을 표시한다. [1, 2^31 - 1] 또는 latest가 될 수 있다.</p>
</blockquote>
<p><strong>Request JSON Array of Objects:</strong>
id (int) - 전역적으로 unique한 스키마의 id</p>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /subjects/test/versions/1/referencedby HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>  1, 2, 3, <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">]</span>
</span></span></code></pre></div><h2 id="5-rest-api-interface-reference---compatibility-config">5. REST API Interface Reference - Compatibility, Config</h2>
<h3 id="compatibility">Compatibility</h3>
<p>compatibility resource는 모든 버전 또는 특정 버전에 대해 사용자가 스키마의 호환성을 검사할 수 있도록 한다.</p>
<h4 id="postcompatibilitysubjectsstringsubjectversionsversionidversion"><code>POST /compatibility/subjects/(string: subject)/versions/(versionId: version)</code></h4>
<p>input 스키마에 대해서 특정 스키마의 버전에 대한 호환성을 검사한다.</p>
<blockquote>
<p><strong>Parameters:</strong>
subject (string) - 호환성을 테스트할 subject의 이름<br>
version (versionId) - 호환성을 테스트할 대상의 schema 버전을 표시한다. [1, 2^31 - 1] 또는 latest가 될 수 있다.<br>
verbose (boolean) - <code>?verbose=true</code>를 추가하여 호환성 테스트에 실패하는 이유를 출력한다.</p>
</blockquote>
<p><strong>Request JSON Object:</strong>
schema - 스키마의 내용
schemaType - 스키마의 포맷 (default: AVRO)
references - 참조된 스키마의 이름을 지정한다. (optional)</p>
<p><strong>Response JSON Object:</strong>
is_compatible (boolean) - 호환가능 여부</p>
<hr>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found or Version not found
422 Unprocessable Entity - Invalid schema or Invalid version
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>POST /compatibility/subjects/test/versions/latest HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schema&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;type\&#34;: \&#34;record\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;name\&#34;: \&#34;test\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;fields\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;string\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;field1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;int\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;field2\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">     }&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;is_compatible&#34;</span>: true
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="postcompatibilitysubjectsstringsubjectversions"><code>POST /compatibility/subjects/(string: subject)/versions</code></h4>
<p>호환성 전략에 따라 subject의 하나의 버전 또는 여러 버전의 호환성을 확인한다.</p>
<blockquote>
<p><strong>Parameters:</strong>
subject (string) - 호환성을 테스트할 subject의 이름
verbose (boolean) - **<code>?verbose=true</code>**를 추가하여 호환성 테스트에 실패하는 이유를 출력한다.</p>
</blockquote>
<p><strong>Request JSON Object:</strong>
schema - 스키마의 내용
schemaType - 스키마의 포맷 (default: AVRO)
references - 참조된 스키마의 이름을 지정한다. (optional)</p>
<p><strong>Response JSON Object:</strong>
is_compatible (boolean) - 호환가능 여부</p>
<hr>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found
422 Unprocessable Entity - Invalid schema
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>POST /compatibility/subjects/test/versions
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;schema&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;type\&#34;: \&#34;record\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;name\&#34;: \&#34;test\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">       \&#34;fields\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;string\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;field1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;type\&#34;: \&#34;int\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">             \&#34;name\&#34;: \&#34;field2\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">           }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">     }&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;is_compatible&#34;</span>: true
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="config">Config</h3>
<h4 id="putconfig"><code>PUT /config</code></h4>
<p>전역적 호환성 전략을 변경한다.</p>
<blockquote>
<p><strong>Request JSON Object:</strong><br>
compatibility (string) - 새롭게 변경된 호환성 전략을 표시한다.</p>
</blockquote>
<hr>
<p><strong>Status Codes:</strong>
422 Unprocessable Entity - Invalid compatibility level
500 Internal Server Error - Error in the backend data store or Error while forwarding request to the primary</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>PUT /config HTTP/1.1
</span></span><span style="display:flex;"><span>Host: kafkaproxy.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;compatibility&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;compatibility&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="get-config"><code>**GET /config**</code></h4>
<p>전역적 호환성 전략을 요청한다.</p>
<blockquote>
<p><strong>Response JSON Object:</strong><br>
compatibility (string) - 현재 호환성 전략을 표시한다.</p>
</blockquote>
<hr>
<p><strong>Status Codes:</strong>
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /config HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;compatibilityLevel&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="putconfigstring-subject"><code>PUT /config/(string: subject)</code></h4>
<p>특정 subject에 대한 호환성 전략을 변경한다.</p>
<blockquote>
<p><strong>Parameters:</strong>
subject (string) - subject의 이름</p>
</blockquote>
<p><strong>Request JSON Object:</strong>
compatibility (string) - 새롭게 변경된 호환성 전략을 표시한다.</p>
<hr>
<p><strong>Status Codes:</strong>
422 Unprocessable Entity - Invalid compatibility level
500 Internal Server Error - Error in the backend data store or Error while forwarding request to the primary</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>PUT /config/test HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;compatibility&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;compatibility&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="get-configstring-subject"><code>GET /config/(string: subject)</code></h4>
<p>특정 subject에 대한 호환성 전략을 요청한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름<br>
defaultToGlobal (boolean) - **<code>?defaultToBlobal=false</code>**를 추가하여 호환성을 표시한다.<br>
**<code>?defaultToBlobal=true</code>**를 추가하면 호환성 검사에 필요한 사항을 표시한다.</p>
</blockquote>
<p><strong>Response JSON Object:</strong>
compatibility (string) - 현재 호환성 전략을 표시한다.</p>
<hr>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GET /config/test HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#34;compatibilityLevel&#34;</span>: <span style="color:#e6db74">&#34;FULL&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="deleteconfigstringsubject"><code>DELETE /config/(string: subject)</code></h4>
<p>특정 subject에 대한 호환성 전략을 삭제하고, 전역적 호환성 전략을 사용한다.</p>
<blockquote>
<p><strong>Parameters:</strong><br>
subject (string) - subject의 이름</p>
</blockquote>
<hr>
<p><strong>Status Codes:</strong>
404 Not Found - Subject not found
500 Internal Server Error - Error in the backend data store</p>
<p><strong>Example request:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>DELETE /config/test HTTP/1.1
</span></span><span style="display:flex;"><span>Host: schemaregistry.example.com
</span></span><span style="display:flex;"><span>Accept: application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json
</span></span></code></pre></div><p><strong>Example response:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>Content-Type: application/vnd.schemaregistry.v1+json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#34;compatibility&#34;</span>: <span style="color:#e6db74">&#34;NONE&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="6-subject-name-strategy">6. Subject Name Strategy</h2>
<p>subject 이름을 만들어 내기 위한 subject naming strategy가 있다.</p>
<table>
<thead>
<tr>
<th>Strategy</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>TopicNameStrategy<!-- raw HTML omitted --> (default)</td>
<td>- topic 이름으로부터 subject의 이름을 만든다.<!-- raw HTML omitted -->- 항상 하나의 topic에 있는 메세지는 같은 schema를 가지는 것을 보장한다.</td>
</tr>
<tr>
<td>RecordNameStrategy</td>
<td>- record 이름으로부터 subject의 이름을 만들고, subject 아래에 서로 다른 schema를 가질 수 있는 논리적으로 관련된 그룹화를 제공한다.<!-- raw HTML omitted -->- 하나의 topic에 여러개의 schema를 가지는 것을 허용한다.<!-- raw HTML omitted -->- 이 전략은 메세지가 서로 다른 데이터 구조를 가질때 유용하게 사용할 수 있다.</td>
</tr>
<tr>
<td>TopicRecordNameStrategy</td>
<td>- topic과 record 이름으로부터 subject의 이름을 만들고, subject 아래에 서로 다른 schema를 가질 수 있는 논리적으로 관련된 그룹화를 제공한다.<!-- raw HTML omitted -->- 하나의 topic에 여러개의 schema를 가지는 것을 허용한다.<!-- raw HTML omitted -->- 이 전략은 메세지가 서로 다른 데이터 구조를 가질때 유용하게 사용할 수 있다.</td>
</tr>
</tbody>
</table>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#">https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#</a></li>
</ul>
]]></content:encoded></item><item><title>Kafka란?</title><link>https://jo-minjun.github.io/notes/kafka/</link><pubDate>Fri, 01 Jul 2022 12:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/kafka/</guid><description>1. kafka 란? apache kafka는 오픈 소스 분산 이벤트 스트리밍 플랫폼이다.
*데이터 파이프 라인 구성시, 주로 사용되는 오픈 소스로 대용량 실시간 로그 처리에 특화되어 많은 사람들이 사용하고 있다.
*데이터 파이프 라인: 데이터 처리 단계의 출력이 다음 단계의 입력으로 이어지는 형태로 연결된 구조를 가리킨다.
2. kafka의 특성 2.1. Publisher-Subscriber 모델 Publisher-Subscriber 모델은 중간에 데이터 큐를 두고 서로 간 독립적으로 데이터를 생산하고 소비한다.
이러한 구조를 통해, Publisher나 Subscriber에 장애가 생겨도, 독립적이기 때문에 안정적으로 데이터를 처리할 수 있다.</description><content:encoded><![CDATA[<h2 id="1-kafka-란"><strong>1. kafka 란?</strong></h2>
<p>apache kafka는 오픈 소스 분산 이벤트 스트리밍 플랫폼이다.</p>
<p><strong>*데이터 파이프 라인</strong> 구성시, 주로 사용되는 오픈 소스로 대용량 실시간 로그 처리에 특화되어 많은 사람들이 사용하고 있다.</p>
<blockquote>
<p><strong>*데이터 파이프 라인:</strong>
데이터 처리 단계의 출력이 다음 단계의 입력으로 이어지는 형태로 연결된 구조를 가리킨다.</p>
</blockquote>
<h2 id="2-kafka의-특성">2. kafka의 특성</h2>
<h3 id="21-publisher-subscriber-모델">2.1. Publisher-Subscriber 모델</h3>
<p>Publisher-Subscriber 모델은 중간에 데이터 큐를 두고 서로 간 독립적으로 데이터를 생산하고 소비한다.</p>
<p>이러한 구조를 통해, Publisher나 Subscriber에 장애가 생겨도, 독립적이기 때문에 안정적으로 데이터를 처리할 수 있다.</p>
<h3 id="22-고가용성-및-확장성-high-availablility-and-scalability">2.2. 고가용성 및 확장성 (High availablility and Scalability)</h3>
<p>kafka는 cluster 구조로 데이터를 분산하여 저장한다.</p>
<p>따라서 하나의 broker에 장애가 생겨도 가용성이 높다.</p>
<p>또한 클러스터를 수평적으로 늘려 안정성 및 성능을 향상시키는 Scale-out이 가능하다.</p>
<h3 id="23-디스크-순차-저장-및-처리">2.3. 디스크 순차 저장 및 처리</h3>
<p>메세지를 메모리 큐에 적재하는 기존 메세지 시스템과 달리 kafka는 메세지를 디스크에 순차적으로 저장한다.</p>
<p>따라서</p>
<p>서버에 장애가 나도 메세지가 디스크에 저장되어 안정성이 높고 순차적으로 저장되어 I/O작업이 줄어들어 성능이 좋아진다.</p>
<h3 id="24-분산-처리">2.4. 분산 처리</h3>
<p>kafka는 partition을 통해 여러개의 partition을 여러개의 서버에 분산시켜 나누어 처리할 수 있다.</p>
<h2 id="3-kafka의-구조">3. kafka의 구조</h2>
<h3 id="31-publisher-subscriber-모델">3.1. Publisher-Subscriber 모델</h3>
<p>Pub-Sub (발행-구독) 모델은 특정 시스템에 직접 메세지를 전달하는 시스템이 아니다.</p>
<p>publisher은 메세지를 <strong>*Topic</strong>을 통해서 분류하여 관리하고, receiver은 전달받기를 원하는 <strong>*Topic</strong>을 구독하여 메세지를 전달 받는다.</p>
<p>즉 <strong>*kafka cluster</strong>를 중심으로 producer가 push하고, consumer가 메세지를 pull하는 구조이다.</p>
<p><img loading="lazy" src="/images/notes/kafka/pub-sub.png" alt="pub-sub"  />
</p>
<blockquote>
<p><strong>*kafka cluster:</strong>
kafka 서버 (broker)로 이루어진 클러스터를 말한다.</p>
</blockquote>
<p><strong>broker:</strong>
메세지 중계 역할을 하는 kafka서버를 말한다.</p>
<p><strong>*topic:</strong>
kafka cluster에 메세지를 관리할 때, 기준이 되는 논리적 모델이다.
여러개를 생성할 수 있으며, 하나의 topic은 1개 이상의 partition으로 구성되어 있다.</p>
<p><strong>partition:</strong>
토픽에서 메세지를 분산 처리하는 단위이다.
토픽을 partition으로 나누어 나눈 만큼 분산 처리를 한다.
kafka option에서 지정한 replica (replication factor)의 수만큼 partition이 broker들에게 복제된다.</p>
<p><strong>leader &amp; follower:</strong>
kafka 에서는 복제된 partition들 중에서 하나의 leader가 선출된다.
leader는 read, write 연산을 담당하며, follower들은 leader의 메세지를 복사한다.
leader partition이 포함된 broker에서 장애가 발생하면
follower partition들 중 하나가 leader가 된다.</p>
<p><strong>*consumer group - 상세 설명:</strong>
consumer의 집합을 구성하는 단위이다.
kafka에서는 consumer group 단위로 메세지를 처리하고, consumer group의 consumer 수만큼 파티션의 데이터를 분산처리하게 된다.</p>
<p><strong>*offset - 상세 설명:</strong>
consumer group들은 partition의 offset을 기준으로 데이터를 순차적으로 처리한다.</p>
<blockquote>
</blockquote>
<p><strong>3.1.1. consumer group</strong></p>
<p>여러개의 producer 들이 메세지를 전달하는 속도가 consumer가 메세지를 처리하는 속도보다 빠르면 하나의 consumer 만으로는 전달되는 메세지를 모두 처리할 수 없다.</p>
<p>따라서 consumer group을 통해 메세지를 처리한다.</p>
<p>consumer group은 같은 토픽의 여러개의 partition을 분담하여 처리하게 된다.</p>
<p>가령 partition의 수가 4개이고, consumer group의 consumer가 2개라면
각 consumer는 2개씩의 partition을 분담하여 메세지를 처리한다.
또한, partition의 수가 consumer group의 consumer 수보다 적다면
partition을 분담하지 못한 consumer는 idle이 된다.</p>
<p><strong>3.1.2. offset</strong></p>
<p>producer는 메세지를 순차적으로 전달하고 디스크에 순차적으로 저장한다.
따라서 저장된 메세지 뒤에 세로운 메세지를 붙이는 append 방식으로 write를 진행한다.
이 때 partition 들은 각 메세지의 순차적인 위치인 offset으로 구성된다.</p>
<p>따라서 offset은 partition 내에서 메세지의 위치를 표시하는 유니크한 숫자이다.
consumer는 자신이 어디까지 메세지를 처리했는지 offset을 이용해서 관리한다.</p>
<p><img loading="lazy" src="/images/notes/kafka/offset.png" alt="offset"  />
</p>
<h2 id="4-zookeeper-란">4. zookeeper 란?</h2>
<p>zookeeper는 분산 애플리케이션이 안정적으로 서비스될 수 있도록 각 애플리케이션의 구성 정보를 중앙 집중시키고, 네이밍, 동기화 등의 서비스를 지원한다.</p>
<p><img loading="lazy" src="/images/notes/kafka/zookeeper.png" alt="zookeeper"  />
</p>
<blockquote>
<p>zookeeper 여러개를 하나의 클러스터로 구성하고, 각각의 zookeeper 서버는 클라이언트 애플리케이션과 커넥션을 유지하며, 상태 정보를 공유한다.</p>
</blockquote>
<p>상태 정보는 zookeeper의 데이터 레지스터의 공유 계층 name space에 저장된다. 그리고 이 공간을 znode라고 부른다.</p>
<p>znode는 key-value 형태이며, 자식 노드를 가지고 있는 계층형 구조로 구성되어 있다.</p>
<p><img loading="lazy" src="/images/notes/kafka/znode.png" alt="znode"  />
</p>
<p>zookeeper는 클러스터로 구성될 시 몇개의 서버가 다운되더라도 과반수 구조에 의해 서비스가 유지된다.</p>
<p>따라서 일반적으로 클러스터는 홀수개의 서버로 구성된다.</p>
<blockquote>
<p><strong>3대 구성 클러스터:</strong>
1대 down, 2대 up: 서비스가 유지된다.
2대 down, 1대 up: 서비스가 유지되지 않는다.</p>
</blockquote>
]]></content:encoded></item></channel></rss>