<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>minjun's memory</title><link>https://jo-minjun.github.io/</link><description>Recent content on minjun's memory</description><generator>Hugo -- gohugo.io</generator><language>kr</language><lastBuildDate>Fri, 24 Feb 2023 00:02:51 +0900</lastBuildDate><atom:link href="https://jo-minjun.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>12 factor app (15 factor app)</title><link>https://jo-minjun.github.io/notes/12-factor-app/</link><pubDate>Fri, 24 Feb 2023 00:02:51 +0900</pubDate><guid>https://jo-minjun.github.io/notes/12-factor-app/</guid><description>Introduction 12 factor app은 서비스형 소프트웨어를 구성하기 위한 방법론입니다.
개발 언어/프레임워크에 상관없는 이식성과 플랫폼 호환성 향상을 위한 디자인 원칙입니다. 애플리케이션의 수평적 확장이 용이하도록 합니다. 애플리케이션 확장 가능성 CI/CD에 용이성 플랫폼간 이식성 기본적인 기대치, 정책 설정 1. Codebase 형상관리 시스템에서 하나의 코드베이스를 관리하면서, 다수에 배포한다. 하나의 코드베이스에 여러개의 애플리케이션 코드가 있다면 12 factor app 위반입니다.
코드베이스는 모든 배포에 사용되지만 각 배포는 다른 버전이 사용될 수 있습니다.
2. Dependencies 의존성을 명시적으로 선언하고 분리한다.</description></item><item><title>Kubernetes: pod와 service</title><link>https://jo-minjun.github.io/notes/kubernetes-pod-service/</link><pubDate>Wed, 11 Jan 2023 23:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/kubernetes-pod-service/</guid><description>Pod container Pod에는 container가 여러개 있을 수 있으며, localhost로 접근할 수 있다. Pod가 생성될 때는 IP가 할당되며, 이 IP를 통해 Pod에 접근할 수 있다. 쿠버네티스 클러스터 내에서만 IP로 접근 가능하다. Pod가 재생성되면 IP 주소가 바뀐다. apiVersion: v1 # 하나의 Pod kind: Pod metadata: name: pod-1 spec: # 여러 개의 container containers: - name: container1 image: image1 ports: - containerPort: 8000 - name: container2 image: image2 ports: - containerPort: 8080 label Pod 뿐만 아니라 다른 오브젝트에도 사용할 수 있지만, Pod에서 가장 많이 사용된다.</description></item><item><title>Introduce Kubernetes</title><link>https://jo-minjun.github.io/notes/introduce-kubernetes/</link><pubDate>Tue, 10 Jan 2023 21:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/introduce-kubernetes/</guid><description>What, Why Kubernetes? What 쿠버네티스는 컨테이너들을 운영, 관리하는 컨테이너 오케스트레이터이다. 컨테이너 오케스트레이터는 개별 컨테이너의 배포, 관리, 확장, 네트워킹을 자동화해준다. Why 물리 서버에서 동작하는 서비스는 리소스 관리를 효율적으로 할 수 없다. 3개의 서비스에 트래픽이 몰리는 시간대가 다르다. 각 서비스는 최소 트래픽 때 0.5대, 최대 트래픽 때 3개의 서버가 사용된다. 이 경우 총 9대의 서버가 사용된다. 배포시에도 비효율적이다. 중단이 가능한 경우 모든 서비스를 내린 후, 업데이트하여 다시 올린다. 중단이 불가능하면 서비스를 하나씩 내리고 하나씩 업데이트하여 다시 올린다.</description></item><item><title>kubectl command</title><link>https://jo-minjun.github.io/notes/kubectl-command/</link><pubDate>Mon, 09 Jan 2023 23:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/kubectl-command/</guid><description>kubectl command 쿠버네티스 API를 사용하는 CLI 도구이다. kubectl [command] [TYPE] [NAME] [flags] [command] 하나 이상의 리소스에서 수행하는 동작을 지정한다. ex) create get describe delete [TYPE] 리소스 타입을 지정한다. 대소문자를 구분하지 않으며 단수형, 복수형, 약어를 지정할 수 있다. ex) pod pods po [NAME] 하나 이상의 리소스의 이름을 지정한다. 대소문자를 구분하며 리소스 이름을 지정하지 않으면 모든 리소스가 대상이 된다. 리소스가 모두 동일한 TYPE인 경우 ex) kubectl get pod name1 name2 리소스 타입을 개별로 지정하는 경우 ex) kubectl get pod/name1 replicaset/name2 [flags] 플래그를 지정한다.</description></item><item><title>Shell Script</title><link>https://jo-minjun.github.io/notes/shell-script/</link><pubDate>Mon, 09 Jan 2023 23:30:12 +0900</pubDate><guid>https://jo-minjun.github.io/notes/shell-script/</guid><description>Shell Script 쉘 스크립트로 만든 UP-DOWN 게임 Shell이란 운영체제에서 커널과 사용자 사이를 이어주는 역할을 하는 명령어 해석기이다.
Shell은 bash sh csh zsh등이 있다.
Shell Script란 운영체제의 Shell을 이용해서 Shell 명령어들을 순차적으로 실행시켜주는 스크립트이다.
Shell Script를 사용하기 위해서는 다음과 같이 시작해야 한다.
#!/bin/bash #!/usr/bin/env bash #!/usr/bin/env python3 위와 같이 #!으로 시작하여 Shell의 경로를 선언해준다. 이를 쉬뱅이라 한다. 쉬뱅은 어느 인터프리터가 스크립트의 명령어를 해석할 지 가리킨다. 변수 변수 number=1 string=&amp;#34;string&amp;#34; echo &amp;#34;$number&amp;#34; echo &amp;#34;$string&amp;#34; echo &amp;#34;${number}&amp;#34; echo &amp;#34;${string}&amp;#34; 변수는 위와 같이 공백을 사용하지 않고 선언한다.</description></item><item><title>Linux 주요 커맨드와 옵션들</title><link>https://jo-minjun.github.io/notes/linux-command/</link><pubDate>Fri, 06 Jan 2023 00:01:11 +0900</pubDate><guid>https://jo-minjun.github.io/notes/linux-command/</guid><description>Linux 주요 커맨드와 옵션 커맨드 라인 단축키
ctrl + a: 커서를 라인 가장 앞으로 옮긴다. ctrl + e: 커서를 라인 가장 뒤로 옮긴다. ctrl + k: 커서를 기준으로 뒤쪽을 모두 지운다. 유틸리티 piping, redirect
&amp;lt;COMMAND&amp;gt; | &amp;lt;COMMAND&amp;gt; |를 기준으로 앞 커맨드의 표준 출력을 뒷 커맨드의 표준 입력으로 사용한다. curl -s https://apigateway.dev1.meshdev.io/neogeo/management/info | jq &amp;lt;COMMAND&amp;gt; &amp;lt; &amp;lt;FILE&amp;gt; &amp;lt;COMMAND&amp;gt; &amp;gt; &amp;lt;FILE&amp;gt; &amp;lt;COMMAND&amp;gt; 1&amp;gt; &amp;lt;FILE&amp;gt; # 위 명령어와 같다. &amp;lt;COMMAND&amp;gt; 2&amp;gt; &amp;lt;FILE&amp;gt; # 커맨드의 에러 내용을 파일에 덮어 쓴다.</description></item><item><title>Linux 배포판 별 패키지 매니저</title><link>https://jo-minjun.github.io/notes/linux-package-manager/</link><pubDate>Thu, 05 Jan 2023 20:45:12 +0900</pubDate><guid>https://jo-minjun.github.io/notes/linux-package-manager/</guid><description>배포판 별 패키지 매니저 alpine 참고: Working with the Alpine Package Keeper (apk)
apk [&amp;lt;OPTIONS&amp;gt;...] COMMAND [&amp;lt;ARGUMENTS&amp;gt;...] 존재하는 리포지터리(repository)는 다음과 같다. main 공식적으로 지원하는 패키지들 community testing 리포지터리에서 테스트된 패키지들 testing 새롭거나, 손상됐거나, 오래된 테스트가 필요한 패키지들 Updating repository
apk update 리포지터리 인덱스를 업데이트한다. Searching
apk search [&amp;lt;OPTIONS&amp;gt;...] PATTERN... 리포지터리에서 PATTERN을 검색한다. Option Description &amp;ndash;description -d 설명에서 PATTERN을 검색한다. &amp;ndash;exact -e 패키지 이름을 정확하게 매칭시킨다. Installing
apk add [&amp;lt;OPTIONS&amp;gt;...] PACKAGES... 패키지를 설치한다.</description></item><item><title>Docker 스터디</title><link>https://jo-minjun.github.io/notes/docker-study/</link><pubDate>Wed, 04 Jan 2023 23:51:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/docker-study/</guid><description>Docker Docker란 애플리케이션 개발, 실행, 공유를 위한 오픈 플랫폼이다. 호스트 시스템과 격리된 환경에서 애플리케이션을 패키징하고 실행할 수 있게 해준다. (컨테이너) 협업 시 각 로컬에 개발환경을 설치하지 않아도 된다. 서버 관리에 편리하다. https://docs.docker.com/get-started/overview/
도커 명령어 크게 4가지 종류의 명령어가 있다. Registry 관련 Image 관련 Container 관련 Compose 관련 명령어의 자세한 옵션과 설명은 아래 문서를 참조
docker
Registry 관련 login
docker login Registry에 로그인한다. logout
docker logout Registry에서 로그아웃한다. search
docker search [OPTIONS] &amp;lt;TERM&amp;gt; Registry에 있는 이미지를 검색한다.</description></item><item><title>DDD 핵심 정리</title><link>https://jo-minjun.github.io/notes/ddd-study/</link><pubDate>Fri, 30 Dec 2022 17:10:50 +0900</pubDate><guid>https://jo-minjun.github.io/notes/ddd-study/</guid><description>0. 참고 도메인 주도 개발 시작하기
도메인 주도 개발 시작하기 - YES24 핵사고날 아키텍처
Hexagonal Architecture with Java and Spring
https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/
예제 프로젝트
https://github.com/jo-minjun/order-delivery-project 1. 도메인이란 무엇일까? wikipedia: Domain (software engineering) A domain is the targeted subject area of a computer program. It is a term used in software engineering. Formally it represents the target subject of a specific programming project, whether narrowly or broadly defined.
소프트웨어 엔지니어링에서 사용되는 용어 컴퓨터 프로그램의 대상이 되는 영역 Example 소프트웨어 프로젝트의 목표가 특정 병원을 위한 프로그램을 만드는 경우 범위를 확장하여 모든 병원을 대상으로 하는 프로그램을 만드는 경우 상점과 기사를 이어주고 고객에게 물품을 전달해주는 라스트마일 서비스 2.</description></item><item><title>MSA 개발 스택 빠르게 훑어보기</title><link>https://jo-minjun.github.io/notes/msa-stack-quick-peek/</link><pubDate>Wed, 28 Dec 2022 17:10:30 +0900</pubDate><guid>https://jo-minjun.github.io/notes/msa-stack-quick-peek/</guid><description>1. 요구사항 아주 간단한 웹 기반 ITunes 주요 데이터는 다음과 같다. 가수 (Singer) 이름 정보를 가진다. 앨범 (Album) 발매 날짜, 앨범 제목 정보를 가진다. 노래 (Song) 노래 제목과 재생 시간 정보를 가진다. 공통 데이터 생성 시간 업데이트 시간 생성한 사람 업데이트한 사람 주요 기능 가수를 등록할 수 있다. 앨범을 등록할 수 있다. 노래를 등록할 수 있다. 노래 목록들을 조회할 수 있다. 노래를 조회할 수 있다. 노래를 업데이트 할 수 있다. 노래를 삭제할 수 있다.</description></item><item><title>네트워크 기초 지식</title><link>https://jo-minjun.github.io/notes/networkbasic/</link><pubDate>Wed, 17 Aug 2022 17:10:48 +0900</pubDate><guid>https://jo-minjun.github.io/notes/networkbasic/</guid><description>1. MAC, IP, Port 번호의 식별 MAC, IP, Port는 각 다음과 같은 레이어의 식별자이다. * DoD로 구분한 Layer * user mode ============================================ - Application kernel mode ============================================ - Transport: PORT - Network: IP H/W ============================================ - Access: MAC Transport
Port가 식별자가 된다. Network
Host에 대해서 IP가 식별자가 된다. Host: 네트워크에 연결된 컴퓨터, NIC 하나에 IP 주소를 여러 개 바인딩 할 수 있다.
→ Host에 IP가 여러개 존재한다. Access
Network Interface Card에 대해서 MAC이 식별자가 된다.</description></item><item><title>객체 지향 설계와 스프링</title><link>https://jo-minjun.github.io/notes/spring-core-basic/</link><pubDate>Fri, 01 Jul 2022 19:42:48 +0900</pubDate><guid>https://jo-minjun.github.io/notes/spring-core-basic/</guid><description>1. 스프링이란? 스프링의 생태계 필수: 스프링 프레임워크, 스프링 부트
선택: 스프링 데이터, 스프링 세션, 스프링 시큐리티, 스프링 Rest Docs, 스프링 배치, 스프링 클라우드
가장 중요한 것: 스프링 프레임워크 핵심 기술: 스프링 DI 컨테이너, AOP, 이벤트, 기타 웹 기술: 스프링 MVC, 스프링 webFlux 데이터 접근 기술: 트랜잭션, JDBC, ORM 지원, XML 지원 기술 통합: 캐시, 이메일, 원격접근, 스케줄링 테스트: 스프링 기반 테스트 지원 언어: 코틀린, 그루비 *최근에는 스프링 부트를 통해서 스프링 프레임워크의 기술들을 편리하게 사용한다.</description></item></channel></rss>